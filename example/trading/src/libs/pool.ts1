import IV3PoolABI from './IV3Pool.json'
import { computePoolAddress } from 'trustless-swap-sdk'
import { ethers } from 'ethers'

import {tokenSwap,CurrentConfig} from '../config'
import { getProvider } from './providers'

interface PoolInfo {
  token0: string
  token1: string
  fee: number
  tickSpacing: number
  sqrtPriceX96: ethers.BigNumber
  liquidity: ethers.BigNumber
  tick: number
}

export async function getPoolInfo(): Promise<PoolInfo> {
  const provider = getProvider()
  if (!provider) {
    throw new Error('No provider')
  }

  const currentPoolAddress = computePoolAddress({
    factoryAddress:CurrentConfig.POOL_FACTORY_CONTRACT_ADDRESS,
    tokenA: tokenSwap.in,
    tokenB: tokenSwap.out,
    fee: tokenSwap.poolFee
  })


  const poolContract = new ethers.Contract(
      currentPoolAddress,
      IV3PoolABI.abi,
      provider
  )


  const token0 = await poolContract.token0()
  const token1 = await poolContract.token1()
  const fee = await poolContract.fee()
  const tickSpacing = await poolContract.tickSpacing()
  const liquidity = await poolContract.liquidity()
  const slot0 = await poolContract.slot0()

  return {
    token0,
    token1,
    fee,
    tickSpacing,
    liquidity,
    sqrtPriceX96: slot0[0],
    tick: slot0[1],
  }
}
