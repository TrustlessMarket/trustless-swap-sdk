{"version":3,"file":"trustless-swap-sdk.cjs.production.min.js","sources":["../src/constants.ts","../src/utils/validateAndParseAddress.ts","../src/entities/fractions/fraction.ts","../src/entities/fractions/currencyAmount.ts","../src/utils/calldata.ts","../src/selfPermit.ts","../src/utils/encodeRouteToPath.ts","../src/entities/multicall.ts","../src/entities/payments.ts","../src/config.ts","../src/entities/baseCurrency.ts","../src/entities/token.ts","../src/entities/swapRouter.ts","../src/entities/quoter.ts","../src/entities/fractions/price.ts","../src/internalConstants.ts","../src/utils/computePoolAddress.ts","../src/utils/liquidityMath.ts","../src/utils/fullMath.ts","../src/utils/sqrtPriceMath.ts","../src/utils/swapMath.ts","../src/utils/mostSignificantBit.ts","../src/utils/tickMath.ts","../src/entities/tickDataProvider.ts","../src/utils/isSorted.ts","../src/utils/tickList.ts","../src/entities/tick.ts","../src/entities/tickListDataProvider.ts","../src/entities/pool.ts","../src/entities/route.ts","../src/utils/sortedInsert.ts","../src/entities/fractions/percent.ts","../src/entities/trade.ts","../src/entities/nativeCurrency.ts","../src/utils/maxLiquidityForAmounts.ts","../src/utils/sqrt.ts","../src/utils/encodeSqrtRatioX96.ts","../src/utils/priceTickConversions.ts","../src/entities/position.ts","../src/chains.ts","../src/utils/nearestUsableTick.ts","../src/multicall.ts","../src/entities/paymentsNaka.ts","../src/utils1.ts","../src/nonfungiblePositionManager.ts","../src/providers.ts","../src/poolinfo.ts","../src/wallet.ts","../src/entities/swapRouterNaka.ts","../src/trading.ts","../src/conversion.ts","../src/liquidity.ts"],"sourcesContent":["import JSBI from 'jsbi'\nimport { BigNumber } from 'ethers';\n\n// exports for external consumption\nexport type BigintIsh = JSBI | string | number\n\nexport enum TradeType {\n  EXACT_INPUT,\n  EXACT_OUTPUT\n}\n\nexport enum Rounding {\n  ROUND_DOWN,\n  ROUND_HALF_UP,\n  ROUND_UP\n}\n\nexport const MaxUint256 = JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\nexport const MaxUint128 = BigNumber.from(2).pow(128).sub(1);\nexport enum FeeAmount {\n  LOWEST = 100,\n  LOW = 500,\n  MEDIUM = 3000,\n  HIGH = 10000\n}\n\n/**\n * The default factory tick spacings by fee amount.\n */\nexport const TICK_SPACINGS: { [amount in FeeAmount]: number } = {\n  [FeeAmount.LOWEST]: 1,\n  [FeeAmount.LOW]: 10,\n  [FeeAmount.MEDIUM]: 60,\n  [FeeAmount.HIGH]: 200\n}\n\nexport const ADDRESS_ZERO = '0x0000000000000000000000000000000000000000'\nexport const POOL_INIT_CODE_HASH = '0x04759a882be3a45ff74719de5c82516d29af4b3480d076fc0c57b2fdab813bc7'\n\nexport const FACTORY_ADDRESS = '0x9D921bF7460d1FcfF77d88edd4D34cD1e2F56BDc'\n\n// ABI's\n\n// ABI's\n\nexport const ERC20_ABI = [\n  // Read-Only Functions\n  'function balanceOf(address owner) view returns (uint256)',\n  'function decimals() view returns (uint8)',\n  'function symbol() view returns (string)',\n  'function allowance(address owner, address spender) external view returns (uint256)',\n\n  // Authenticated Functions\n  'function transfer(address to, uint amount) returns (bool)',\n  'function approve(address _spender, uint256 _value) returns (bool)',\n\n  // Events\n  'event Transfer(address indexed from, address indexed to, uint amount)',\n]\n\nexport const WETH_ABI = [\n  // Wrap ETH\n  'function deposit() payable',\n\n  // Unwrap ETH\n  'function withdraw(uint wad) public',\n]\n\nexport const NONFUNGIBLE_POSITION_MANAGER_ABI = [\n  // Read-Only Functions\n  'function balanceOf(address _owner) view returns (uint256)',\n  'function tokenOfOwnerByIndex(address _owner, uint256 _index) view returns (uint256)',\n  'function tokenURI(uint256 tokenId) view returns (string memory)',\n\n  'function positions(uint256 tokenId) external view returns (uint96 nonce, address operator, address token0, address token1, uint24 fee, int24 tickLower, int24 tickUpper, uint128 liquidity, uint256 feeGrowthInside0LastX128, uint256 feeGrowthInside1LastX128, uint128 tokensOwed0, uint128 tokensOwed1)',\n]\n\n// Transactions\n\nexport const MAX_FEE_PER_GAS = 100000000000\nexport const MAX_PRIORITY_FEE_PER_GAS = 100000000000\nexport const TOKEN_AMOUNT_TO_APPROVE_FOR_TRANSFER = 2000\n","import { getAddress } from '@ethersproject/address'\n\n/**\n * Validates an address and returns the parsed (checksummed) version of that address\n * @param address the unchecksummed hex address\n */\nexport function validateAndParseAddress(address: string): string {\n  try {\n    return getAddress(address)\n  } catch (error) {\n    throw new Error(`${address} is not a valid address.`)\n  }\n}\n\n// Checks a string starts with 0x, is 42 characters long and contains only hex characters after 0x\nconst startsWith0xLen42HexRegex = /^0x[0-9a-fA-F]{40}$/\n\n/**\n * Checks if an address is valid by checking 0x prefix, length === 42 and hex encoding.\n * @param address the unchecksummed hex address\n */\nexport function checkValidAddress(address: string): string {\n  if (startsWith0xLen42HexRegex.test(address)) {\n    return address\n  }\n\n  throw new Error(`${address} is not a valid address.`)\n}\n","import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\nimport _Decimal from 'decimal.js-light'\nimport _Big, { RoundingMode } from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding } from '../../constants'\n\nconst Decimal = toFormat(_Decimal)\nconst Big = toFormat(_Big)\n\nconst toSignificantRounding = {\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP\n}\n\nconst toFixedRounding = {\n  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\n  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\n  [Rounding.ROUND_UP]: RoundingMode.RoundUp\n}\n\nexport class Fraction {\n  public readonly numerator: JSBI\n  public readonly denominator: JSBI\n\n  public constructor(numerator: BigintIsh, denominator: BigintIsh = JSBI.BigInt(1)) {\n    this.numerator = JSBI.BigInt(numerator)\n    this.denominator = JSBI.BigInt(denominator)\n  }\n\n  private static tryParseFraction(fractionish: BigintIsh | Fraction): Fraction {\n    if (fractionish instanceof JSBI || typeof fractionish === 'number' || typeof fractionish === 'string')\n      return new Fraction(fractionish)\n\n    if ('numerator' in fractionish && 'denominator' in fractionish) return fractionish\n    throw new Error('Could not parse fraction')\n  }\n\n  // performs floor division\n  public get quotient(): JSBI {\n    return JSBI.divide(this.numerator, this.denominator)\n  }\n\n  // remainder after floor division\n  public get remainder(): Fraction {\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\n  }\n\n  public invert(): Fraction {\n    return new Fraction(this.denominator, this.numerator)\n  }\n\n  public add(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.add(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public subtract(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.subtract(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public lessThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.lessThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public equalTo(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.equal(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public greaterThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.greaterThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public multiply(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.numerator),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public divide(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(this.denominator, otherParsed.numerator)\n    )\n  }\n\n  public toSignificant(\n    significantDigits: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\n\n    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] })\n    const quotient = new Decimal(this.numerator.toString())\n      .div(this.denominator.toString())\n      .toSignificantDigits(significantDigits)\n    return quotient.toFormat(quotient.decimalPlaces(), format)\n  }\n\n  public toFixed(\n    decimalPlaces: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\n\n    Big.DP = decimalPlaces\n    Big.RM = toFixedRounding[rounding]\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\n  }\n\n  /**\n   * Helper method for converting any super class back to a fraction\n   */\n  public get asFraction(): Fraction {\n    return new Fraction(this.numerator, this.denominator)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport { Currency } from '../currency'\nimport { Token } from '../token'\nimport { Fraction } from './fraction'\nimport _Big from 'big.js'\n\nimport toFormat from 'toformat'\nimport { BigintIsh, Rounding, MaxUint256 } from '../../constants'\n\nconst Big = toFormat(_Big)\n\nexport class CurrencyAmount<T extends Currency> extends Fraction {\n  public readonly currency: T\n  public readonly decimalScale: JSBI\n\n  /**\n   * Returns a new currency amount instance from the unitless amount of token, i.e. the raw amount\n   * @param currency the currency in the amount\n   * @param rawAmount the raw token or ether amount\n   */\n  public static fromRawAmount<T extends Currency>(currency: T, rawAmount: BigintIsh): CurrencyAmount<T> {\n    return new CurrencyAmount(currency, rawAmount)\n  }\n\n  /**\n   * Construct a currency amount with a denominator that is not equal to 1\n   * @param currency the currency\n   * @param numerator the numerator of the fractional token amount\n   * @param denominator the denominator of the fractional token amount\n   */\n  public static fromFractionalAmount<T extends Currency>(\n      currency: T,\n      numerator: BigintIsh,\n      denominator: BigintIsh\n  ): CurrencyAmount<T> {\n    return new CurrencyAmount(currency, numerator, denominator)\n  }\n\n  protected constructor(currency: T, numerator: BigintIsh, denominator?: BigintIsh) {\n    super(numerator, denominator)\n    invariant(JSBI.lessThanOrEqual(this.quotient, MaxUint256), 'AMOUNT')\n    this.currency = currency\n    this.decimalScale = JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(currency.decimals))\n  }\n\n  public add(other: CurrencyAmount<T>): CurrencyAmount<T> {\n    invariant(this.currency.equals(other.currency), 'CURRENCY')\n    const added = super.add(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, added.numerator, added.denominator)\n  }\n\n  public subtract(other: CurrencyAmount<T>): CurrencyAmount<T> {\n    invariant(this.currency.equals(other.currency), 'CURRENCY')\n    const subtracted = super.subtract(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, subtracted.numerator, subtracted.denominator)\n  }\n\n  public multiply(other: Fraction | BigintIsh): CurrencyAmount<T> {\n    const multiplied = super.multiply(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, multiplied.numerator, multiplied.denominator)\n  }\n\n  public divide(other: Fraction | BigintIsh): CurrencyAmount<T> {\n    const divided = super.divide(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, divided.numerator, divided.denominator)\n  }\n\n  public toSignificant(\n      significantDigits: number = 6,\n      format?: object,\n      rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    return super.divide(this.decimalScale).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(\n      decimalPlaces: number = this.currency.decimals,\n      format?: object,\n      rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    invariant(decimalPlaces <= this.currency.decimals, 'DECIMALS')\n    return super.divide(this.decimalScale).toFixed(decimalPlaces, format, rounding)\n  }\n\n  public toExact(format: object = { groupSeparator: '' }): string {\n    Big.DP = this.currency.decimals\n    return new Big(this.quotient.toString()).div(this.decimalScale.toString()).toFormat(format)\n  }\n\n  public get wrapped(): CurrencyAmount<Token> {\n    if (this.currency.isToken) return this as CurrencyAmount<Token>\n    return CurrencyAmount.fromFractionalAmount(this.currency.wrapped, this.numerator, this.denominator)\n  }\n}\n","import { BigintIsh } from '../constants'\nimport JSBI from 'jsbi'\n\n/**\n * Generated method parameters for executing a call.\n */\nexport interface MethodParameters {\n  /**\n   * The hex encoded calldata to perform the given operation\n   */\n  calldata: string\n  /**\n   * The amount of ether (wei) to send in hex.\n   */\n  value: string\n}\n\n/**\n * Converts a big int to a hex string\n * @param bigintIsh\n * @returns The hex encoded calldata\n */\nexport function toHex(bigintIsh: BigintIsh) {\n  const bigInt = JSBI.BigInt(bigintIsh)\n  let hex = bigInt.toString(16)\n  if (hex.length % 2 !== 0) {\n    hex = `0${hex}`\n  }\n  return `0x${hex}`\n}\n","import { Token } from './entities/token'\nimport { BigintIsh} from './constants'\nimport { Interface } from '@ethersproject/abi'\nimport ISelfPermit from './ISelfPermit.json'\nimport { toHex } from './utils/calldata'\n\nexport interface StandardPermitArguments {\n  v: 0 | 1 | 27 | 28\n  r: string\n  s: string\n  amount: BigintIsh\n  deadline: BigintIsh\n}\n\nexport interface AllowedPermitArguments {\n  v: 0 | 1 | 27 | 28\n  r: string\n  s: string\n  nonce: BigintIsh\n  expiry: BigintIsh\n}\n\nexport type PermitOptions = StandardPermitArguments | AllowedPermitArguments\n\nfunction isAllowedPermit(permitOptions: PermitOptions): permitOptions is AllowedPermitArguments {\n  return 'nonce' in permitOptions\n}\n\nexport abstract class SelfPermit {\n  public static INTERFACE: Interface = new Interface(ISelfPermit.abi)\n\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  public static encodePermit(token: Token, options: PermitOptions) {\n    return isAllowedPermit(options)\n      ? SelfPermit.INTERFACE.encodeFunctionData('selfPermitAllowed', [\n          token.address,\n          toHex(options.nonce),\n          toHex(options.expiry),\n          options.v,\n          options.r,\n          options.s\n        ])\n      : SelfPermit.INTERFACE.encodeFunctionData('selfPermit', [\n          token.address,\n          toHex(options.amount),\n          toHex(options.deadline),\n          options.v,\n          options.r,\n          options.s\n        ])\n  }\n}\n","import { pack } from '@ethersproject/solidity'\nimport { Currency } from '../entities/currency'\nimport { Token } from '../entities/token'\nimport { Pool } from '../entities/pool'\nimport { Route } from '../entities/route'\n\n/**\n * Converts a route to a hex encoded path\n * @param route the v3 path to convert to an encoded path\n * @param exactOutput whether the route should be encoded in reverse, for making exact output swaps\n */\nexport function encodeRouteToPath(route: Route<Currency, Currency>, exactOutput: boolean): string {\n  const firstInputToken: Token = route.input.wrapped\n\n  const { path, types } = route.pools.reduce(\n    (\n      { inputToken, path, types }: { inputToken: Token; path: (string | number)[]; types: string[] },\n      pool: Pool,\n      index\n    ): { inputToken: Token; path: (string | number)[]; types: string[] } => {\n      const outputToken: Token = pool.token0.equals(inputToken) ? pool.token1 : pool.token0\n      if (index === 0) {\n        return {\n          inputToken: outputToken,\n          types: ['address', 'uint24', 'address'],\n          path: [inputToken.address, pool.fee, outputToken.address]\n        }\n      } else {\n        return {\n          inputToken: outputToken,\n          types: [...types, 'uint24', 'address'],\n          path: [...path, pool.fee, outputToken.address]\n        }\n      }\n    },\n    { inputToken: firstInputToken, path: [], types: [] }\n  )\n\n  return exactOutput ? pack(types.reverse(), path.reverse()) : pack(types, path)\n}\n","import { Interface } from '@ethersproject/abi'\nimport IMulticall from './IMulticall.json'\n\nexport abstract class Multicall {\n  public static INTERFACE: Interface = new Interface(IMulticall.abi)\n\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  public static encodeMulticall(calldatas: string | string[]): string {\n    if (!Array.isArray(calldatas)) {\n      calldatas = [calldatas]\n    }\n\n    return calldatas.length === 1 ? calldatas[0] : Multicall.INTERFACE.encodeFunctionData('multicall', [calldatas])\n  }\n}\n","import JSBI from 'jsbi'\nimport { Interface } from '@ethersproject/abi'\nimport IPeripheryPaymentsWithFee from './IPeripheryPaymentsWithFee.json'\nimport {Token} from './token'\nimport { Percent} from './fractions/percent'\nimport { validateAndParseAddress } from '../utils/validateAndParseAddress'\nimport { toHex } from '../utils/calldata'\n\nexport interface FeeOptions {\n  /**\n   * The percent of the output that will be taken as a fee.\n   */\n  fee: Percent\n\n  /**\n   * The recipient of the fee.\n   */\n  recipient: string\n}\n\nexport abstract class Payments {\n  public static INTERFACE: Interface = new Interface(IPeripheryPaymentsWithFee.abi)\n\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  private static encodeFeeBips(fee: Percent): string {\n    return toHex(fee.multiply(10_000).quotient)\n  }\n\n  public static encodeUnwrapWETH9(amountMinimum: JSBI, recipient: string, feeOptions?: FeeOptions): string {\n    recipient = validateAndParseAddress(recipient)\n\n    if (!!feeOptions) {\n      const feeBips = this.encodeFeeBips(feeOptions.fee)\n      const feeRecipient: string = validateAndParseAddress(feeOptions.recipient)\n\n      return Payments.INTERFACE.encodeFunctionData('unwrapWTCWithFee', [\n        toHex(amountMinimum),\n        recipient,\n        feeBips,\n        feeRecipient\n      ])\n    } else {\n      return Payments.INTERFACE.encodeFunctionData('unwrapWTC', [toHex(amountMinimum), recipient])\n    }\n  }\n\n  public static encodeSweepToken(\n    token: Token,\n    amountMinimum: JSBI,\n    recipient: string,\n    feeOptions?: FeeOptions\n  ): string {\n    recipient = validateAndParseAddress(recipient)\n\n    if (!!feeOptions) {\n      const feeBips = this.encodeFeeBips(feeOptions.fee)\n      const feeRecipient: string = validateAndParseAddress(feeOptions.recipient)\n\n      return Payments.INTERFACE.encodeFunctionData('sweepTokenWithFee', [\n        token.address,\n        toHex(amountMinimum),\n        recipient,\n        feeBips,\n        feeRecipient\n      ])\n    } else {\n      return Payments.INTERFACE.encodeFunctionData('sweepToken', [token.address, toHex(amountMinimum), recipient])\n    }\n  }\n\n  public static encodeRefundETH(): string {\n    return Payments.INTERFACE.encodeFunctionData('refundTC')\n  }\n}\n","import { Token } from './entities/token'\nimport { FeeAmount } from './constants'\n//import { BigNumber } from \"@ethersproject/bignumber\"\n//import bn from \"bignumber.js\"\n\nexport enum ETypes {\n    'issue',\n    'buy',\n    'sell',\n    'approve',\n    'update_creator_fee',\n    'withdraw',\n    'createTournament',\n    'add_watch_list',\n    'remove_watch_list',\n    'swap_tokens',\n    'transfer',\n    'swap_eth_key',\n}\nexport type TokenType = 'BTC' | 'ETH';\n\nexport function encodePriceSqrt(\n    reserve1: number,\n    reserve0: number,\n): BigInt {\n    const result = BigInt(Math.floor(Math.sqrt(reserve1/reserve0) * 2 ** 96))\n    return result\n}\n\nexport function priceToSqrtPrice(price: number):BigInt{\n    const result = BigInt(Math.floor(Math.sqrt(price) * 2 ** 96))\n    return result\n}\n\n\nexport const typeToFee = {\n    [ETypes.issue]: 1000000,\n    [ETypes.buy]: 1000000,\n    [ETypes.sell]: 1000000,\n    [ETypes.approve]: 60000,\n    [ETypes.update_creator_fee]: 100000,\n    [ETypes.withdraw]: 2100000,\n    [ETypes.createTournament]: 350000,\n    [ETypes.add_watch_list]: 200000,\n    [ETypes.remove_watch_list]: 70000,\n    [ETypes.swap_tokens]: 2000000,\n    [ETypes.transfer]: 10000,\n    [ETypes.swap_eth_key]: 2000000,\n};\n\n\nexport enum Environment {\n    LOCAL,\n    TESTNET,\n    MAINNET,\n    NAKATESTNET,\n    NAKAMAINNET,\n}\nexport enum WalletType {\n    EXTENSION,\n    PRIVATEKEY,\n}\n\n// Inputs that configure this example to run\nexport interface EnvironmentConfig {\n    env: Environment\n    rpc:string,\n    network:string,\n    swapApi:string,\n    API_ROOT: string,\n    POOL_FACTORY_CONTRACT_ADDRESS:string\n    QUOTER_CONTRACT_ADDRESS:string\n    SWAP_ROUTER_ADDRESS:string\n    WETH_CONTRACT_ADDRESS:string\n    NONFUNGIBLE_POSITION_MANAGER_CONTRACT_ADDRESS:string\n    TC_CONTRACT_ADDRESS:string\n    ALPHA_CONTRACT_ADDRESS:string\n    tokens_list: Array<Token>\n    chainName: string\n}\n\n// Example Configuration\n\nexport const testnetConfig: EnvironmentConfig = {\n    env: Environment.TESTNET,\n    network:\"nos\",\n    swapApi:\"swap-v3\",\n    API_ROOT:\"https://dex-api.newbitcoincity.com\",\n    rpc:'https://l2-node.regtest.trustless.computer',\n    POOL_FACTORY_CONTRACT_ADDRESS:'0x9D921bF7460d1FcfF77d88edd4D34cD1e2F56BDc',\n    QUOTER_CONTRACT_ADDRESS:'0xD228465a3E1C64Ed6C627a87132dc6b1552cd0F2',\n    SWAP_ROUTER_ADDRESS:'0x3a3885F7a03beC1F4A1c00f155A5d57168fDE205',\n    WETH_CONTRACT_ADDRESS:'0x0fba66555b74f13809862bd6f15fffa0a0237059',\n    TC_CONTRACT_ADDRESS:'0x8b485d217096cE20A09AF11D15ccCc63323C1469',\n    ALPHA_CONTRACT_ADDRESS:'0x056e34faC103a216Ce1bBe65B75521d5C5f59037',\n    NONFUNGIBLE_POSITION_MANAGER_CONTRACT_ADDRESS:'0xe6Dc33d13200f0A9CF7cFC7B484aE1891D934234',\n    tokens_list:[\n        new Token(\n            1,\n            '0x0FBa66555B74F13809862BD6f15FffA0A0237059',\n            18,\n            'WETH',\n            'Wrapped Ether'),\n        new Token(\n            1,\n            '0xB68BB951883A7c5f24C7e2Cca8d9A68CFC606F41',\n            18,\n            'USDC',\n            'USD//C'\n        ),\n        new Token(\n            1,\n            '0x1d45c32C97707C916b350042CEAC2164fb6D00A1',\n            18,\n            'WBTC',\n            'Wrapped BTC'\n        ),\n        new Token(\n            1,\n            '0xe051b16b611138e45B42d74EEE10F6370B0AA9B6',\n            18,\n            'GM',\n            'GM'\n        ),\n        new Token(\n            1,\n            '0x0F888a161Ca87a2F4dD08e1DBf38Aff80388E2AE',\n            18,\n            'NAKA',\n            'NAKA'\n        )\n    ],\n    chainName: 'nos'\n}\n\nexport const nakatestnetConfig: EnvironmentConfig = {\n    env: Environment.NAKATESTNET,\n    network:\"naka\",\n    swapApi:\"swap\",\n    API_ROOT:\"https://stag-naka-api.fprotocol.io\",\n    rpc:'https://l2-node.regtest.trustless.computer',\n    POOL_FACTORY_CONTRACT_ADDRESS:'0x0CA45caD791CaB68BfaB71c536fD0A30384eEF64',\n    QUOTER_CONTRACT_ADDRESS:'0xbC693F10C74aFf16D78AF93FDF0737d0E2cbd961',\n    SWAP_ROUTER_ADDRESS:'0x7C9e6d498A3Dc8a672D6A1ddD7Acc9D6D88D63F9',\n    WETH_CONTRACT_ADDRESS:'0x0fba66555b74f13809862bd6f15fffa0a0237059',\n    TC_CONTRACT_ADDRESS:'0x3B9d9f8C9765c1BF7F4868c3721c136B70FD65fC',\n    ALPHA_CONTRACT_ADDRESS:'0x056e34faC103a216Ce1bBe65B75521d5C5f59037',\n    NONFUNGIBLE_POSITION_MANAGER_CONTRACT_ADDRESS:'0x48e6d71a83C969ac9CC1a93A49f74169520Dd187',\n    tokens_list:[\n        new Token(\n            1,\n            '0x0FBa66555B74F13809862BD6f15FffA0A0237059',\n            18,\n            'WETH',\n            'Wrapped Ether'),\n        new Token(\n            1,\n            '0xB68BB951883A7c5f24C7e2Cca8d9A68CFC606F41',\n            18,\n            'USDC',\n            'USD//C'\n        ),\n        new Token(\n            1,\n            '0x1d45c32C97707C916b350042CEAC2164fb6D00A1',\n            18,\n            'WBTC',\n            'Wrapped BTC'\n        )\n    ],\n    chainName: 'nos'\n}\n\nexport const nakamainnetConfig: EnvironmentConfig = {\n    env: Environment.NAKAMAINNET,\n    network:\"naka\",\n    swapApi:\"swap\",\n    API_ROOT:\"https://api.nakachain.xyz\",\n    rpc:'https://node.nakachain.xyz',\n    POOL_FACTORY_CONTRACT_ADDRESS:'0xB4FdCd9e30f0d418e9BbdA2Ba9B6C59123dc6b6d',\n    QUOTER_CONTRACT_ADDRESS:'0xb81E3cE690DEb07AF108117E958C6C712FB1b95f',\n    SWAP_ROUTER_ADDRESS:'0x53004da3353Aec99CE9546Ff9BbcEDF37E80E46b',\n    WETH_CONTRACT_ADDRESS:'0xCebaA2326DF8821ac4FfE6fd8751E5f9982F4Ee5',\n    TC_CONTRACT_ADDRESS:'0x87415029485119E96775D9d6C0CE1b21822CF708',\n    ALPHA_CONTRACT_ADDRESS:'0x056e34faC103a216Ce1bBe65B75521d5C5f59037',\n    NONFUNGIBLE_POSITION_MANAGER_CONTRACT_ADDRESS:'0x0f24f93043fFE43A92e4F035bA67954f1CA0B4E4',\n    tokens_list:[\n        new Token(\n            1,\n            '0xCebaA2326DF8821ac4FfE6fd8751E5f9982F4Ee5',\n            18,\n            'WETH',\n            'Wrapped Ether'),\n        new Token(\n            1,\n            '0x08C50bAa19d834fef4A8dd7559a6105281D1C378',\n            18,\n            'USDC',\n            'USD//C'\n        ),\n        new Token(\n            1,\n            '0xBD0adB3Ee21e0A75D3021384177238883D69e883',\n            18,\n            'WBTC',\n            'Wrapped BTC'\n        )\n    ],\n    chainName: 'naka'\n}\n\nexport const mainnetConfig: EnvironmentConfig = {\n    env: Environment.MAINNET,\n    network:\"nos\",\n    swapApi:\"swap-v3\",\n    rpc:'https://node.l2.trustless.computer',\n    API_ROOT:\"https://dex-api.newbitcoincity.com\",\n    POOL_FACTORY_CONTRACT_ADDRESS:'0x1d12AC81710da54A50e2e9095E20dB2D915Ce3C8',\n    QUOTER_CONTRACT_ADDRESS:'0x17f8275c3842f977d42Ab09c35042ddE4ec55856',\n    SWAP_ROUTER_ADDRESS:'0xB3eAc9358462356B231801309f553c48667B2CB7',\n    WETH_CONTRACT_ADDRESS:'0x43bda480de297a14cec95bfb1c6a313615f809ef',\n    NONFUNGIBLE_POSITION_MANAGER_CONTRACT_ADDRESS:'0x7D9D03317e90E477180dcFE28c75f8007Ecc6031',\n    TC_CONTRACT_ADDRESS:'0xad771ed0f8c5df06d21a7eda3b00acd6688dd532',\n    ALPHA_CONTRACT_ADDRESS:'0x9b727dcaC7b331f95786D3b01fA79191Ab527DA3',\n    tokens_list:[\n        new Token(\n            1,\n            '0x43bda480de297a14cec95bfb1c6a313615f809ef',\n            18,\n            'WETH',\n            'Wrapped Ether'),\n        new Token(\n            1,\n            '0xe8B280Ebb57bE03adC9d87e207BCD689EfADef96',\n            18,\n            'USDC',\n            'USD//C'\n        )\n        ,\n        new Token(\n            1,\n            '0x111808AbE352c8003e0eFfcc04998EaB26Cebe3c',\n            18,\n            'WBTC',\n            'Wrapped BTC'\n        )\n        ,\n        new Token(\n            1,\n            '0xdb380837095fbfAA4Ea65e7388Ef35A5FCad0334',\n            18,\n            'token1',\n            'token1'\n        ) ,\n        new Token(\n            1,\n            '0xBBA317FD4f2Cc8b8906D77cE410691dD9a6ee64F',\n            18,\n            'tk3',\n            'tk3'\n        )\n    ],\n    chainName: 'nos'\n}\nexport let CurrentConfig = mainnetConfig\n\nexport let tokenSwap ={\n    in: CurrentConfig.tokens_list[0],\n    amountIn: 1,\n    out: CurrentConfig.tokens_list[1],\n    poolFee: FeeAmount.MEDIUM,\n}\n\n\n\nexport let tokenLiquidity =  {\n    token0: CurrentConfig.tokens_list[3],\n        token0Amount: 0.5,\n        token1: CurrentConfig.tokens_list[4],\n        token1Amount: 0.2,\n        poolFee: FeeAmount.MEDIUM,\n        fractionToRemove: 1,\n        fractionToAdd: 0.5,\n}\n\n\nexport function setTOkenSwap(inputToken: Token,amountIn: number,outToken: Token, poolFee:number)  {\n    tokenSwap ={\n        in: inputToken,\n        amountIn: amountIn,\n        out: outToken,\n        poolFee:poolFee,\n    }\n}\n\nexport function setTOkenIn(inputToken: Token)  {\n    tokenSwap[\"in\"] = inputToken\n}\n\nexport function setTOkenOut(outToken: Token)  {\n    tokenSwap[\"out\"] = outToken\n}\n\n\nexport function resetTOkenSwap()\n{\n    tokenSwap ={\n        in: CurrentConfig.tokens_list[0],\n        amountIn: 1,\n        out: CurrentConfig.tokens_list[1],\n        poolFee: FeeAmount.MEDIUM,\n    }\n}\n\nexport function choiceConFig(environment: number)  {\n    if (environment == Environment.TESTNET){\n        CurrentConfig = testnetConfig\n    }\n    else if(environment == Environment.MAINNET){\n        CurrentConfig = mainnetConfig\n    }\n    else if(environment == Environment.NAKATESTNET){\n        CurrentConfig = nakatestnetConfig\n    }\n    else if(environment == Environment.NAKAMAINNET){\n        CurrentConfig = nakamainnetConfig\n    }\n    resetTOkenSwap()\n}\n\nexport function setConfig(config: EnvironmentConfig)  {\n    CurrentConfig = config\n    resetTOkenSwap()\n}\n\n//type=extension,type=privatekey\nexport interface walletConfig{\n    address: string\n    privateKey: string,\n    type:WalletType,\n}\nexport let CurrentWallet:walletConfig =\n    {\n        address: '',\n        privateKey: '',\n        type:WalletType.PRIVATEKEY,\n    }\nexport function changeWallet(type:WalletType,address: string,privateKey: string)  {\n    CurrentWallet.address = address\n    CurrentWallet.privateKey = privateKey\n    CurrentWallet.type = type\n}\n\n\n\n\n","import invariant from 'tiny-invariant'\nimport { Currency } from './currency'\nimport { Token } from './token'\n\n/**\n * A currency is any fungible financial instrument, including Ether, all ERC20 tokens, and other chain-native currencies\n */\nexport abstract class BaseCurrency {\n  /**\n   * Returns whether the currency is native to the chain and must be wrapped (e.g. Ether)\n   */\n  public abstract readonly isNative: boolean\n  /**\n   * Returns whether the currency is a token that is usable in trustless-swap without wrapping\n   */\n  public abstract readonly isToken: boolean\n\n  /**\n   * The chain ID on which this currency resides\n   */\n  public readonly chainId: number\n  /**\n   * The decimals used in representing currency amounts\n   */\n  public readonly decimals: number\n  /**\n   * The symbol of the currency, i.e. a short textual non-unique identifier\n   */\n  public readonly symbol?: string\n  /**\n   * The name of the currency, i.e. a descriptive textual non-unique identifier\n   */\n  public readonly name?: string\n\n  /**\n   * Constructs an instance of the base class `BaseCurrency`.\n   * @param chainId the chain ID on which this currency resides\n   * @param decimals decimals of the currency\n   * @param symbol symbol of the currency\n   * @param name of the currency\n   */\n  protected constructor(chainId: number, decimals: number, symbol?: string, name?: string) {\n    invariant(Number.isSafeInteger(chainId), 'CHAIN_ID')\n    invariant(decimals >= 0 && decimals < 255 && Number.isInteger(decimals), 'DECIMALS')\n\n    this.chainId = chainId\n    this.decimals = decimals\n    this.symbol = symbol\n    this.name = name\n  }\n\n  /**\n   * Returns whether this currency is functionally equivalent to the other currency\n   * @param other the other currency\n   */\n  public abstract equals(other: Currency): boolean\n\n  /**\n   * Return the wrapped version of this currency that can be used with the trustless-swap contracts. Currencies must\n   * implement this to be used in trustless-swap\n   */\n  public abstract get wrapped(): Token\n}\n","import invariant from 'tiny-invariant'\nimport { checkValidAddress, validateAndParseAddress } from '../utils/validateAndParseAddress'\nimport { BaseCurrency } from './baseCurrency'\nimport { Currency } from './currency'\n\n/**\n * Represents an ERC20 token with a unique address and some metadata.\n */\nexport class Token extends BaseCurrency {\n  public readonly isNative: false = false\n  public readonly isToken: true = true\n\n  /**\n   * The contract address on the chain on which this token lives\n   */\n  public readonly address: string\n\n  /**\n   *\n   * @param chainId {@link BaseCurrency#chainId}\n   * @param address The contract address on the chain on which this token lives\n   * @param decimals {@link BaseCurrency#decimals}\n   * @param symbol {@link BaseCurrency#symbol}\n   * @param name {@link BaseCurrency#name}\n   * @param bypassChecksum If true it only checks for length === 42, startsWith 0x and contains only hex characters\n   */\n  public constructor(\n    chainId: number,\n    address: string,\n    decimals: number,\n    symbol?: string,\n    name?: string,\n    bypassChecksum?: boolean\n  ) {\n    super(chainId, decimals, symbol, name)\n    if (bypassChecksum) {\n      this.address = checkValidAddress(address)\n    } else {\n      this.address = validateAndParseAddress(address)\n    }\n  }\n\n  /**\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\n   * @param other other token to compare\n   */\n  public equals(other: Currency): boolean {\n    return other.isToken && this.chainId === other.chainId && this.address.toLowerCase() === other.address.toLowerCase()\n  }\n\n  /**\n   * Returns true if the address of this token sorts before the address of the other token\n   * @param other other token to compare\n   * @throws if the tokens have the same address\n   * @throws if the tokens are on different chains\n   */\n  public sortsBefore(other: Token): boolean {\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\n    invariant(this.address.toLowerCase() !== other.address.toLowerCase(), 'ADDRESSES')\n    return this.address.toLowerCase() < other.address.toLowerCase()\n  }\n\n  /**\n   * Return this token, which does not need to be wrapped\n   */\n  public get wrapped(): Token {\n    return this\n  }\n}\n","import { Interface } from '@ethersproject/abi'\nimport { ADDRESS_ZERO,BigintIsh,TradeType } from '../constants'\nimport { validateAndParseAddress } from '../utils/validateAndParseAddress'\nimport { Currency } from './currency'\nimport { CurrencyAmount } from './fractions/currencyAmount'\nimport { Percent } from './fractions/percent'\nimport invariant from 'tiny-invariant'\nimport { Trade } from './trade'\nimport { PermitOptions, SelfPermit } from '../selfPermit'\nimport { encodeRouteToPath } from '../utils/encodeRouteToPath'\nimport { MethodParameters, toHex } from '../utils/calldata'\nimport ISwapRouter from './SwRouter.json'\nimport { Multicall } from './multicall'\nimport { FeeOptions, Payments } from './payments'\nimport { CurrentConfig } from '../config'\n\n/**\n * Options for producing the arguments to send calls to the router.\n */\nexport interface SwapOptions {\n  /**\n   * How much the execution price is allowed to move unfavorably from the trade execution price.\n   */\n  slippageTolerance: Percent\n\n  /**\n   * The account that should receive the output.\n   */\n  recipient: string\n\n  /**\n   * When the transaction expires, in epoch seconds.\n   */\n  deadline: BigintIsh\n\n  /**\n   * The optional permit parameters for spending the input.\n   */\n  inputTokenPermit?: PermitOptions\n\n  /**\n   * The optional price limit for the trade.\n   */\n  sqrtPriceLimitX96?: BigintIsh\n\n  /**\n   * Optional information for taking a fee on output.\n   */\n  fee?: FeeOptions\n}\n\n/**\n * Represents the trustless-swap V3 SwapRouter, and has static methods for helping execute trades.\n */\nexport abstract class SwapRouter {\n  public static INTERFACE: Interface = new Interface(ISwapRouter.abi)\n\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  /**\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trade to produce call parameters for\n   * @param options options for the call parameters\n   */\n  public static swapCallParameters(\n    trades: Trade<Currency, Currency, TradeType> | Trade<Currency, Currency, TradeType>[],\n    options: SwapOptions\n  ): MethodParameters {\n    if (!Array.isArray(trades)) {\n      trades = [trades]\n    }\n    const sampleTrade = trades[0]\n    const tokenIn = sampleTrade.inputAmount.currency.wrapped\n    const tokenOut = sampleTrade.outputAmount.currency.wrapped\n    // All trades should have the same starting and ending token.\n    invariant(\n      trades.every(trade => trade.inputAmount.currency.wrapped.equals(tokenIn)),\n      'TOKEN_IN_DIFF'\n    )\n    invariant(\n      trades.every(trade => trade.outputAmount.currency.wrapped.equals(tokenOut)),\n      'TOKEN_OUT_DIFF'\n    )\n\n    const calldatas: string[] = []\n\n    const ZERO_IN: CurrencyAmount<Currency> = CurrencyAmount.fromRawAmount(trades[0].inputAmount.currency, 0)\n    const ZERO_OUT: CurrencyAmount<Currency> = CurrencyAmount.fromRawAmount(trades[0].outputAmount.currency, 0)\n\n    const totalAmountOut: CurrencyAmount<Currency> = trades.reduce(\n      (sum, trade) => sum.add(trade.minimumAmountOut(options.slippageTolerance)),\n      ZERO_OUT\n    )\n\n    // flag for whether a refund needs to happen\n    const mustRefund = (sampleTrade.inputAmount.currency.isNative ||  sampleTrade.inputAmount.currency.address.toLowerCase() == CurrentConfig.TC_CONTRACT_ADDRESS.toLowerCase()) && sampleTrade.tradeType === TradeType.EXACT_OUTPUT\n    const inputIsNative = sampleTrade.inputAmount.currency.isNative ||  sampleTrade.inputAmount.currency.address.toLowerCase() == CurrentConfig.TC_CONTRACT_ADDRESS.toLowerCase()\n    // flags for whether funds should be send first to the router\n    const outputIsNative = sampleTrade.outputAmount.currency.isNative ||  sampleTrade.outputAmount.currency.address.toLowerCase() == CurrentConfig.TC_CONTRACT_ADDRESS.toLowerCase()\n    const routerMustCustody = outputIsNative || !!options.fee\n\n    const totalValue: CurrencyAmount<Currency> = inputIsNative\n      ? trades.reduce((sum, trade) => sum.add(trade.maximumAmountIn(options.slippageTolerance)), ZERO_IN)\n      : ZERO_IN\n\n    // encode permit if necessary\n    if (options.inputTokenPermit) {\n      invariant(sampleTrade.inputAmount.currency.isToken, 'NON_TOKEN_PERMIT')\n      calldatas.push(SelfPermit.encodePermit(sampleTrade.inputAmount.currency, options.inputTokenPermit))\n    }\n\n    const recipient: string = validateAndParseAddress(options.recipient)\n    const deadline = toHex(options.deadline)\n\n    for (const trade of trades) {\n      for (const { route, inputAmount, outputAmount } of trade.swaps) {\n        const amountIn: string = toHex(trade.maximumAmountIn(options.slippageTolerance, inputAmount).quotient)\n        const amountOut: string = toHex(trade.minimumAmountOut(options.slippageTolerance, outputAmount).quotient)\n\n        // flag for whether the trade is single hop or not\n        const singleHop = route.pools.length === 1\n        if (singleHop) {\n          if (trade.tradeType === TradeType.EXACT_INPUT) {\n            const exactInputSingleParams = {\n              tokenIn: route.tokenPath[0].address,\n              tokenOut: route.tokenPath[1].address,\n              fee: route.pools[0].fee,\n              recipient: routerMustCustody ? ADDRESS_ZERO : recipient,\n              deadline,\n              amountIn,\n              amountOutMinimum: amountOut,\n              sqrtPriceLimitX96: toHex(options.sqrtPriceLimitX96 ?? 0)\n            }\n\n            calldatas.push(SwapRouter.INTERFACE.encodeFunctionData('exactInputSingle', [exactInputSingleParams]))\n          } else {\n            const exactOutputSingleParams = {\n              tokenIn: route.tokenPath[0].address,\n              tokenOut: route.tokenPath[1].address,\n              fee: route.pools[0].fee,\n              recipient: routerMustCustody ? ADDRESS_ZERO : recipient,\n              deadline,\n              amountOut,\n              amountInMaximum: amountIn,\n              sqrtPriceLimitX96: toHex(options.sqrtPriceLimitX96 ?? 0)\n            }\n\n            calldatas.push(SwapRouter.INTERFACE.encodeFunctionData('exactOutputSingle', [exactOutputSingleParams]))\n          }\n        } else {\n          invariant(options.sqrtPriceLimitX96 === undefined, 'MULTIHOP_PRICE_LIMIT')\n\n          const path: string = encodeRouteToPath(route, trade.tradeType === TradeType.EXACT_OUTPUT)\n\n          if (trade.tradeType === TradeType.EXACT_INPUT) {\n            const exactInputParams = {\n              path,\n              recipient: routerMustCustody ? ADDRESS_ZERO : recipient,\n              deadline,\n              amountIn,\n              amountOutMinimum: amountOut\n            }\n\n            calldatas.push(SwapRouter.INTERFACE.encodeFunctionData('exactInput', [exactInputParams]))\n          } else {\n            const exactOutputParams = {\n              path,\n              recipient: routerMustCustody ? ADDRESS_ZERO : recipient,\n              deadline,\n              amountOut,\n              amountInMaximum: amountIn\n            }\n            calldatas.push(SwapRouter.INTERFACE.encodeFunctionData('exactOutput', [exactOutputParams]))\n          }\n        }\n      }\n    }\n\n    // unwrap\n    if (routerMustCustody) {\n      if (!!options.fee) {\n        if (outputIsNative) {\n          calldatas.push(Payments.encodeUnwrapWETH9(totalAmountOut.quotient, recipient, options.fee))\n        } else {\n          calldatas.push(\n            Payments.encodeSweepToken(\n              sampleTrade.outputAmount.currency.wrapped,\n              totalAmountOut.quotient,\n              recipient,\n              options.fee\n            )\n          )\n        }\n      } else {\n        calldatas.push(Payments.encodeUnwrapWETH9(totalAmountOut.quotient, recipient))\n      }\n    }\n\n    // refund\n    if (mustRefund) {\n      calldatas.push(Payments.encodeRefundETH())\n    }\n\n    return {\n      calldata: Multicall.encodeMulticall(calldatas),\n      value: toHex(totalValue.quotient)\n    }\n  }\n}\n","import { Interface } from '@ethersproject/abi'\nimport { BigintIsh,TradeType } from '../constants'\nimport { Currency} from './currency'\nimport { CurrencyAmount} from './fractions/currencyAmount'\nimport { encodeRouteToPath} from '../utils/encodeRouteToPath'\nimport { MethodParameters, toHex } from '../utils/calldata'\nimport IQuoter from './SwQuoter.json'\nimport IQuoterV2 from './QuoterV2.json'\nimport { Route } from './route'\nimport invariant from 'tiny-invariant'\nimport { FeeAmount } from '../constants'\n\n/**\n * Optional arguments to send to the quoter.\n */\nexport interface QuoteOptions {\n  /**\n   * The optional price limit for the trade.\n   */\n  sqrtPriceLimitX96?: BigintIsh\n\n  /**\n   * The optional quoter interface to use\n   */\n  useQuoterV2?: boolean\n}\n\ninterface BaseQuoteParams {\n  fee: FeeAmount\n  sqrtPriceLimitX96: string\n  tokenIn: string\n  tokenOut: string\n}\n\n/**\n * Represents the trustless-swap V3 QuoterV1 contract with a method for returning the formatted\n * calldata needed to call the quoter contract.\n */\nexport abstract class SwapQuoter {\n  public static V1INTERFACE: Interface = new Interface(IQuoter.abi)\n  public static V2INTERFACE: Interface = new Interface(IQuoterV2.abi)\n\n  /**\n   * Produces the on-chain method name of the appropriate function within QuoterV2,\n   * and the relevant hex encoded parameters.\n   * @template TInput The input token, either Ether or an ERC-20\n   * @template TOutput The output token, either Ether or an ERC-20\n   * @param route The swap route, a list of pools through which a swap can occur\n   * @param amount The amount of the quote, either an amount in, or an amount out\n   * @param tradeType The trade type, either exact input or exact output\n   * @param options The optional params including price limit and Quoter contract switch\n   * @returns The formatted calldata\n   */\n  public static quoteCallParameters<TInput extends Currency, TOutput extends Currency>(\n    route: Route<TInput, TOutput>,\n    amount: CurrencyAmount<TInput | TOutput>,\n    tradeType: TradeType,\n    options: QuoteOptions = {}\n  ): MethodParameters {\n    const singleHop = route.pools.length === 1\n    const quoteAmount: string = toHex(amount.quotient)\n    let calldata: string\n    const swapInterface: Interface = options.useQuoterV2 ? this.V2INTERFACE : this.V1INTERFACE\n\n    if (singleHop) {\n      const baseQuoteParams: BaseQuoteParams = {\n        tokenIn: route.tokenPath[0].address,\n        tokenOut: route.tokenPath[1].address,\n        fee: route.pools[0].fee,\n        sqrtPriceLimitX96: toHex(options?.sqrtPriceLimitX96 ?? 0)\n      }\n\n      const v2QuoteParams = {\n        ...baseQuoteParams,\n        ...(tradeType == TradeType.EXACT_INPUT ? { amountIn: quoteAmount } : { amount: quoteAmount })\n      }\n\n      const v1QuoteParams = [\n        baseQuoteParams.tokenIn,\n        baseQuoteParams.tokenOut,\n        baseQuoteParams.fee,\n        quoteAmount,\n        baseQuoteParams.sqrtPriceLimitX96\n      ]\n\n      const tradeTypeFunctionName =\n        tradeType === TradeType.EXACT_INPUT ? 'quoteExactInputSingle' : 'quoteExactOutputSingle'\n      calldata = swapInterface.encodeFunctionData(\n        tradeTypeFunctionName,\n        options.useQuoterV2 ? [v2QuoteParams] : v1QuoteParams\n      )\n    } else {\n      invariant(options?.sqrtPriceLimitX96 === undefined, 'MULTIHOP_PRICE_LIMIT')\n      const path: string = encodeRouteToPath(route, tradeType === TradeType.EXACT_OUTPUT)\n      const tradeTypeFunctionName = tradeType === TradeType.EXACT_INPUT ? 'quoteExactInput' : 'quoteExactOutput'\n      calldata = swapInterface.encodeFunctionData(tradeTypeFunctionName, [path, quoteAmount])\n    }\n    return {\n      calldata,\n      value: toHex(0)\n    }\n  }\n}\n","import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\n\nimport { BigintIsh, Rounding } from '../../constants'\nimport { Currency } from '../currency'\nimport { Fraction } from './fraction'\nimport { CurrencyAmount } from './currencyAmount'\n\nexport class Price<TBase extends Currency, TQuote extends Currency> extends Fraction {\n  public readonly baseCurrency: TBase // input i.e. denominator\n  public readonly quoteCurrency: TQuote // output i.e. numerator\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\n\n  /**\n   * Construct a price, either with the base and quote currency amount, or the\n   * @param args\n   */\n  public constructor(\n    ...args:\n      | [TBase, TQuote, BigintIsh, BigintIsh]\n      | [{ baseAmount: CurrencyAmount<TBase>; quoteAmount: CurrencyAmount<TQuote> }]\n  ) {\n    let baseCurrency: TBase, quoteCurrency: TQuote, denominator: BigintIsh, numerator: BigintIsh\n\n    if (args.length === 4) {\n      ;[baseCurrency, quoteCurrency, denominator, numerator] = args\n    } else {\n      const result = args[0].quoteAmount.divide(args[0].baseAmount)\n      ;[baseCurrency, quoteCurrency, denominator, numerator] = [\n        args[0].baseAmount.currency,\n        args[0].quoteAmount.currency,\n        result.denominator,\n        result.numerator\n      ]\n    }\n    super(numerator, denominator)\n\n    this.baseCurrency = baseCurrency\n    this.quoteCurrency = quoteCurrency\n    this.scalar = new Fraction(\n      JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(baseCurrency.decimals)),\n      JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(quoteCurrency.decimals))\n    )\n  }\n\n  /**\n   * Flip the price, switching the base and quote currency\n   */\n  public invert(): Price<TQuote, TBase> {\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator)\n  }\n\n  /**\n   * Multiply the price by another price, returning a new price. The other price must have the same base currency as this price's quote currency\n   * @param other the other price\n   */\n  public multiply<TOtherQuote extends Currency>(other: Price<TQuote, TOtherQuote>): Price<TBase, TOtherQuote> {\n    invariant(this.quoteCurrency.equals(other.baseCurrency), 'TOKEN')\n    const fraction = super.multiply(other)\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator)\n  }\n\n  /**\n   * Return the amount of quote currency corresponding to a given amount of the base currency\n   * @param currencyAmount the amount of base currency to quote against the price\n   */\n  public quote(currencyAmount: CurrencyAmount<TBase>): CurrencyAmount<TQuote> {\n    invariant(currencyAmount.currency.equals(this.baseCurrency), 'TOKEN')\n    const result = super.multiply(currencyAmount)\n    return CurrencyAmount.fromFractionalAmount(this.quoteCurrency, result.numerator, result.denominator)\n  }\n\n  /**\n   * Get the value scaled by decimals for formatting\n   * @private\n   */\n  private get adjustedForDecimals(): Fraction {\n    return super.multiply(this.scalar)\n  }\n\n  public toSignificant(significantDigits: number = 6, format?: object, rounding?: Rounding): string {\n    return this.adjustedForDecimals.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 4, format?: object, rounding?: Rounding): string {\n    return this.adjustedForDecimals.toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import JSBI from 'jsbi'\n\n// constants used internally but not expected to be used externally\nexport const NEGATIVE_ONE = JSBI.BigInt(-1)\nexport const ZERO = JSBI.BigInt(0)\nexport const ONE = JSBI.BigInt(1)\n\n// used in liquidity amount math\nexport const Q96 = JSBI.exponentiate(JSBI.BigInt(2), JSBI.BigInt(96))\nexport const Q192 = JSBI.exponentiate(Q96, JSBI.BigInt(2))\n","import { defaultAbiCoder } from '@ethersproject/abi'\nimport { getCreate2Address } from '@ethersproject/address'\nimport { keccak256 } from '@ethersproject/solidity'\nimport { Token } from '../entities/token'\nimport { FeeAmount, POOL_INIT_CODE_HASH } from '../constants'\n\n/**\n * Computes a pool address\n * @param factoryAddress The trustless-swap V3 factory address\n * @param tokenA The first token of the pair, irrespective of sort order\n * @param tokenB The second token of the pair, irrespective of sort order\n * @param fee The fee tier of the pool\n * @param initCodeHashManualOverride Override the init code hash used to compute the pool address if necessary\n * @returns The pool address\n */\nexport function computePoolAddress({\n  factoryAddress,\n  tokenA,\n  tokenB,\n  fee,\n  initCodeHashManualOverride\n}: {\n  factoryAddress: string\n  tokenA: Token\n  tokenB: Token\n  fee: FeeAmount\n  initCodeHashManualOverride?: string\n}): string {\n  const [token0, token1] = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\n  return getCreate2Address(\n    factoryAddress,\n    keccak256(\n      ['bytes'],\n      [defaultAbiCoder.encode(['address', 'address', 'uint24'], [token0.address, token1.address, fee])]\n    ),\n    initCodeHashManualOverride ?? POOL_INIT_CODE_HASH\n  )\n}\n","import JSBI from 'jsbi'\nimport { NEGATIVE_ONE, ZERO } from '../internalConstants'\n\nexport abstract class LiquidityMath {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  public static addDelta(x: JSBI, y: JSBI): JSBI {\n    if (JSBI.lessThan(y, ZERO)) {\n      return JSBI.subtract(x, JSBI.multiply(y, NEGATIVE_ONE))\n    } else {\n      return JSBI.add(x, y)\n    }\n  }\n}\n","import JSBI from 'jsbi'\nimport { ONE, ZERO } from '../internalConstants'\n\nexport abstract class FullMath {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  public static mulDivRoundingUp(a: JSBI, b: JSBI, denominator: JSBI): JSBI {\n    const product = JSBI.multiply(a, b)\n    let result = JSBI.divide(product, denominator)\n    if (JSBI.notEqual(JSBI.remainder(product, denominator), ZERO)) result = JSBI.add(result, ONE)\n    return result\n  }\n}\n","import { MaxUint256 } from '../constants'\nimport JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\nimport { ONE, ZERO, Q96 } from '../internalConstants'\nimport { FullMath } from './fullMath'\n\nconst MaxUint160 = JSBI.subtract(JSBI.exponentiate(JSBI.BigInt(2), JSBI.BigInt(160)), ONE)\n\nfunction multiplyIn256(x: JSBI, y: JSBI): JSBI {\n  const product = JSBI.multiply(x, y)\n  return JSBI.bitwiseAnd(product, MaxUint256)\n}\n\nfunction addIn256(x: JSBI, y: JSBI): JSBI {\n  const sum = JSBI.add(x, y)\n  return JSBI.bitwiseAnd(sum, MaxUint256)\n}\n\nexport abstract class SqrtPriceMath {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  public static getAmount0Delta(sqrtRatioAX96: JSBI, sqrtRatioBX96: JSBI, liquidity: JSBI, roundUp: boolean): JSBI {\n    if (JSBI.greaterThan(sqrtRatioAX96, sqrtRatioBX96)) {\n      ;[sqrtRatioAX96, sqrtRatioBX96] = [sqrtRatioBX96, sqrtRatioAX96]\n    }\n\n    const numerator1 = JSBI.leftShift(liquidity, JSBI.BigInt(96))\n    const numerator2 = JSBI.subtract(sqrtRatioBX96, sqrtRatioAX96)\n\n    return roundUp\n      ? FullMath.mulDivRoundingUp(FullMath.mulDivRoundingUp(numerator1, numerator2, sqrtRatioBX96), ONE, sqrtRatioAX96)\n      : JSBI.divide(JSBI.divide(JSBI.multiply(numerator1, numerator2), sqrtRatioBX96), sqrtRatioAX96)\n  }\n\n  public static getAmount1Delta(sqrtRatioAX96: JSBI, sqrtRatioBX96: JSBI, liquidity: JSBI, roundUp: boolean): JSBI {\n    if (JSBI.greaterThan(sqrtRatioAX96, sqrtRatioBX96)) {\n      ;[sqrtRatioAX96, sqrtRatioBX96] = [sqrtRatioBX96, sqrtRatioAX96]\n    }\n\n    return roundUp\n      ? FullMath.mulDivRoundingUp(liquidity, JSBI.subtract(sqrtRatioBX96, sqrtRatioAX96), Q96)\n      : JSBI.divide(JSBI.multiply(liquidity, JSBI.subtract(sqrtRatioBX96, sqrtRatioAX96)), Q96)\n  }\n\n  public static getNextSqrtPriceFromInput(sqrtPX96: JSBI, liquidity: JSBI, amountIn: JSBI, zeroForOne: boolean): JSBI {\n    invariant(JSBI.greaterThan(sqrtPX96, ZERO))\n    invariant(JSBI.greaterThan(liquidity, ZERO))\n\n    return zeroForOne\n      ? this.getNextSqrtPriceFromAmount0RoundingUp(sqrtPX96, liquidity, amountIn, true)\n      : this.getNextSqrtPriceFromAmount1RoundingDown(sqrtPX96, liquidity, amountIn, true)\n  }\n\n  public static getNextSqrtPriceFromOutput(\n    sqrtPX96: JSBI,\n    liquidity: JSBI,\n    amountOut: JSBI,\n    zeroForOne: boolean\n  ): JSBI {\n    invariant(JSBI.greaterThan(sqrtPX96, ZERO))\n    invariant(JSBI.greaterThan(liquidity, ZERO))\n\n    return zeroForOne\n      ? this.getNextSqrtPriceFromAmount1RoundingDown(sqrtPX96, liquidity, amountOut, false)\n      : this.getNextSqrtPriceFromAmount0RoundingUp(sqrtPX96, liquidity, amountOut, false)\n  }\n\n  private static getNextSqrtPriceFromAmount0RoundingUp(\n    sqrtPX96: JSBI,\n    liquidity: JSBI,\n    amount: JSBI,\n    add: boolean\n  ): JSBI {\n    if (JSBI.equal(amount, ZERO)) return sqrtPX96\n    const numerator1 = JSBI.leftShift(liquidity, JSBI.BigInt(96))\n\n    if (add) {\n      let product = multiplyIn256(amount, sqrtPX96)\n      if (JSBI.equal(JSBI.divide(product, amount), sqrtPX96)) {\n        const denominator = addIn256(numerator1, product)\n        if (JSBI.greaterThanOrEqual(denominator, numerator1)) {\n          return FullMath.mulDivRoundingUp(numerator1, sqrtPX96, denominator)\n        }\n      }\n\n      return FullMath.mulDivRoundingUp(numerator1, ONE, JSBI.add(JSBI.divide(numerator1, sqrtPX96), amount))\n    } else {\n      let product = multiplyIn256(amount, sqrtPX96)\n\n      invariant(JSBI.equal(JSBI.divide(product, amount), sqrtPX96))\n      invariant(JSBI.greaterThan(numerator1, product))\n      const denominator = JSBI.subtract(numerator1, product)\n      return FullMath.mulDivRoundingUp(numerator1, sqrtPX96, denominator)\n    }\n  }\n\n  private static getNextSqrtPriceFromAmount1RoundingDown(\n    sqrtPX96: JSBI,\n    liquidity: JSBI,\n    amount: JSBI,\n    add: boolean\n  ): JSBI {\n    if (add) {\n      const quotient = JSBI.lessThanOrEqual(amount, MaxUint160)\n        ? JSBI.divide(JSBI.leftShift(amount, JSBI.BigInt(96)), liquidity)\n        : JSBI.divide(JSBI.multiply(amount, Q96), liquidity)\n\n      return JSBI.add(sqrtPX96, quotient)\n    } else {\n      const quotient = FullMath.mulDivRoundingUp(amount, Q96, liquidity)\n\n      invariant(JSBI.greaterThan(sqrtPX96, quotient))\n      return JSBI.subtract(sqrtPX96, quotient)\n    }\n  }\n}\n","import JSBI from 'jsbi'\nimport { FeeAmount } from '../constants'\nimport { NEGATIVE_ONE, ZERO } from '../internalConstants'\nimport { FullMath } from './fullMath'\nimport { SqrtPriceMath } from './sqrtPriceMath'\n\nconst MAX_FEE = JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(6))\n\nexport abstract class SwapMath {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  public static computeSwapStep(\n    sqrtRatioCurrentX96: JSBI,\n    sqrtRatioTargetX96: JSBI,\n    liquidity: JSBI,\n    amountRemaining: JSBI,\n    feePips: FeeAmount\n  ): [JSBI, JSBI, JSBI, JSBI] {\n    const returnValues: Partial<{\n      sqrtRatioNextX96: JSBI\n      amountIn: JSBI\n      amountOut: JSBI\n      feeAmount: JSBI\n    }> = {}\n\n    const zeroForOne = JSBI.greaterThanOrEqual(sqrtRatioCurrentX96, sqrtRatioTargetX96)\n    const exactIn = JSBI.greaterThanOrEqual(amountRemaining, ZERO)\n\n    if (exactIn) {\n      const amountRemainingLessFee = JSBI.divide(\n        JSBI.multiply(amountRemaining, JSBI.subtract(MAX_FEE, JSBI.BigInt(feePips))),\n        MAX_FEE\n      )\n      returnValues.amountIn = zeroForOne\n        ? SqrtPriceMath.getAmount0Delta(sqrtRatioTargetX96, sqrtRatioCurrentX96, liquidity, true)\n        : SqrtPriceMath.getAmount1Delta(sqrtRatioCurrentX96, sqrtRatioTargetX96, liquidity, true)\n      if (JSBI.greaterThanOrEqual(amountRemainingLessFee, returnValues.amountIn!)) {\n        returnValues.sqrtRatioNextX96 = sqrtRatioTargetX96\n      } else {\n        returnValues.sqrtRatioNextX96 = SqrtPriceMath.getNextSqrtPriceFromInput(\n          sqrtRatioCurrentX96,\n          liquidity,\n          amountRemainingLessFee,\n          zeroForOne\n        )\n      }\n    } else {\n      returnValues.amountOut = zeroForOne\n        ? SqrtPriceMath.getAmount1Delta(sqrtRatioTargetX96, sqrtRatioCurrentX96, liquidity, false)\n        : SqrtPriceMath.getAmount0Delta(sqrtRatioCurrentX96, sqrtRatioTargetX96, liquidity, false)\n      if (JSBI.greaterThanOrEqual(JSBI.multiply(amountRemaining, NEGATIVE_ONE), returnValues.amountOut)) {\n        returnValues.sqrtRatioNextX96 = sqrtRatioTargetX96\n      } else {\n        returnValues.sqrtRatioNextX96 = SqrtPriceMath.getNextSqrtPriceFromOutput(\n          sqrtRatioCurrentX96,\n          liquidity,\n          JSBI.multiply(amountRemaining, NEGATIVE_ONE),\n          zeroForOne\n        )\n      }\n    }\n\n    const max = JSBI.equal(sqrtRatioTargetX96, returnValues.sqrtRatioNextX96)\n\n    if (zeroForOne) {\n      returnValues.amountIn =\n        max && exactIn\n          ? returnValues.amountIn\n          : SqrtPriceMath.getAmount0Delta(returnValues.sqrtRatioNextX96, sqrtRatioCurrentX96, liquidity, true)\n      returnValues.amountOut =\n        max && !exactIn\n          ? returnValues.amountOut\n          : SqrtPriceMath.getAmount1Delta(returnValues.sqrtRatioNextX96, sqrtRatioCurrentX96, liquidity, false)\n    } else {\n      returnValues.amountIn =\n        max && exactIn\n          ? returnValues.amountIn\n          : SqrtPriceMath.getAmount1Delta(sqrtRatioCurrentX96, returnValues.sqrtRatioNextX96, liquidity, true)\n      returnValues.amountOut =\n        max && !exactIn\n          ? returnValues.amountOut\n          : SqrtPriceMath.getAmount0Delta(sqrtRatioCurrentX96, returnValues.sqrtRatioNextX96, liquidity, false)\n    }\n\n    if (!exactIn && JSBI.greaterThan(returnValues.amountOut!, JSBI.multiply(amountRemaining, NEGATIVE_ONE))) {\n      returnValues.amountOut = JSBI.multiply(amountRemaining, NEGATIVE_ONE)\n    }\n\n    if (exactIn && JSBI.notEqual(returnValues.sqrtRatioNextX96, sqrtRatioTargetX96)) {\n      // we didn't reach the target, so take the remainder of the maximum input as fee\n      returnValues.feeAmount = JSBI.subtract(amountRemaining, returnValues.amountIn!)\n    } else {\n      returnValues.feeAmount = FullMath.mulDivRoundingUp(\n        returnValues.amountIn!,\n        JSBI.BigInt(feePips),\n        JSBI.subtract(MAX_FEE, JSBI.BigInt(feePips))\n      )\n    }\n\n    return [returnValues.sqrtRatioNextX96!, returnValues.amountIn!, returnValues.amountOut!, returnValues.feeAmount!]\n  }\n}\n","import { MaxUint256 } from '../constants'\nimport JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\nimport { ZERO } from '../internalConstants'\n\nconst TWO = JSBI.BigInt(2)\nconst POWERS_OF_2 = [128, 64, 32, 16, 8, 4, 2, 1].map((pow: number): [number, JSBI] => [\n  pow,\n  JSBI.exponentiate(TWO, JSBI.BigInt(pow))\n])\n\nexport function mostSignificantBit(x: JSBI): number {\n  invariant(JSBI.greaterThan(x, ZERO), 'ZERO')\n  invariant(JSBI.lessThanOrEqual(x, MaxUint256), 'MAX')\n\n  let msb: number = 0\n  for (const [power, min] of POWERS_OF_2) {\n    if (JSBI.greaterThanOrEqual(x, min)) {\n      x = JSBI.signedRightShift(x, JSBI.BigInt(power))\n      msb += power\n    }\n  }\n  return msb\n}\n","import { MaxUint256 } from '../constants'\nimport JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\nimport { ONE, ZERO } from '../internalConstants'\nimport { mostSignificantBit } from './mostSignificantBit'\n\nfunction mulShift(val: JSBI, mulBy: string): JSBI {\n  return JSBI.signedRightShift(JSBI.multiply(val, JSBI.BigInt(mulBy)), JSBI.BigInt(128))\n}\n\nconst Q32 = JSBI.exponentiate(JSBI.BigInt(2), JSBI.BigInt(32))\n\nexport abstract class TickMath {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  /**\n   * The minimum tick that can be used on any pool.\n   */\n  public static MIN_TICK: number = -887272\n  /**\n   * The maximum tick that can be used on any pool.\n   */\n  public static MAX_TICK: number = -TickMath.MIN_TICK\n\n  /**\n   * The sqrt ratio corresponding to the minimum tick that could be used on any pool.\n   */\n  public static MIN_SQRT_RATIO: JSBI = JSBI.BigInt('4295128739')\n  /**\n   * The sqrt ratio corresponding to the maximum tick that could be used on any pool.\n   */\n  public static MAX_SQRT_RATIO: JSBI = JSBI.BigInt('1461446703485210103287273052203988822378723970342')\n\n  /**\n   * Returns the sqrt ratio as a Q64.96 for the given tick. The sqrt ratio is computed as sqrt(1.0001)^tick\n   * @param tick the tick for which to compute the sqrt ratio\n   */\n  public static getSqrtRatioAtTick(tick: number): JSBI {\n    invariant(tick >= TickMath.MIN_TICK && tick <= TickMath.MAX_TICK && Number.isInteger(tick), 'TICK')\n    const absTick: number = tick < 0 ? tick * -1 : tick\n\n    let ratio: JSBI =\n      (absTick & 0x1) != 0\n        ? JSBI.BigInt('0xfffcb933bd6fad37aa2d162d1a594001')\n        : JSBI.BigInt('0x100000000000000000000000000000000')\n    if ((absTick & 0x2) != 0) ratio = mulShift(ratio, '0xfff97272373d413259a46990580e213a')\n    if ((absTick & 0x4) != 0) ratio = mulShift(ratio, '0xfff2e50f5f656932ef12357cf3c7fdcc')\n    if ((absTick & 0x8) != 0) ratio = mulShift(ratio, '0xffe5caca7e10e4e61c3624eaa0941cd0')\n    if ((absTick & 0x10) != 0) ratio = mulShift(ratio, '0xffcb9843d60f6159c9db58835c926644')\n    if ((absTick & 0x20) != 0) ratio = mulShift(ratio, '0xff973b41fa98c081472e6896dfb254c0')\n    if ((absTick & 0x40) != 0) ratio = mulShift(ratio, '0xff2ea16466c96a3843ec78b326b52861')\n    if ((absTick & 0x80) != 0) ratio = mulShift(ratio, '0xfe5dee046a99a2a811c461f1969c3053')\n    if ((absTick & 0x100) != 0) ratio = mulShift(ratio, '0xfcbe86c7900a88aedcffc83b479aa3a4')\n    if ((absTick & 0x200) != 0) ratio = mulShift(ratio, '0xf987a7253ac413176f2b074cf7815e54')\n    if ((absTick & 0x400) != 0) ratio = mulShift(ratio, '0xf3392b0822b70005940c7a398e4b70f3')\n    if ((absTick & 0x800) != 0) ratio = mulShift(ratio, '0xe7159475a2c29b7443b29c7fa6e889d9')\n    if ((absTick & 0x1000) != 0) ratio = mulShift(ratio, '0xd097f3bdfd2022b8845ad8f792aa5825')\n    if ((absTick & 0x2000) != 0) ratio = mulShift(ratio, '0xa9f746462d870fdf8a65dc1f90e061e5')\n    if ((absTick & 0x4000) != 0) ratio = mulShift(ratio, '0x70d869a156d2a1b890bb3df62baf32f7')\n    if ((absTick & 0x8000) != 0) ratio = mulShift(ratio, '0x31be135f97d08fd981231505542fcfa6')\n    if ((absTick & 0x10000) != 0) ratio = mulShift(ratio, '0x9aa508b5b7a84e1c677de54f3e99bc9')\n    if ((absTick & 0x20000) != 0) ratio = mulShift(ratio, '0x5d6af8dedb81196699c329225ee604')\n    if ((absTick & 0x40000) != 0) ratio = mulShift(ratio, '0x2216e584f5fa1ea926041bedfe98')\n    if ((absTick & 0x80000) != 0) ratio = mulShift(ratio, '0x48a170391f7dc42444e8fa2')\n\n    if (tick > 0) ratio = JSBI.divide(MaxUint256, ratio)\n\n    // back to Q96\n    return JSBI.greaterThan(JSBI.remainder(ratio, Q32), ZERO)\n      ? JSBI.add(JSBI.divide(ratio, Q32), ONE)\n      : JSBI.divide(ratio, Q32)\n  }\n\n  /**\n   * Returns the tick corresponding to a given sqrt ratio, s.t. #getSqrtRatioAtTick(tick) <= sqrtRatioX96\n   * and #getSqrtRatioAtTick(tick + 1) > sqrtRatioX96\n   * @param sqrtRatioX96 the sqrt ratio as a Q64.96 for which to compute the tick\n   */\n  public static getTickAtSqrtRatio(sqrtRatioX96: JSBI): number {\n    invariant(\n      JSBI.greaterThanOrEqual(sqrtRatioX96, TickMath.MIN_SQRT_RATIO) &&\n        JSBI.lessThan(sqrtRatioX96, TickMath.MAX_SQRT_RATIO),\n      'SQRT_RATIO'\n    )\n\n    const sqrtRatioX128 = JSBI.leftShift(sqrtRatioX96, JSBI.BigInt(32))\n\n    const msb = mostSignificantBit(sqrtRatioX128)\n\n    let r: JSBI\n    if (JSBI.greaterThanOrEqual(JSBI.BigInt(msb), JSBI.BigInt(128))) {\n      r = JSBI.signedRightShift(sqrtRatioX128, JSBI.BigInt(msb - 127))\n    } else {\n      r = JSBI.leftShift(sqrtRatioX128, JSBI.BigInt(127 - msb))\n    }\n\n    let log_2: JSBI = JSBI.leftShift(JSBI.subtract(JSBI.BigInt(msb), JSBI.BigInt(128)), JSBI.BigInt(64))\n\n    for (let i = 0; i < 14; i++) {\n      r = JSBI.signedRightShift(JSBI.multiply(r, r), JSBI.BigInt(127))\n      const f = JSBI.signedRightShift(r, JSBI.BigInt(128))\n      log_2 = JSBI.bitwiseOr(log_2, JSBI.leftShift(f, JSBI.BigInt(63 - i)))\n      r = JSBI.signedRightShift(r, f)\n    }\n\n    const log_sqrt10001 = JSBI.multiply(log_2, JSBI.BigInt('255738958999603826347141'))\n\n    const tickLow = JSBI.toNumber(\n      JSBI.signedRightShift(\n        JSBI.subtract(log_sqrt10001, JSBI.BigInt('3402992956809132418596140100660247210')),\n        JSBI.BigInt(128)\n      )\n    )\n    const tickHigh = JSBI.toNumber(\n      JSBI.signedRightShift(\n        JSBI.add(log_sqrt10001, JSBI.BigInt('291339464771989622907027621153398088495')),\n        JSBI.BigInt(128)\n      )\n    )\n\n    return tickLow === tickHigh\n      ? tickLow\n      : JSBI.lessThanOrEqual(TickMath.getSqrtRatioAtTick(tickHigh), sqrtRatioX96)\n      ? tickHigh\n      : tickLow\n  }\n}\n","import { BigintIsh } from '../constants'\n\n/**\n * Provides information about ticks\n */\nexport interface TickDataProvider {\n  /**\n   * Return information corresponding to a specific tick\n   * @param tick the tick to load\n   */\n  getTick(tick: number): Promise<{ liquidityNet: BigintIsh }>\n\n  /**\n   * Return the next tick that is initialized within a single word\n   * @param tick The current tick\n   * @param lte Whether the next tick should be lte the current tick\n   * @param tickSpacing The tick spacing of the pool\n   */\n  nextInitializedTickWithinOneWord(tick: number, lte: boolean, tickSpacing: number): Promise<[number, boolean]>\n}\n\n/**\n * This tick data provider does not know how to fetch any tick data. It throws whenever it is required. Useful if you\n * do not need to load tick data for your use case.\n */\nexport class NoTickDataProvider implements TickDataProvider {\n  private static ERROR_MESSAGE = 'No tick data provider was given'\n  async getTick(_tick: number): Promise<{ liquidityNet: BigintIsh }> {\n    throw new Error(NoTickDataProvider.ERROR_MESSAGE)\n  }\n\n  async nextInitializedTickWithinOneWord(\n    _tick: number,\n    _lte: boolean,\n    _tickSpacing: number\n  ): Promise<[number, boolean]> {\n    throw new Error(NoTickDataProvider.ERROR_MESSAGE)\n  }\n}\n","/**\n * Determines if a tick list is sorted\n * @param list The tick list\n * @param comparator The comparator\n * @returns true if sorted\n */\nexport function isSorted<T>(list: Array<T>, comparator: (a: T, b: T) => number): boolean {\n  for (let i = 0; i < list.length - 1; i++) {\n    if (comparator(list[i], list[i + 1]) > 0) {\n      return false\n    }\n  }\n  return true\n}\n","import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\nimport { Tick } from '../entities/tick'\nimport { ZERO } from '../internalConstants'\nimport { isSorted } from './isSorted'\n\nfunction tickComparator(a: Tick, b: Tick) {\n  return a.index - b.index\n}\n\n/**\n * Utility methods for interacting with sorted lists of ticks\n */\nexport abstract class TickList {\n  /**\n   * Cannot be constructed\n   */\n  private constructor() {}\n\n  public static validateList(ticks: Tick[], tickSpacing: number) {\n    invariant(tickSpacing > 0, 'TICK_SPACING_NONZERO')\n    // ensure ticks are spaced appropriately\n    invariant(\n      ticks.every(({ index }) => index % tickSpacing === 0),\n      'TICK_SPACING'\n    )\n\n    // ensure tick liquidity deltas sum to 0\n    invariant(\n      JSBI.equal(\n        ticks.reduce((accumulator, { liquidityNet }) => JSBI.add(accumulator, liquidityNet), ZERO),\n        ZERO\n      ),\n      'ZERO_NET'\n    )\n\n    invariant(isSorted(ticks, tickComparator), 'SORTED')\n  }\n\n  public static isBelowSmallest(ticks: readonly Tick[], tick: number): boolean {\n    invariant(ticks.length > 0, 'LENGTH')\n    return tick < ticks[0].index\n  }\n\n  public static isAtOrAboveLargest(ticks: readonly Tick[], tick: number): boolean {\n    invariant(ticks.length > 0, 'LENGTH')\n    return tick >= ticks[ticks.length - 1].index\n  }\n\n  public static getTick(ticks: readonly Tick[], index: number): Tick {\n    const tick = ticks[this.binarySearch(ticks, index)]\n    invariant(tick.index === index, 'NOT_CONTAINED')\n    return tick\n  }\n\n  /**\n   * Finds the largest tick in the list of ticks that is less than or equal to tick\n   * @param ticks list of ticks\n   * @param tick tick to find the largest tick that is less than or equal to tick\n   * @private\n   */\n  private static binarySearch(ticks: readonly Tick[], tick: number): number {\n    invariant(!this.isBelowSmallest(ticks, tick), 'BELOW_SMALLEST')\n\n    let l = 0\n    let r = ticks.length - 1\n    let i\n    while (true) {\n      i = Math.floor((l + r) / 2)\n\n      if (ticks[i].index <= tick && (i === ticks.length - 1 || ticks[i + 1].index > tick)) {\n        return i\n      }\n\n      if (ticks[i].index < tick) {\n        l = i + 1\n      } else {\n        r = i - 1\n      }\n    }\n  }\n\n  public static nextInitializedTick(ticks: readonly Tick[], tick: number, lte: boolean): Tick {\n    if (lte) {\n      invariant(!TickList.isBelowSmallest(ticks, tick), 'BELOW_SMALLEST')\n      if (TickList.isAtOrAboveLargest(ticks, tick)) {\n        return ticks[ticks.length - 1]\n      }\n      const index = this.binarySearch(ticks, tick)\n      return ticks[index]\n    } else {\n      invariant(!this.isAtOrAboveLargest(ticks, tick), 'AT_OR_ABOVE_LARGEST')\n      if (this.isBelowSmallest(ticks, tick)) {\n        return ticks[0]\n      }\n      const index = this.binarySearch(ticks, tick)\n      return ticks[index + 1]\n    }\n  }\n\n  public static nextInitializedTickWithinOneWord(\n    ticks: readonly Tick[],\n    tick: number,\n    lte: boolean,\n    tickSpacing: number\n  ): [number, boolean] {\n    const compressed = Math.floor(tick / tickSpacing) // matches rounding in the code\n\n    if (lte) {\n      const wordPos = compressed >> 8\n      const minimum = (wordPos << 8) * tickSpacing\n\n      if (TickList.isBelowSmallest(ticks, tick)) {\n        return [minimum, false]\n      }\n\n      const index = TickList.nextInitializedTick(ticks, tick, lte).index\n      const nextInitializedTick = Math.max(minimum, index)\n      return [nextInitializedTick, nextInitializedTick === index]\n    } else {\n      const wordPos = (compressed + 1) >> 8\n      const maximum = (((wordPos + 1) << 8) - 1) * tickSpacing\n\n      if (this.isAtOrAboveLargest(ticks, tick)) {\n        return [maximum, false]\n      }\n\n      const index = this.nextInitializedTick(ticks, tick, lte).index\n      const nextInitializedTick = Math.min(maximum, index)\n      return [nextInitializedTick, nextInitializedTick === index]\n    }\n  }\n}\n","import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\nimport { BigintIsh } from '../constants'\nimport { TickMath } from '../utils/tickMath'\n\nexport interface TickConstructorArgs {\n  index: number\n  liquidityGross: BigintIsh\n  liquidityNet: BigintIsh\n}\n\nexport class Tick {\n  public readonly index: number\n  public readonly liquidityGross: JSBI\n  public readonly liquidityNet: JSBI\n\n  constructor({ index, liquidityGross, liquidityNet }: TickConstructorArgs) {\n    invariant(index >= TickMath.MIN_TICK && index <= TickMath.MAX_TICK, 'TICK')\n    this.index = index\n    this.liquidityGross = JSBI.BigInt(liquidityGross)\n    this.liquidityNet = JSBI.BigInt(liquidityNet)\n  }\n}\n","import { BigintIsh } from '../constants'\nimport { TickList } from '../utils/tickList'\nimport { Tick, TickConstructorArgs } from './tick'\nimport { TickDataProvider } from './tickDataProvider'\n\n/**\n * A data provider for ticks that is backed by an in-memory array of ticks.\n */\nexport class TickListDataProvider implements TickDataProvider {\n  private ticks: readonly Tick[]\n\n  constructor(ticks: (Tick | TickConstructorArgs)[], tickSpacing: number) {\n    const ticksMapped: Tick[] = ticks.map(t => (t instanceof Tick ? t : new Tick(t)))\n    TickList.validateList(ticksMapped, tickSpacing)\n    this.ticks = ticksMapped\n  }\n\n  async getTick(tick: number): Promise<{ liquidityNet: BigintIsh; liquidityGross: BigintIsh }> {\n    return TickList.getTick(this.ticks, tick)\n  }\n\n  async nextInitializedTickWithinOneWord(tick: number, lte: boolean, tickSpacing: number): Promise<[number, boolean]> {\n    return TickList.nextInitializedTickWithinOneWord(this.ticks, tick, lte, tickSpacing)\n  }\n}\n","import {CurrencyAmount} from './fractions/currencyAmount'\nimport {Token} from './token'\nimport { Price } from './fractions/price'\nimport JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\nimport { FACTORY_ADDRESS, FeeAmount, TICK_SPACINGS,BigintIsh } from '../constants'\nimport { NEGATIVE_ONE, ONE, Q192, ZERO } from '../internalConstants'\nimport { computePoolAddress } from '../utils/computePoolAddress'\nimport { LiquidityMath } from '../utils/liquidityMath'\nimport { SwapMath } from '../utils/swapMath'\nimport { TickMath } from '../utils/tickMath'\nimport { Tick, TickConstructorArgs } from './tick'\nimport { NoTickDataProvider, TickDataProvider } from './tickDataProvider'\nimport { TickListDataProvider } from './tickListDataProvider'\n\ninterface StepComputations {\n  sqrtPriceStartX96: JSBI\n  tickNext: number\n  initialized: boolean\n  sqrtPriceNextX96: JSBI\n  amountIn: JSBI\n  amountOut: JSBI\n  feeAmount: JSBI\n}\n\n/**\n * By default, pools will not allow operations that require ticks.\n */\nconst NO_TICK_DATA_PROVIDER_DEFAULT = new NoTickDataProvider()\n\n/**\n * Represents a V3 pool\n */\nexport class Pool {\n  public readonly token0: Token\n  public readonly token1: Token\n  public readonly fee: FeeAmount\n  public readonly sqrtRatioX96: JSBI\n  public readonly liquidity: JSBI\n  public readonly tickCurrent: number\n  public readonly tickDataProvider: TickDataProvider\n\n  private _token0Price?: Price<Token, Token>\n  private _token1Price?: Price<Token, Token>\n\n  public static getAddress(\n    tokenA: Token,\n    tokenB: Token,\n    fee: FeeAmount,\n    initCodeHashManualOverride?: string,\n    factoryAddressOverride?: string\n  ): string {\n    return computePoolAddress({\n      factoryAddress: factoryAddressOverride ?? FACTORY_ADDRESS,\n      fee,\n      tokenA,\n      tokenB,\n      initCodeHashManualOverride\n    })\n  }\n\n  /**\n   * Construct a pool\n   * @param tokenA One of the tokens in the pool\n   * @param tokenB The other token in the pool\n   * @param fee The fee in hundredths of a bips of the input amount of every swap that is collected by the pool\n   * @param sqrtRatioX96 The sqrt of the current ratio of amounts of token1 to token0\n   * @param liquidity The current value of in range liquidity\n   * @param tickCurrent The current tick of the pool\n   * @param ticks The current state of the pool ticks or a data provider that can return tick data\n   */\n  public constructor(\n    tokenA: Token,\n    tokenB: Token,\n    fee: FeeAmount,\n    sqrtRatioX96: BigintIsh,\n    liquidity: BigintIsh,\n    tickCurrent: number,\n    ticks: TickDataProvider | (Tick | TickConstructorArgs)[] = NO_TICK_DATA_PROVIDER_DEFAULT\n  ) {\n    invariant(Number.isInteger(fee) && fee < 1_000_000, 'FEE')\n\n    const tickCurrentSqrtRatioX96 = TickMath.getSqrtRatioAtTick(tickCurrent)\n    const nextTickSqrtRatioX96 = TickMath.getSqrtRatioAtTick(tickCurrent + 1)\n    invariant(\n      JSBI.greaterThanOrEqual(JSBI.BigInt(sqrtRatioX96), tickCurrentSqrtRatioX96) &&\n        JSBI.lessThanOrEqual(JSBI.BigInt(sqrtRatioX96), nextTickSqrtRatioX96),\n      'PRICE_BOUNDS'\n    )\n    // always create a copy of the list since we want the pool's tick list to be immutable\n    ;[this.token0, this.token1] = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA]\n    this.fee = fee\n    this.sqrtRatioX96 = JSBI.BigInt(sqrtRatioX96)\n    this.liquidity = JSBI.BigInt(liquidity)\n    this.tickCurrent = tickCurrent\n    this.tickDataProvider = Array.isArray(ticks) ? new TickListDataProvider(ticks, TICK_SPACINGS[fee]) : ticks\n  }\n\n  /**\n   * Returns true if the token is either token0 or token1\n   * @param token The token to check\n   * @returns True if token is either token0 or token\n   */\n  public involvesToken(token: Token): boolean {\n    return token.equals(this.token0) || token.equals(this.token1)\n  }\n\n  /**\n   * Returns the current mid price of the pool in terms of token0, i.e. the ratio of token1 over token0\n   */\n  public get token0Price(): Price<Token, Token> {\n    return (\n      this._token0Price ??\n      (this._token0Price = new Price(\n        this.token0,\n        this.token1,\n        Q192,\n        JSBI.multiply(this.sqrtRatioX96, this.sqrtRatioX96)\n      ))\n    )\n  }\n\n  /**\n   * Returns the current mid price of the pool in terms of token1, i.e. the ratio of token0 over token1\n   */\n  public get token1Price(): Price<Token, Token> {\n    return (\n      this._token1Price ??\n      (this._token1Price = new Price(\n        this.token1,\n        this.token0,\n        JSBI.multiply(this.sqrtRatioX96, this.sqrtRatioX96),\n        Q192\n      ))\n    )\n  }\n\n  /**\n   * Return the price of the given token in terms of the other token in the pool.\n   * @param token The token to return price of\n   * @returns The price of the given token, in terms of the other.\n   */\n  public priceOf(token: Token): Price<Token, Token> {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.token0Price : this.token1Price\n  }\n\n  /**\n   * Returns the chain ID of the tokens in the pool.\n   */\n  public get chainId(): number {\n    return this.token0.chainId\n  }\n\n  /**\n   * Given an input amount of a token, return the computed output amount, and a pool with state updated after the trade\n   * @param inputAmount The input amount for which to quote the output amount\n   * @param sqrtPriceLimitX96 The Q64.96 sqrt price limit\n   * @returns The output amount and the pool with updated state\n   */\n  public async getOutputAmount(\n    inputAmount: CurrencyAmount<Token>,\n    sqrtPriceLimitX96?: JSBI\n  ): Promise<[CurrencyAmount<Token>, Pool]> {\n    invariant(this.involvesToken(inputAmount.currency), 'TOKEN')\n\n    const zeroForOne = inputAmount.currency.equals(this.token0)\n\n    const { amountCalculated: outputAmount, sqrtRatioX96, liquidity, tickCurrent } = await this.swap(\n      zeroForOne,\n      inputAmount.quotient,\n      sqrtPriceLimitX96\n    )\n    const outputToken = zeroForOne ? this.token1 : this.token0\n    return [\n      CurrencyAmount.fromRawAmount(outputToken, JSBI.multiply(outputAmount, NEGATIVE_ONE)),\n      new Pool(this.token0, this.token1, this.fee, sqrtRatioX96, liquidity, tickCurrent, this.tickDataProvider)\n    ]\n  }\n\n  /**\n   * Given a desired output amount of a token, return the computed input amount and a pool with state updated after the trade\n   * @param outputAmount the output amount for which to quote the input amount\n   * @param sqrtPriceLimitX96 The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this value after the swap. If one for zero, the price cannot be greater than this value after the swap\n   * @returns The input amount and the pool with updated state\n   */\n  public async getInputAmount(\n    outputAmount: CurrencyAmount<Token>,\n    sqrtPriceLimitX96?: JSBI\n  ): Promise<[CurrencyAmount<Token>, Pool]> {\n    invariant(outputAmount.currency.isToken && this.involvesToken(outputAmount.currency), 'TOKEN')\n\n    const zeroForOne = outputAmount.currency.equals(this.token1)\n\n    const { amountCalculated: inputAmount, sqrtRatioX96, liquidity, tickCurrent } = await this.swap(\n      zeroForOne,\n      JSBI.multiply(outputAmount.quotient, NEGATIVE_ONE),\n      sqrtPriceLimitX96\n    )\n    const inputToken = zeroForOne ? this.token0 : this.token1\n    return [\n      CurrencyAmount.fromRawAmount(inputToken, inputAmount),\n      new Pool(this.token0, this.token1, this.fee, sqrtRatioX96, liquidity, tickCurrent, this.tickDataProvider)\n    ]\n  }\n\n  /**\n   * Executes a swap\n   * @param zeroForOne Whether the amount in is token0 or token1\n   * @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\n   * @param sqrtPriceLimitX96 The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this value after the swap. If one for zero, the price cannot be greater than this value after the swap\n   * @returns amountCalculated\n   * @returns sqrtRatioX96\n   * @returns liquidity\n   * @returns tickCurrent\n   */\n  private async swap(\n    zeroForOne: boolean,\n    amountSpecified: JSBI,\n    sqrtPriceLimitX96?: JSBI\n  ): Promise<{ amountCalculated: JSBI; sqrtRatioX96: JSBI; liquidity: JSBI; tickCurrent: number }> {\n    if (!sqrtPriceLimitX96)\n      sqrtPriceLimitX96 = zeroForOne\n        ? JSBI.add(TickMath.MIN_SQRT_RATIO, ONE)\n        : JSBI.subtract(TickMath.MAX_SQRT_RATIO, ONE)\n\n    if (zeroForOne) {\n      invariant(JSBI.greaterThan(sqrtPriceLimitX96, TickMath.MIN_SQRT_RATIO), 'RATIO_MIN')\n      invariant(JSBI.lessThan(sqrtPriceLimitX96, this.sqrtRatioX96), 'RATIO_CURRENT')\n    } else {\n      invariant(JSBI.lessThan(sqrtPriceLimitX96, TickMath.MAX_SQRT_RATIO), 'RATIO_MAX')\n      invariant(JSBI.greaterThan(sqrtPriceLimitX96, this.sqrtRatioX96), 'RATIO_CURRENT')\n    }\n\n    const exactInput = JSBI.greaterThanOrEqual(amountSpecified, ZERO)\n\n    // keep track of swap state\n\n    const state = {\n      amountSpecifiedRemaining: amountSpecified,\n      amountCalculated: ZERO,\n      sqrtPriceX96: this.sqrtRatioX96,\n      tick: this.tickCurrent,\n      liquidity: this.liquidity\n    }\n\n    // start swap while loop\n    while (JSBI.notEqual(state.amountSpecifiedRemaining, ZERO) && state.sqrtPriceX96 != sqrtPriceLimitX96) {\n      let step: Partial<StepComputations> = {}\n      step.sqrtPriceStartX96 = state.sqrtPriceX96\n\n      // because each iteration of the while loop rounds, we can't optimize this code (relative to the smart contract)\n      // by simply traversing to the next available tick, we instead need to exactly replicate\n      // tickBitmap.nextInitializedTickWithinOneWord\n      ;[step.tickNext, step.initialized] = await this.tickDataProvider.nextInitializedTickWithinOneWord(\n        state.tick,\n        zeroForOne,\n        this.tickSpacing\n      )\n\n      if (step.tickNext < TickMath.MIN_TICK) {\n        step.tickNext = TickMath.MIN_TICK\n      } else if (step.tickNext > TickMath.MAX_TICK) {\n        step.tickNext = TickMath.MAX_TICK\n      }\n\n      step.sqrtPriceNextX96 = TickMath.getSqrtRatioAtTick(step.tickNext)\n      ;[state.sqrtPriceX96, step.amountIn, step.amountOut, step.feeAmount] = SwapMath.computeSwapStep(\n        state.sqrtPriceX96,\n        (zeroForOne\n        ? JSBI.lessThan(step.sqrtPriceNextX96, sqrtPriceLimitX96)\n        : JSBI.greaterThan(step.sqrtPriceNextX96, sqrtPriceLimitX96))\n          ? sqrtPriceLimitX96\n          : step.sqrtPriceNextX96,\n        state.liquidity,\n        state.amountSpecifiedRemaining,\n        this.fee\n      )\n\n      if (exactInput) {\n        state.amountSpecifiedRemaining = JSBI.subtract(\n          state.amountSpecifiedRemaining,\n          JSBI.add(step.amountIn, step.feeAmount)\n        )\n        state.amountCalculated = JSBI.subtract(state.amountCalculated, step.amountOut)\n      } else {\n        state.amountSpecifiedRemaining = JSBI.add(state.amountSpecifiedRemaining, step.amountOut)\n        state.amountCalculated = JSBI.add(state.amountCalculated, JSBI.add(step.amountIn, step.feeAmount))\n      }\n\n      // TODO\n      if (JSBI.equal(state.sqrtPriceX96, step.sqrtPriceNextX96)) {\n        // if the tick is initialized, run the tick transition\n        if (step.initialized) {\n          let liquidityNet = JSBI.BigInt((await this.tickDataProvider.getTick(step.tickNext)).liquidityNet)\n          // if we're moving leftward, we interpret liquidityNet as the opposite sign\n          // safe because liquidityNet cannot be type(int128).min\n          if (zeroForOne) liquidityNet = JSBI.multiply(liquidityNet, NEGATIVE_ONE)\n\n          state.liquidity = LiquidityMath.addDelta(state.liquidity, liquidityNet)\n        }\n\n        state.tick = zeroForOne ? step.tickNext - 1 : step.tickNext\n      } else if (JSBI.notEqual(state.sqrtPriceX96, step.sqrtPriceStartX96)) {\n        // updated comparison function\n        // recompute unless we're on a lower tick boundary (i.e. already transitioned ticks), and haven't moved\n        state.tick = TickMath.getTickAtSqrtRatio(state.sqrtPriceX96)\n      }\n    }\n\n    return {\n      amountCalculated: state.amountCalculated,\n      sqrtRatioX96: state.sqrtPriceX96,\n      liquidity: state.liquidity,\n      tickCurrent: state.tick\n    }\n  }\n\n  public get tickSpacing(): number {\n    return TICK_SPACINGS[this.fee]\n  }\n}\n","import invariant from 'tiny-invariant'\nimport {Token} from './token'\nimport {Currency} from './currency'\nimport { Price} from './fractions/price'\nimport { Pool } from './pool'\n\n/**\n * Represents a list of pools through which a swap can occur\n * @template TInput The input token\n * @template TOutput The output token\n */\nexport class Route<TInput extends Currency, TOutput extends Currency> {\n  public readonly pools: Pool[]\n  public readonly tokenPath: Token[]\n  public readonly input: TInput\n  public readonly output: TOutput\n\n  private _midPrice: Price<TInput, TOutput> | null = null\n\n  /**\n   * Creates an instance of route.\n   * @param pools An array of `Pool` objects, ordered by the route the swap will take\n   * @param input The input token\n   * @param output The output token\n   */\n  public constructor(pools: Pool[], input: TInput, output: TOutput) {\n    invariant(pools.length > 0, 'POOLS')\n\n    const chainId = pools[0].chainId\n    const allOnSameChain = pools.every(pool => pool.chainId === chainId)\n    invariant(allOnSameChain, 'CHAIN_IDS')\n\n    const wrappedInput = input.wrapped\n    invariant(pools[0].involvesToken(wrappedInput), 'INPUT')\n\n    invariant(pools[pools.length - 1].involvesToken(output.wrapped), 'OUTPUT')\n\n    /**\n     * Normalizes token0-token1 order and selects the next token/fee step to add to the path\n     * */\n    const tokenPath: Token[] = [wrappedInput]\n    for (const [i, pool] of pools.entries()) {\n      const currentInputToken = tokenPath[i]\n      invariant(currentInputToken.equals(pool.token0) || currentInputToken.equals(pool.token1), 'PATH')\n      const nextToken = currentInputToken.equals(pool.token0) ? pool.token1 : pool.token0\n      tokenPath.push(nextToken)\n    }\n\n    this.pools = pools\n    this.tokenPath = tokenPath\n    this.input = input\n    this.output = output ?? tokenPath[tokenPath.length - 1]\n  }\n\n  public get chainId(): number {\n    return this.pools[0].chainId\n  }\n\n  /**\n   * Returns the mid price of the route\n   */\n  public get midPrice(): Price<TInput, TOutput> {\n    if (this._midPrice !== null) return this._midPrice\n\n    const price = this.pools.slice(1).reduce(\n      ({ nextInput, price }, pool) => {\n        return nextInput.equals(pool.token0)\n          ? {\n              nextInput: pool.token1,\n              price: price.multiply(pool.token0Price)\n            }\n          : {\n              nextInput: pool.token0,\n              price: price.multiply(pool.token1Price)\n            }\n      },\n      this.pools[0].token0.equals(this.input.wrapped)\n        ? {\n            nextInput: this.pools[0].token1,\n            price: this.pools[0].token0Price\n          }\n        : {\n            nextInput: this.pools[0].token0,\n            price: this.pools[0].token1Price\n          }\n    ).price\n\n    return (this._midPrice = new Price(this.input, this.output, price.denominator, price.numerator))\n  }\n}\n","import invariant from 'tiny-invariant'\n\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\n// `maxSize` by removing the last item\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\n\n  // short circuit first item add\n  if (items.length === 0) {\n    items.push(add)\n    return null\n  } else {\n    const isFull = items.length === maxSize\n    // short circuit if full and the additional item does not come before the last item\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\n      return add\n    }\n\n    let lo = 0,\n      hi = items.length\n\n    while (lo < hi) {\n      const mid = (lo + hi) >>> 1\n      if (comparator(items[mid], add) <= 0) {\n        lo = mid + 1\n      } else {\n        hi = mid\n      }\n    }\n    items.splice(lo, 0, add)\n    return isFull ? items.pop()! : null\n  }\n}\n","import JSBI from 'jsbi'\nimport { BigintIsh, Rounding } from '../../constants'\nimport { Fraction } from './fraction'\n\nconst ONE_HUNDRED = new Fraction(JSBI.BigInt(100))\n\n/**\n * Converts a fraction to a percent\n * @param fraction the fraction to convert\n */\nfunction toPercent(fraction: Fraction): Percent {\n  return new Percent(fraction.numerator, fraction.denominator)\n}\n\nexport class Percent extends Fraction {\n  /**\n   * This boolean prevents a fraction from being interpreted as a Percent\n   */\n  public readonly isPercent: true = true\n\n  add(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.add(other))\n  }\n\n  subtract(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.subtract(other))\n  }\n\n  multiply(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.multiply(other))\n  }\n\n  divide(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.divide(other))\n  }\n\n  public toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {\n    return super.multiply(ONE_HUNDRED).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\n    return super.multiply(ONE_HUNDRED).toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import  {sortedInsert } from '../utils/sortedInsert'\nimport {  Percent  } from './fractions/percent'\nimport { TradeType} from '../constants'\nimport { Currency} from './currency'\nimport {Token} from './token'\nimport {CurrencyAmount} from './fractions/currencyAmount'\nimport { Fraction} from './fractions/fraction'\nimport { Price} from './fractions/price'\nimport invariant from 'tiny-invariant'\nimport { ONE, ZERO } from '../internalConstants'\nimport { Pool } from './pool'\nimport { Route } from './route'\n\n/**\n * Trades comparator, an extension of the input output comparator that also considers other dimensions of the trade in ranking them\n * @template TInput The input token, either Ether or an ERC-20\n * @template TOutput The output token, either Ether or an ERC-20\n * @template TTradeType The trade type, either exact input or exact output\n * @param a The first trade to compare\n * @param b The second trade to compare\n * @returns A sorted ordering for two neighboring elements in a trade array\n */\nexport function tradeComparator<TInput extends Currency, TOutput extends Currency, TTradeType extends TradeType>(\n  a: Trade<TInput, TOutput, TTradeType>,\n  b: Trade<TInput, TOutput, TTradeType>\n) {\n  // must have same input and output token for comparison\n  invariant(a.inputAmount.currency.equals(b.inputAmount.currency), 'INPUT_CURRENCY')\n  invariant(a.outputAmount.currency.equals(b.outputAmount.currency), 'OUTPUT_CURRENCY')\n  if (a.outputAmount.equalTo(b.outputAmount)) {\n    if (a.inputAmount.equalTo(b.inputAmount)) {\n      // consider the number of hops since each hop costs gas\n      const aHops = a.swaps.reduce((total, cur) => total + cur.route.tokenPath.length, 0)\n      const bHops = b.swaps.reduce((total, cur) => total + cur.route.tokenPath.length, 0)\n      return aHops - bHops\n    }\n    // trade A requires less input than trade B, so A should come first\n    if (a.inputAmount.lessThan(b.inputAmount)) {\n      return -1\n    } else {\n      return 1\n    }\n  } else {\n    // tradeA has less output than trade B, so should come second\n    if (a.outputAmount.lessThan(b.outputAmount)) {\n      return 1\n    } else {\n      return -1\n    }\n  }\n}\n\nexport interface BestTradeOptions {\n  // how many results to return\n  maxNumResults?: number\n  // the maximum number of hops a trade should contain\n  maxHops?: number\n}\n\n/**\n * Represents a trade executed against a set of routes where some percentage of the input is\n * split across each route.\n *\n * Each route has its own set of pools. Pools can not be re-used across routes.\n *\n * Does not account for slippage, i.e., changes in price environment that can occur between\n * the time the trade is submitted and when it is executed.\n * @template TInput The input token, either Ether or an ERC-20\n * @template TOutput The output token, either Ether or an ERC-20\n * @template TTradeType The trade type, either exact input or exact output\n */\nexport class Trade<TInput extends Currency, TOutput extends Currency, TTradeType extends TradeType> {\n  /**\n   * @deprecated Deprecated in favor of 'swaps' property. If the trade consists of multiple routes\n   * this will return an error.\n   *\n   * When the trade consists of just a single route, this returns the route of the trade,\n   * i.e. which pools the trade goes through.\n   */\n  public get route(): Route<TInput, TOutput> {\n    invariant(this.swaps.length == 1, 'MULTIPLE_ROUTES')\n    return this.swaps[0].route\n  }\n\n  /**\n   * The swaps of the trade, i.e. which routes and how much is swapped in each that\n   * make up the trade.\n   */\n  public readonly swaps: {\n    route: Route<TInput, TOutput>\n    inputAmount: CurrencyAmount<TInput>\n    outputAmount: CurrencyAmount<TOutput>\n  }[]\n\n  /**\n   * The type of the trade, either exact in or exact out.\n   */\n  public readonly tradeType: TTradeType\n\n  /**\n   * The cached result of the input amount computation\n   * @private\n   */\n  private _inputAmount: CurrencyAmount<TInput> | undefined\n\n  /**\n   * The input amount for the trade assuming no slippage.\n   */\n  public get inputAmount(): CurrencyAmount<TInput> {\n    if (this._inputAmount) {\n      return this._inputAmount\n    }\n\n    const inputCurrency = this.swaps[0].inputAmount.currency\n    const totalInputFromRoutes = this.swaps\n      .map(({ inputAmount }) => inputAmount)\n      .reduce((total, cur) => total.add(cur), CurrencyAmount.fromRawAmount(inputCurrency, 0))\n\n    this._inputAmount = totalInputFromRoutes\n    return this._inputAmount\n  }\n\n  /**\n   * The cached result of the output amount computation\n   * @private\n   */\n  private _outputAmount: CurrencyAmount<TOutput> | undefined\n\n  /**\n   * The output amount for the trade assuming no slippage.\n   */\n  public get outputAmount(): CurrencyAmount<TOutput> {\n    if (this._outputAmount) {\n      return this._outputAmount\n    }\n\n    const outputCurrency = this.swaps[0].outputAmount.currency\n    const totalOutputFromRoutes = this.swaps\n      .map(({ outputAmount }) => outputAmount)\n      .reduce((total, cur) => total.add(cur), CurrencyAmount.fromRawAmount(outputCurrency, 0))\n\n    this._outputAmount = totalOutputFromRoutes\n    return this._outputAmount\n  }\n\n  /**\n   * The cached result of the computed execution price\n   * @private\n   */\n  private _executionPrice: Price<TInput, TOutput> | undefined\n\n  /**\n   * The price expressed in terms of output amount/input amount.\n   */\n  public get executionPrice(): Price<TInput, TOutput> {\n    return (\n      this._executionPrice ??\n      (this._executionPrice = new Price(\n        this.inputAmount.currency,\n        this.outputAmount.currency,\n        this.inputAmount.quotient,\n        this.outputAmount.quotient\n      ))\n    )\n  }\n\n  /**\n   * The cached result of the price impact computation\n   * @private\n   */\n  private _priceImpact: Percent | undefined\n\n  /**\n   * Returns the percent difference between the route's mid price and the price impact\n   */\n  public get priceImpact(): Percent {\n    if (this._priceImpact) {\n      return this._priceImpact\n    }\n\n    let spotOutputAmount = CurrencyAmount.fromRawAmount(this.outputAmount.currency, 0)\n    for (const { route, inputAmount } of this.swaps) {\n      const midPrice = route.midPrice\n      spotOutputAmount = spotOutputAmount.add(midPrice.quote(inputAmount))\n    }\n\n    const priceImpact = spotOutputAmount.subtract(this.outputAmount).divide(spotOutputAmount)\n    this._priceImpact = new Percent(priceImpact.numerator, priceImpact.denominator)\n\n    return this._priceImpact\n  }\n\n  /**\n   * Constructs an exact in trade with the given amount in and route\n   * @template TInput The input token, either Ether or an ERC-20\n   * @template TOutput The output token, either Ether or an ERC-20\n   * @param route The route of the exact in trade\n   * @param amountIn The amount being passed in\n   * @returns The exact in trade\n   */\n  public static async exactIn<TInput extends Currency, TOutput extends Currency>(\n    route: Route<TInput, TOutput>,\n    amountIn: CurrencyAmount<TInput>\n  ): Promise<Trade<TInput, TOutput, TradeType.EXACT_INPUT>> {\n    return Trade.fromRoute(route, amountIn, TradeType.EXACT_INPUT)\n  }\n\n  /**\n   * Constructs an exact out trade with the given amount out and route\n   * @template TInput The input token, either Ether or an ERC-20\n   * @template TOutput The output token, either Ether or an ERC-20\n   * @param route The route of the exact out trade\n   * @param amountOut The amount returned by the trade\n   * @returns The exact out trade\n   */\n  public static async exactOut<TInput extends Currency, TOutput extends Currency>(\n    route: Route<TInput, TOutput>,\n    amountOut: CurrencyAmount<TOutput>\n  ): Promise<Trade<TInput, TOutput, TradeType.EXACT_OUTPUT>> {\n    return Trade.fromRoute(route, amountOut, TradeType.EXACT_OUTPUT)\n  }\n\n  /**\n   * Constructs a trade by simulating swaps through the given route\n   * @template TInput The input token, either Ether or an ERC-20.\n   * @template TOutput The output token, either Ether or an ERC-20.\n   * @template TTradeType The type of the trade, either exact in or exact out.\n   * @param route route to swap through\n   * @param amount the amount specified, either input or output, depending on tradeType\n   * @param tradeType whether the trade is an exact input or exact output swap\n   * @returns The route\n   */\n  public static async fromRoute<TInput extends Currency, TOutput extends Currency, TTradeType extends TradeType>(\n    route: Route<TInput, TOutput>,\n    amount: TTradeType extends TradeType.EXACT_INPUT ? CurrencyAmount<TInput> : CurrencyAmount<TOutput>,\n    tradeType: TTradeType\n  ): Promise<Trade<TInput, TOutput, TTradeType>> {\n    const amounts: CurrencyAmount<Token>[] = new Array(route.tokenPath.length)\n    let inputAmount: CurrencyAmount<TInput>\n    let outputAmount: CurrencyAmount<TOutput>\n    if (tradeType === TradeType.EXACT_INPUT) {\n      invariant(amount.currency.equals(route.input), 'INPUT')\n      amounts[0] = amount.wrapped\n      for (let i = 0; i < route.tokenPath.length - 1; i++) {\n        const pool = route.pools[i]\n        const [outputAmount] = await pool.getOutputAmount(amounts[i])\n        amounts[i + 1] = outputAmount\n      }\n      inputAmount = CurrencyAmount.fromFractionalAmount(route.input, amount.numerator, amount.denominator)\n      outputAmount = CurrencyAmount.fromFractionalAmount(\n        route.output,\n        amounts[amounts.length - 1].numerator,\n        amounts[amounts.length - 1].denominator\n      )\n    } else {\n      invariant(amount.currency.equals(route.output), 'OUTPUT')\n      amounts[amounts.length - 1] = amount.wrapped\n      for (let i = route.tokenPath.length - 1; i > 0; i--) {\n        const pool = route.pools[i - 1]\n        const [inputAmount] = await pool.getInputAmount(amounts[i])\n        amounts[i - 1] = inputAmount\n      }\n      inputAmount = CurrencyAmount.fromFractionalAmount(route.input, amounts[0].numerator, amounts[0].denominator)\n      outputAmount = CurrencyAmount.fromFractionalAmount(route.output, amount.numerator, amount.denominator)\n    }\n\n    return new Trade({\n      routes: [{ inputAmount, outputAmount, route }],\n      tradeType\n    })\n  }\n\n  /**\n   * Constructs a trade from routes by simulating swaps\n   *\n   * @template TInput The input token, either Ether or an ERC-20.\n   * @template TOutput The output token, either Ether or an ERC-20.\n   * @template TTradeType The type of the trade, either exact in or exact out.\n   * @param routes the routes to swap through and how much of the amount should be routed through each\n   * @param tradeType whether the trade is an exact input or exact output swap\n   * @returns The trade\n   */\n  public static async fromRoutes<TInput extends Currency, TOutput extends Currency, TTradeType extends TradeType>(\n    routes: {\n      amount: TTradeType extends TradeType.EXACT_INPUT ? CurrencyAmount<TInput> : CurrencyAmount<TOutput>\n      route: Route<TInput, TOutput>\n    }[],\n    tradeType: TTradeType\n  ): Promise<Trade<TInput, TOutput, TTradeType>> {\n    const populatedRoutes: {\n      route: Route<TInput, TOutput>\n      inputAmount: CurrencyAmount<TInput>\n      outputAmount: CurrencyAmount<TOutput>\n    }[] = []\n\n    for (const { route, amount } of routes) {\n      const amounts: CurrencyAmount<Token>[] = new Array(route.tokenPath.length)\n      let inputAmount: CurrencyAmount<TInput>\n      let outputAmount: CurrencyAmount<TOutput>\n\n      if (tradeType === TradeType.EXACT_INPUT) {\n        invariant(amount.currency.equals(route.input), 'INPUT')\n        inputAmount = CurrencyAmount.fromFractionalAmount(route.input, amount.numerator, amount.denominator)\n        amounts[0] = CurrencyAmount.fromFractionalAmount(route.input.wrapped, amount.numerator, amount.denominator)\n\n        for (let i = 0; i < route.tokenPath.length - 1; i++) {\n          const pool = route.pools[i]\n          const [outputAmount] = await pool.getOutputAmount(amounts[i])\n          amounts[i + 1] = outputAmount\n        }\n\n        outputAmount = CurrencyAmount.fromFractionalAmount(\n          route.output,\n          amounts[amounts.length - 1].numerator,\n          amounts[amounts.length - 1].denominator\n        )\n      } else {\n        invariant(amount.currency.equals(route.output), 'OUTPUT')\n        outputAmount = CurrencyAmount.fromFractionalAmount(route.output, amount.numerator, amount.denominator)\n        amounts[amounts.length - 1] = CurrencyAmount.fromFractionalAmount(\n          route.output.wrapped,\n          amount.numerator,\n          amount.denominator\n        )\n\n        for (let i = route.tokenPath.length - 1; i > 0; i--) {\n          const pool = route.pools[i - 1]\n          const [inputAmount] = await pool.getInputAmount(amounts[i])\n          amounts[i - 1] = inputAmount\n        }\n\n        inputAmount = CurrencyAmount.fromFractionalAmount(route.input, amounts[0].numerator, amounts[0].denominator)\n      }\n\n      populatedRoutes.push({ route, inputAmount, outputAmount })\n    }\n\n    return new Trade({\n      routes: populatedRoutes,\n      tradeType\n    })\n  }\n\n  /**\n   * Creates a trade without computing the result of swapping through the route. Useful when you have simulated the trade\n   * elsewhere and do not have any tick data\n   * @template TInput The input token, either Ether or an ERC-20\n   * @template TOutput The output token, either Ether or an ERC-20\n   * @template TTradeType The type of the trade, either exact in or exact out\n   * @param constructorArguments The arguments passed to the trade constructor\n   * @returns The unchecked trade\n   */\n  public static createUncheckedTrade<\n    TInput extends Currency,\n    TOutput extends Currency,\n    TTradeType extends TradeType\n  >(constructorArguments: {\n    route: Route<TInput, TOutput>\n    inputAmount: CurrencyAmount<TInput>\n    outputAmount: CurrencyAmount<TOutput>\n    tradeType: TTradeType\n  }): Trade<TInput, TOutput, TTradeType> {\n    return new Trade({\n      ...constructorArguments,\n      routes: [\n        {\n          inputAmount: constructorArguments.inputAmount,\n          outputAmount: constructorArguments.outputAmount,\n          route: constructorArguments.route\n        }\n      ]\n    })\n  }\n\n  /**\n   * Creates a trade without computing the result of swapping through the routes. Useful when you have simulated the trade\n   * elsewhere and do not have any tick data\n   * @template TInput The input token, either Ether or an ERC-20\n   * @template TOutput The output token, either Ether or an ERC-20\n   * @template TTradeType The type of the trade, either exact in or exact out\n   * @param constructorArguments The arguments passed to the trade constructor\n   * @returns The unchecked trade\n   */\n  public static createUncheckedTradeWithMultipleRoutes<\n    TInput extends Currency,\n    TOutput extends Currency,\n    TTradeType extends TradeType\n  >(constructorArguments: {\n    routes: {\n      route: Route<TInput, TOutput>\n      inputAmount: CurrencyAmount<TInput>\n      outputAmount: CurrencyAmount<TOutput>\n    }[]\n    tradeType: TTradeType\n  }): Trade<TInput, TOutput, TTradeType> {\n    return new Trade(constructorArguments)\n  }\n\n  /**\n   * Construct a trade by passing in the pre-computed property values\n   * @param routes The routes through which the trade occurs\n   * @param tradeType The type of trade, exact input or exact output\n   */\n  private constructor({\n    routes,\n    tradeType\n  }: {\n    routes: {\n      route: Route<TInput, TOutput>\n      inputAmount: CurrencyAmount<TInput>\n      outputAmount: CurrencyAmount<TOutput>\n    }[]\n    tradeType: TTradeType\n  }) {\n    const inputCurrency = routes[0].inputAmount.currency\n    const outputCurrency = routes[0].outputAmount.currency\n    invariant(\n      routes.every(({ route }) => inputCurrency.wrapped.equals(route.input.wrapped)),\n      'INPUT_CURRENCY_MATCH'\n    )\n    invariant(\n      routes.every(({ route }) => outputCurrency.wrapped.equals(route.output.wrapped)),\n      'OUTPUT_CURRENCY_MATCH'\n    )\n\n    const numPools = routes.map(({ route }) => route.pools.length).reduce((total, cur) => total + cur, 0)\n    const poolAddressSet = new Set<string>()\n    for (const { route } of routes) {\n      for (const pool of route.pools) {\n        poolAddressSet.add(Pool.getAddress(pool.token0, pool.token1, pool.fee))\n      }\n    }\n\n    invariant(numPools == poolAddressSet.size, 'POOLS_DUPLICATED')\n\n    this.swaps = routes\n    this.tradeType = tradeType\n  }\n\n  /**\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\n   * @param slippageTolerance The tolerance of unfavorable slippage from the execution price of this trade\n   * @returns The amount out\n   */\n  public minimumAmountOut(slippageTolerance: Percent, amountOut = this.outputAmount): CurrencyAmount<TOutput> {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\n      return amountOut\n    } else {\n      const slippageAdjustedAmountOut = new Fraction(ONE)\n        .add(slippageTolerance)\n        .invert()\n        .multiply(amountOut.quotient).quotient\n      return CurrencyAmount.fromRawAmount(amountOut.currency, slippageAdjustedAmountOut)\n    }\n  }\n\n  /**\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\n   * @param slippageTolerance The tolerance of unfavorable slippage from the execution price of this trade\n   * @returns The amount in\n   */\n  public maximumAmountIn(slippageTolerance: Percent, amountIn = this.inputAmount): CurrencyAmount<TInput> {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_INPUT) {\n      return amountIn\n    } else {\n      const slippageAdjustedAmountIn = new Fraction(ONE).add(slippageTolerance).multiply(amountIn.quotient).quotient\n      return CurrencyAmount.fromRawAmount(amountIn.currency, slippageAdjustedAmountIn)\n    }\n  }\n\n  /**\n   * Return the execution price after accounting for slippage tolerance\n   * @param slippageTolerance the allowed tolerated slippage\n   * @returns The execution price\n   */\n  public worstExecutionPrice(slippageTolerance: Percent): Price<TInput, TOutput> {\n    return new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.maximumAmountIn(slippageTolerance).quotient,\n      this.minimumAmountOut(slippageTolerance).quotient\n    )\n  }\n\n  /**\n   * Given a list of pools, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\n   * amount to an output token, making at most `maxHops` hops.\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pools the pools to consider in finding the best trade\n   * @param nextAmountIn exact amount of input currency to spend\n   * @param currencyOut the desired currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pool\n   * @param currentPools used in recursion; the current list of pools\n   * @param currencyAmountIn used in recursion; the original value of the currencyAmountIn parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   * @returns The exact in trade\n   */\n  public static async bestTradeExactIn<TInput extends Currency, TOutput extends Currency>(\n    pools: Pool[],\n    currencyAmountIn: CurrencyAmount<TInput>,\n    currencyOut: TOutput,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPools: Pool[] = [],\n    nextAmountIn: CurrencyAmount<Currency> = currencyAmountIn,\n    bestTrades: Trade<TInput, TOutput, TradeType.EXACT_INPUT>[] = []\n  ): Promise<Trade<TInput, TOutput, TradeType.EXACT_INPUT>[]> {\n    invariant(pools.length > 0, 'POOLS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(currencyAmountIn === nextAmountIn || currentPools.length > 0, 'INVALID_RECURSION')\n\n    const amountIn = nextAmountIn.wrapped\n    const tokenOut = currencyOut.wrapped\n    for (let i = 0; i < pools.length; i++) {\n      const pool = pools[i]\n      // pool irrelevant\n      if (!pool.token0.equals(amountIn.currency) && !pool.token1.equals(amountIn.currency)) continue\n\n      let amountOut: CurrencyAmount<Token>\n      try {\n        ;[amountOut] = await pool.getOutputAmount(amountIn)\n      } catch (error) {\n        // input too low\n        if (error.isInsufficientInputAmountError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the output token, so this is the final trade of one of the paths\n      if (amountOut.currency.isToken && amountOut.currency.equals(tokenOut)) {\n        sortedInsert(\n          bestTrades,\n          await Trade.fromRoute(\n            new Route([...currentPools, pool], currencyAmountIn.currency, currencyOut),\n            currencyAmountIn,\n            TradeType.EXACT_INPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pools.length > 1) {\n        const poolsExcludingThisPool = pools.slice(0, i).concat(pools.slice(i + 1, pools.length))\n\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\n        await Trade.bestTradeExactIn(\n          poolsExcludingThisPool,\n          currencyAmountIn,\n          currencyOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [...currentPools, pool],\n          amountOut,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n\n  /**\n   * similar to the above method but instead targets a fixed output amount\n   * given a list of pools, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\n   * to an output token amount, making at most `maxHops` hops\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pools the pools to consider in finding the best trade\n   * @param currencyIn the currency to spend\n   * @param currencyAmountOut the desired currency amount out\n   * @param nextAmountOut the exact amount of currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pool\n   * @param currentPools used in recursion; the current list of pools\n   * @param bestTrades used in recursion; the current list of best trades\n   * @returns The exact out trade\n   */\n  public static async bestTradeExactOut<TInput extends Currency, TOutput extends Currency>(\n    pools: Pool[],\n    currencyIn: TInput,\n    currencyAmountOut: CurrencyAmount<TOutput>,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPools: Pool[] = [],\n    nextAmountOut: CurrencyAmount<Currency> = currencyAmountOut,\n    bestTrades: Trade<TInput, TOutput, TradeType.EXACT_OUTPUT>[] = []\n  ): Promise<Trade<TInput, TOutput, TradeType.EXACT_OUTPUT>[]> {\n    invariant(pools.length > 0, 'POOLS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(currencyAmountOut === nextAmountOut || currentPools.length > 0, 'INVALID_RECURSION')\n\n    const amountOut = nextAmountOut.wrapped\n    const tokenIn = currencyIn.wrapped\n    for (let i = 0; i < pools.length; i++) {\n      const pool = pools[i]\n      // pool irrelevant\n      if (!pool.token0.equals(amountOut.currency) && !pool.token1.equals(amountOut.currency)) continue\n\n      let amountIn: CurrencyAmount<Token>\n      try {\n        ;[amountIn] = await pool.getInputAmount(amountOut)\n      } catch (error) {\n        // not enough liquidity in this pool\n        if (error.isInsufficientReservesError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the input token, so this is the first trade of one of the paths\n      if (amountIn.currency.equals(tokenIn)) {\n        sortedInsert(\n          bestTrades,\n          await Trade.fromRoute(\n            new Route([pool, ...currentPools], currencyIn, currencyAmountOut.currency),\n            currencyAmountOut,\n            TradeType.EXACT_OUTPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pools.length > 1) {\n        const poolsExcludingThisPool = pools.slice(0, i).concat(pools.slice(i + 1, pools.length))\n\n        // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\n        await Trade.bestTradeExactOut(\n          poolsExcludingThisPool,\n          currencyIn,\n          currencyAmountOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [pool, ...currentPools],\n          amountIn,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n}\n","import { BaseCurrency } from './baseCurrency'\n\n/**\n * Represents the native currency of the chain on which it resides, e.g.\n */\nexport abstract class NativeCurrency extends BaseCurrency {\n  public readonly isNative: true = true\n  public readonly isToken: false = false\n}\n","import { BigintIsh } from '../constants'\nimport JSBI from 'jsbi'\nimport { Q96 } from '../internalConstants'\n\n/**\n * Returns an imprecise maximum amount of liquidity received for a given amount of token 0.\n * This function is available to accommodate LiquidityAmounts#getLiquidityForAmount0 in the v3 periphery,\n * which could be more precise by at least 32 bits by dividing by Q64 instead of Q96 in the intermediate step,\n * and shifting the subtracted ratio left by 32 bits. This imprecise calculation will likely be replaced in a future\n * v3 router contract.\n * @param sqrtRatioAX96 The price at the lower boundary\n * @param sqrtRatioBX96 The price at the upper boundary\n * @param amount0 The token0 amount\n * @returns liquidity for amount0, imprecise\n */\nfunction maxLiquidityForAmount0Imprecise(sqrtRatioAX96: JSBI, sqrtRatioBX96: JSBI, amount0: BigintIsh): JSBI {\n  if (JSBI.greaterThan(sqrtRatioAX96, sqrtRatioBX96)) {\n    ;[sqrtRatioAX96, sqrtRatioBX96] = [sqrtRatioBX96, sqrtRatioAX96]\n  }\n  const intermediate = JSBI.divide(JSBI.multiply(sqrtRatioAX96, sqrtRatioBX96), Q96)\n  return JSBI.divide(JSBI.multiply(JSBI.BigInt(amount0), intermediate), JSBI.subtract(sqrtRatioBX96, sqrtRatioAX96))\n}\n\n/**\n * Returns a precise maximum amount of liquidity received for a given amount of token 0 by dividing by Q64 instead of Q96 in the intermediate step,\n * and shifting the subtracted ratio left by 32 bits.\n * @param sqrtRatioAX96 The price at the lower boundary\n * @param sqrtRatioBX96 The price at the upper boundary\n * @param amount0 The token0 amount\n * @returns liquidity for amount0, precise\n */\nfunction maxLiquidityForAmount0Precise(sqrtRatioAX96: JSBI, sqrtRatioBX96: JSBI, amount0: BigintIsh): JSBI {\n  if (JSBI.greaterThan(sqrtRatioAX96, sqrtRatioBX96)) {\n    ;[sqrtRatioAX96, sqrtRatioBX96] = [sqrtRatioBX96, sqrtRatioAX96]\n  }\n\n  const numerator = JSBI.multiply(JSBI.multiply(JSBI.BigInt(amount0), sqrtRatioAX96), sqrtRatioBX96)\n  const denominator = JSBI.multiply(Q96, JSBI.subtract(sqrtRatioBX96, sqrtRatioAX96))\n\n  return JSBI.divide(numerator, denominator)\n}\n\n/**\n * Computes the maximum amount of liquidity received for a given amount of token1\n * @param sqrtRatioAX96 The price at the lower tick boundary\n * @param sqrtRatioBX96 The price at the upper tick boundary\n * @param amount1 The token1 amount\n * @returns liquidity for amount1\n */\nfunction maxLiquidityForAmount1(sqrtRatioAX96: JSBI, sqrtRatioBX96: JSBI, amount1: BigintIsh): JSBI {\n  if (JSBI.greaterThan(sqrtRatioAX96, sqrtRatioBX96)) {\n    ;[sqrtRatioAX96, sqrtRatioBX96] = [sqrtRatioBX96, sqrtRatioAX96]\n  }\n  return JSBI.divide(JSBI.multiply(JSBI.BigInt(amount1), Q96), JSBI.subtract(sqrtRatioBX96, sqrtRatioAX96))\n}\n\n/**\n * Computes the maximum amount of liquidity received for a given amount of token0, token1,\n * and the prices at the tick boundaries.\n * @param sqrtRatioCurrentX96 the current price\n * @param sqrtRatioAX96 price at lower boundary\n * @param sqrtRatioBX96 price at upper boundary\n * @param amount0 token0 amount\n * @param amount1 token1 amount\n * @param useFullPrecision if false, liquidity will be maximized according to what the router can calculate,\n * not what core can theoretically support\n */\nexport function maxLiquidityForAmounts(\n  sqrtRatioCurrentX96: JSBI,\n  sqrtRatioAX96: JSBI,\n  sqrtRatioBX96: JSBI,\n  amount0: BigintIsh,\n  amount1: BigintIsh,\n  useFullPrecision: boolean\n): JSBI {\n  if (JSBI.greaterThan(sqrtRatioAX96, sqrtRatioBX96)) {\n    ;[sqrtRatioAX96, sqrtRatioBX96] = [sqrtRatioBX96, sqrtRatioAX96]\n  }\n\n  const maxLiquidityForAmount0 = useFullPrecision ? maxLiquidityForAmount0Precise : maxLiquidityForAmount0Imprecise\n\n  if (JSBI.lessThanOrEqual(sqrtRatioCurrentX96, sqrtRatioAX96)) {\n    return maxLiquidityForAmount0(sqrtRatioAX96, sqrtRatioBX96, amount0)\n  } else if (JSBI.lessThan(sqrtRatioCurrentX96, sqrtRatioBX96)) {\n    const liquidity0 = maxLiquidityForAmount0(sqrtRatioCurrentX96, sqrtRatioBX96, amount0)\n    const liquidity1 = maxLiquidityForAmount1(sqrtRatioAX96, sqrtRatioCurrentX96, amount1)\n    return JSBI.lessThan(liquidity0, liquidity1) ? liquidity0 : liquidity1\n  } else {\n    return maxLiquidityForAmount1(sqrtRatioAX96, sqrtRatioBX96, amount1)\n  }\n}\n","import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\n\nexport const MAX_SAFE_INTEGER = JSBI.BigInt(Number.MAX_SAFE_INTEGER)\n\nconst ZERO = JSBI.BigInt(0)\nconst ONE = JSBI.BigInt(1)\nconst TWO = JSBI.BigInt(2)\n\n/**\n * Computes floor(sqrt(value))\n * @param value the value for which to compute the square root, rounded down\n */\nexport function sqrt(value: JSBI): JSBI {\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), 'NEGATIVE')\n\n  // rely on built in sqrt if possible\n  if (JSBI.lessThan(value, MAX_SAFE_INTEGER)) {\n    return JSBI.BigInt(Math.floor(Math.sqrt(JSBI.toNumber(value))))\n  }\n\n  let z: JSBI\n  let x: JSBI\n  z = value\n  x = JSBI.add(JSBI.divide(value, TWO), ONE)\n  while (JSBI.lessThan(x, z)) {\n    z = x\n    x = JSBI.divide(JSBI.add(JSBI.divide(value, x), x), TWO)\n  }\n  return z\n}\n","import JSBI from 'jsbi'\nimport { BigintIsh } from '../constants'\nimport { sqrt } from './sqrt'\n\n\n/**\n * Returns the sqrt ratio as a Q64.96 corresponding to a given ratio of amount1 and amount0\n * @param amount1 The numerator amount i.e., the amount of token1\n * @param amount0 The denominator amount i.e., the amount of token0\n * @returns The sqrt ratio\n */\n\nexport function encodeSqrtRatioX96(amount1: BigintIsh, amount0: BigintIsh): JSBI {\n  const numerator = JSBI.leftShift(JSBI.BigInt(amount1), JSBI.BigInt(192))\n  const denominator = JSBI.BigInt(amount0)\n  const ratioX192 = JSBI.divide(numerator, denominator)\n  return sqrt(ratioX192)\n}\n","import { Price } from '../entities/fractions/price'\nimport { Token } from '../entities/token'\nimport JSBI from 'jsbi'\nimport { Q192 } from '../internalConstants'\nimport { encodeSqrtRatioX96 } from './encodeSqrtRatioX96'\nimport { TickMath } from './tickMath'\n\n/**\n * Returns a price object corresponding to the input tick and the base/quote token\n * Inputs must be tokens because the address order is used to interpret the price represented by the tick\n * @param baseToken the base token of the price\n * @param quoteToken the quote token of the price\n * @param tick the tick for which to return the price\n */\nexport function tickToPrice(baseToken: Token, quoteToken: Token, tick: number): Price<Token, Token> {\n  const sqrtRatioX96 = TickMath.getSqrtRatioAtTick(tick)\n\n  const ratioX192 = JSBI.multiply(sqrtRatioX96, sqrtRatioX96)\n\n  return baseToken.sortsBefore(quoteToken)\n    ? new Price(baseToken, quoteToken, Q192, ratioX192)\n    : new Price(baseToken, quoteToken, ratioX192, Q192)\n}\n\n/**\n * Returns the first tick for which the given price is greater than or equal to the tick price\n * @param price for which to return the closest tick that represents a price less than or equal to the input price,\n * i.e. the price of the returned tick is less than or equal to the input price\n */\nexport function priceToClosestTick(price: Price<Token, Token>): number {\n  const sorted = price.baseCurrency.sortsBefore(price.quoteCurrency)\n\n  const sqrtRatioX96 = sorted\n    ? encodeSqrtRatioX96(price.numerator, price.denominator)\n    : encodeSqrtRatioX96(price.denominator, price.numerator)\n\n  let tick = TickMath.getTickAtSqrtRatio(sqrtRatioX96)\n  const nextTickPrice = tickToPrice(price.baseCurrency, price.quoteCurrency, tick + 1)\n  if (sorted) {\n    if (!price.lessThan(nextTickPrice)) {\n      tick++\n    }\n  } else {\n    if (!price.greaterThan(nextTickPrice)) {\n      tick++\n    }\n  }\n  return tick\n}\n","import {   Price } from './fractions/price'\n\nimport {\n  BigintIsh,MaxUint256} from '../constants'\nimport {Percent} from './fractions/percent'\nimport {\n  Token} from './token'\nimport {\n  CurrencyAmount} from './fractions/currencyAmount'\n\n\n\nimport JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\nimport { ZERO } from '../internalConstants'\nimport { maxLiquidityForAmounts } from '../utils/maxLiquidityForAmounts'\nimport { tickToPrice } from '../utils/priceTickConversions'\nimport { SqrtPriceMath } from '../utils/sqrtPriceMath'\nimport { TickMath } from '../utils/tickMath'\nimport { encodeSqrtRatioX96 } from '../utils/encodeSqrtRatioX96'\nimport { Pool } from './pool'\n\ninterface PositionConstructorArgs {\n  pool: Pool\n  tickLower: number\n  tickUpper: number\n  liquidity: BigintIsh\n}\n\n/**\n * Represents a position on a Uniswap V3 Pool\n */\nexport class Position {\n  public readonly pool: Pool\n  public readonly tickLower: number\n  public readonly tickUpper: number\n  public readonly liquidity: JSBI\n\n  // cached resuts for the getters\n  private _token0Amount: CurrencyAmount<Token> | null = null\n  private _token1Amount: CurrencyAmount<Token> | null = null\n  private _mintAmounts: Readonly<{ amount0: JSBI; amount1: JSBI }> | null = null\n\n  /**\n   * Constructs a position for a given pool with the given liquidity\n   * @param pool For which pool the liquidity is assigned\n   * @param liquidity The amount of liquidity that is in the position\n   * @param tickLower The lower tick of the position\n   * @param tickUpper The upper tick of the position\n   */\n  public constructor({ pool, liquidity, tickLower, tickUpper }: PositionConstructorArgs) {\n    invariant(tickLower < tickUpper, 'TICK_ORDER')\n    invariant(tickLower >= TickMath.MIN_TICK && tickLower % pool.tickSpacing === 0, 'TICK_LOWER')\n    invariant(tickUpper <= TickMath.MAX_TICK && tickUpper % pool.tickSpacing === 0, 'TICK_UPPER')\n\n    this.pool = pool\n    this.tickLower = tickLower\n    this.tickUpper = tickUpper\n    this.liquidity = JSBI.BigInt(liquidity)\n  }\n\n  /**\n   * Returns the price of token0 at the lower tick\n   */\n  public get token0PriceLower(): Price<Token, Token> {\n    return tickToPrice(this.pool.token0, this.pool.token1, this.tickLower)\n  }\n\n  /**\n   * Returns the price of token0 at the upper tick\n   */\n  public get token0PriceUpper(): Price<Token, Token> {\n    return tickToPrice(this.pool.token0, this.pool.token1, this.tickUpper)\n  }\n\n  /**\n   * Returns the amount of token0 that this position's liquidity could be burned for at the current pool price\n   */\n  public get amount0(): CurrencyAmount<Token> {\n    if (this._token0Amount === null) {\n      if (this.pool.tickCurrent < this.tickLower) {\n        this._token0Amount = CurrencyAmount.fromRawAmount(\n          this.pool.token0,\n          SqrtPriceMath.getAmount0Delta(\n            TickMath.getSqrtRatioAtTick(this.tickLower),\n            TickMath.getSqrtRatioAtTick(this.tickUpper),\n            this.liquidity,\n            false\n          )\n        )\n      } else if (this.pool.tickCurrent < this.tickUpper) {\n        this._token0Amount = CurrencyAmount.fromRawAmount(\n          this.pool.token0,\n          SqrtPriceMath.getAmount0Delta(\n            this.pool.sqrtRatioX96,\n            TickMath.getSqrtRatioAtTick(this.tickUpper),\n            this.liquidity,\n            false\n          )\n        )\n      } else {\n        this._token0Amount = CurrencyAmount.fromRawAmount(this.pool.token0, ZERO)\n      }\n    }\n    return this._token0Amount\n  }\n\n  /**\n   * Returns the amount of token1 that this position's liquidity could be burned for at the current pool price\n   */\n  public get amount1(): CurrencyAmount<Token> {\n    if (this._token1Amount === null) {\n      if (this.pool.tickCurrent < this.tickLower) {\n        this._token1Amount = CurrencyAmount.fromRawAmount(this.pool.token1, ZERO)\n      } else if (this.pool.tickCurrent < this.tickUpper) {\n        this._token1Amount = CurrencyAmount.fromRawAmount(\n          this.pool.token1,\n          SqrtPriceMath.getAmount1Delta(\n            TickMath.getSqrtRatioAtTick(this.tickLower),\n            this.pool.sqrtRatioX96,\n            this.liquidity,\n            false\n          )\n        )\n      } else {\n        this._token1Amount = CurrencyAmount.fromRawAmount(\n          this.pool.token1,\n          SqrtPriceMath.getAmount1Delta(\n            TickMath.getSqrtRatioAtTick(this.tickLower),\n            TickMath.getSqrtRatioAtTick(this.tickUpper),\n            this.liquidity,\n            false\n          )\n        )\n      }\n    }\n    return this._token1Amount\n  }\n\n  /**\n   * Returns the lower and upper sqrt ratios if the price 'slips' up to slippage tolerance percentage\n   * @param slippageTolerance The amount by which the price can 'slip' before the transaction will revert\n   * @returns The sqrt ratios after slippage\n   */\n  private ratiosAfterSlippage(slippageTolerance: Percent): { sqrtRatioX96Lower: JSBI; sqrtRatioX96Upper: JSBI } {\n    const priceLower = this.pool.token0Price.asFraction.multiply(new Percent(1).subtract(slippageTolerance))\n    const priceUpper = this.pool.token0Price.asFraction.multiply(slippageTolerance.add(1))\n    let sqrtRatioX96Lower = encodeSqrtRatioX96(priceLower.numerator, priceLower.denominator)\n    if (JSBI.lessThanOrEqual(sqrtRatioX96Lower, TickMath.MIN_SQRT_RATIO)) {\n      sqrtRatioX96Lower = JSBI.add(TickMath.MIN_SQRT_RATIO, JSBI.BigInt(1))\n    }\n    let sqrtRatioX96Upper = encodeSqrtRatioX96(priceUpper.numerator, priceUpper.denominator)\n    if (JSBI.greaterThanOrEqual(sqrtRatioX96Upper, TickMath.MAX_SQRT_RATIO)) {\n      sqrtRatioX96Upper = JSBI.subtract(TickMath.MAX_SQRT_RATIO, JSBI.BigInt(1))\n    }\n    return {\n      sqrtRatioX96Lower,\n      sqrtRatioX96Upper\n    }\n  }\n\n  /**\n   * Returns the minimum amounts that must be sent in order to safely mint the amount of liquidity held by the position\n   * with the given slippage tolerance\n   * @param slippageTolerance Tolerance of unfavorable slippage from the current price\n   * @returns The amounts, with slippage\n   */\n  public mintAmountsWithSlippage(slippageTolerance: Percent): Readonly<{ amount0: JSBI; amount1: JSBI }> {\n    // get lower/upper prices\n    const { sqrtRatioX96Upper, sqrtRatioX96Lower } = this.ratiosAfterSlippage(slippageTolerance)\n\n    // construct counterfactual pools\n    const poolLower = new Pool(\n      this.pool.token0,\n      this.pool.token1,\n      this.pool.fee,\n      sqrtRatioX96Lower,\n      0 /* liquidity doesn't matter */,\n      TickMath.getTickAtSqrtRatio(sqrtRatioX96Lower)\n    )\n    const poolUpper = new Pool(\n      this.pool.token0,\n      this.pool.token1,\n      this.pool.fee,\n      sqrtRatioX96Upper,\n      0 /* liquidity doesn't matter */,\n      TickMath.getTickAtSqrtRatio(sqrtRatioX96Upper)\n    )\n\n    // because the router is imprecise, we need to calculate the position that will be created (assuming no slippage)\n    const positionThatWillBeCreated = Position.fromAmounts({\n      pool: this.pool,\n      tickLower: this.tickLower,\n      tickUpper: this.tickUpper,\n      ...this.mintAmounts, // the mint amounts are what will be passed as calldata\n      useFullPrecision: false\n    })\n\n    // we want the smaller amounts...\n    // ...which occurs at the upper price for amount0...\n    const { amount0 } = new Position({\n      pool: poolUpper,\n      liquidity: positionThatWillBeCreated.liquidity,\n      tickLower: this.tickLower,\n      tickUpper: this.tickUpper\n    }).mintAmounts\n    // ...and the lower for amount1\n    const { amount1 } = new Position({\n      pool: poolLower,\n      liquidity: positionThatWillBeCreated.liquidity,\n      tickLower: this.tickLower,\n      tickUpper: this.tickUpper\n    }).mintAmounts\n\n    return { amount0, amount1 }\n  }\n\n  /**\n   * Returns the minimum amounts that should be requested in order to safely burn the amount of liquidity held by the\n   * position with the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the current price\n   * @returns The amounts, with slippage\n   */\n  public burnAmountsWithSlippage(slippageTolerance: Percent): Readonly<{ amount0: JSBI; amount1: JSBI }> {\n    // get lower/upper prices\n    const { sqrtRatioX96Upper, sqrtRatioX96Lower } = this.ratiosAfterSlippage(slippageTolerance)\n\n    // construct counterfactual pools\n    const poolLower = new Pool(\n      this.pool.token0,\n      this.pool.token1,\n      this.pool.fee,\n      sqrtRatioX96Lower,\n      0 /* liquidity doesn't matter */,\n      TickMath.getTickAtSqrtRatio(sqrtRatioX96Lower)\n    )\n    const poolUpper = new Pool(\n      this.pool.token0,\n      this.pool.token1,\n      this.pool.fee,\n      sqrtRatioX96Upper,\n      0 /* liquidity doesn't matter */,\n      TickMath.getTickAtSqrtRatio(sqrtRatioX96Upper)\n    )\n\n    // we want the smaller amounts...\n    // ...which occurs at the upper price for amount0...\n    const amount0 = new Position({\n      pool: poolUpper,\n      liquidity: this.liquidity,\n      tickLower: this.tickLower,\n      tickUpper: this.tickUpper\n    }).amount0\n    // ...and the lower for amount1\n    const amount1 = new Position({\n      pool: poolLower,\n      liquidity: this.liquidity,\n      tickLower: this.tickLower,\n      tickUpper: this.tickUpper\n    }).amount1\n\n    return { amount0: amount0.quotient, amount1: amount1.quotient }\n  }\n\n  /**\n   * Returns the minimum amounts that must be sent in order to mint the amount of liquidity held by the position at\n   * the current price for the pool\n   */\n  public get mintAmounts(): Readonly<{ amount0: JSBI; amount1: JSBI }> {\n    if (this._mintAmounts === null) {\n      if (this.pool.tickCurrent < this.tickLower) {\n        return {\n          amount0: SqrtPriceMath.getAmount0Delta(\n            TickMath.getSqrtRatioAtTick(this.tickLower),\n            TickMath.getSqrtRatioAtTick(this.tickUpper),\n            this.liquidity,\n            true\n          ),\n          amount1: ZERO\n        }\n      } else if (this.pool.tickCurrent < this.tickUpper) {\n        return {\n          amount0: SqrtPriceMath.getAmount0Delta(\n            this.pool.sqrtRatioX96,\n            TickMath.getSqrtRatioAtTick(this.tickUpper),\n            this.liquidity,\n            true\n          ),\n          amount1: SqrtPriceMath.getAmount1Delta(\n            TickMath.getSqrtRatioAtTick(this.tickLower),\n            this.pool.sqrtRatioX96,\n            this.liquidity,\n            true\n          )\n        }\n      } else {\n        return {\n          amount0: ZERO,\n          amount1: SqrtPriceMath.getAmount1Delta(\n            TickMath.getSqrtRatioAtTick(this.tickLower),\n            TickMath.getSqrtRatioAtTick(this.tickUpper),\n            this.liquidity,\n            true\n          )\n        }\n      }\n    }\n    return this._mintAmounts\n  }\n\n  /**\n   * Computes the maximum amount of liquidity received for a given amount of token0, token1,\n   * and the prices at the tick boundaries.\n   * @param pool The pool for which the position should be created\n   * @param tickLower The lower tick of the position\n   * @param tickUpper The upper tick of the position\n   * @param amount0 token0 amount\n   * @param amount1 token1 amount\n   * @param useFullPrecision If false, liquidity will be maximized according to what the router can calculate,\n   * not what core can theoretically support\n   * @returns The amount of liquidity for the position\n   */\n  public static fromAmounts({\n    pool,\n    tickLower,\n    tickUpper,\n    amount0,\n    amount1,\n    useFullPrecision\n  }: {\n    pool: Pool\n    tickLower: number\n    tickUpper: number\n    amount0: BigintIsh\n    amount1: BigintIsh\n    useFullPrecision: boolean\n  }) {\n    const sqrtRatioAX96 = TickMath.getSqrtRatioAtTick(tickLower)\n    const sqrtRatioBX96 = TickMath.getSqrtRatioAtTick(tickUpper)\n    return new Position({\n      pool,\n      tickLower,\n      tickUpper,\n      liquidity: maxLiquidityForAmounts(\n        pool.sqrtRatioX96,\n        sqrtRatioAX96,\n        sqrtRatioBX96,\n        amount0,\n        amount1,\n        useFullPrecision\n      )\n    })\n  }\n\n  /**\n   * Computes a position with the maximum amount of liquidity received for a given amount of token0, assuming an unlimited amount of token1\n   * @param pool The pool for which the position is created\n   * @param tickLower The lower tick\n   * @param tickUpper The upper tick\n   * @param amount0 The desired amount of token0\n   * @param useFullPrecision If true, liquidity will be maximized according to what the router can calculate,\n   * not what core can theoretically support\n   * @returns The position\n   */\n  public static fromAmount0({\n    pool,\n    tickLower,\n    tickUpper,\n    amount0,\n    useFullPrecision\n  }: {\n    pool: Pool\n    tickLower: number\n    tickUpper: number\n    amount0: BigintIsh\n    useFullPrecision: boolean\n  }) {\n    return Position.fromAmounts({ pool, tickLower, tickUpper, amount0, amount1: MaxUint256, useFullPrecision })\n  }\n\n  /**\n   * Computes a position with the maximum amount of liquidity received for a given amount of token1, assuming an unlimited amount of token0\n   * @param pool The pool for which the position is created\n   * @param tickLower The lower tick\n   * @param tickUpper The upper tick\n   * @param amount1 The desired amount of token1\n   * @returns The position\n   */\n  public static fromAmount1({\n    pool,\n    tickLower,\n    tickUpper,\n    amount1\n  }: {\n    pool: Pool\n    tickLower: number\n    tickUpper: number\n    amount1: BigintIsh\n  }) {\n    // this function always uses full precision,\n    return Position.fromAmounts({ pool, tickLower, tickUpper, amount0: MaxUint256, amount1, useFullPrecision: true })\n  }\n}\n","export enum ChainId {\n  MAINNET = 1,\n  GOERLI = 5,\n  SEPOLIA = 11155111,\n  OPTIMISM = 10,\n  OPTIMISM_GOERLI = 420,\n  ARBITRUM_ONE = 42161,\n  ARBITRUM_GOERLI = 421613,\n  POLYGON = 137,\n  POLYGON_MUMBAI = 80001,\n  CELO = 42220,\n  CELO_ALFAJORES = 44787,\n  GNOSIS = 100,\n  MOONBEAM = 1284,\n  BNB = 56,\n  AVALANCHE = 43114,\n  BASE_GOERLI = 84531,\n  BASE = 8453,\n  NOSTEST = 42070,\n  NOS = 42213,\n}\n\nexport const SUPPORTED_CHAINS = [\n  ChainId.MAINNET,\n  ChainId.OPTIMISM,\n  ChainId.OPTIMISM_GOERLI,\n  ChainId.ARBITRUM_ONE,\n  ChainId.ARBITRUM_GOERLI,\n  ChainId.POLYGON,\n  ChainId.POLYGON_MUMBAI,\n  ChainId.GOERLI,\n  ChainId.SEPOLIA,\n  ChainId.CELO_ALFAJORES,\n  ChainId.CELO,\n  ChainId.BNB,\n  ChainId.AVALANCHE,\n  ChainId.BASE_GOERLI,\n  ChainId.NOSTEST,\n  ChainId.NOS,\n] as const\nexport type SupportedChainsType = typeof SUPPORTED_CHAINS[number]\n\nexport enum NativeCurrencyName {\n  // Strings match input for CLI\n  ETHER = 'ETH',\n  MATIC = 'MATIC',\n  CELO = 'CELO',\n  GNOSIS = 'XDAI',\n  MOONBEAM = 'GLMR',\n  BNB = 'BNB',\n  AVAX = 'AVAX',\n  TC = 'TC',\n}\n","import invariant from 'tiny-invariant'\nimport { TickMath } from './tickMath'\n\n/**\n * Returns the closest tick that is nearest a given tick and usable for the given tick spacing\n * @param tick the target tick\n * @param tickSpacing the spacing of the pool\n */\nexport function nearestUsableTick(tick: number, tickSpacing: number) {\n  invariant(Number.isInteger(tick) && Number.isInteger(tickSpacing), 'INTEGERS')\n  invariant(tickSpacing > 0, 'TICK_SPACING')\n  invariant(tick >= TickMath.MIN_TICK && tick <= TickMath.MAX_TICK, 'TICK_BOUND')\n  const rounded = Math.round(tick / tickSpacing) * tickSpacing\n  if (rounded < TickMath.MIN_TICK) return rounded + tickSpacing\n  else if (rounded > TickMath.MAX_TICK) return rounded - tickSpacing\n  else return rounded\n}\n","import { Interface } from '@ethersproject/abi'\nimport IMulticall from './IMulticall.json'\n\nexport abstract class Multicall {\n  public static INTERFACE: Interface = new Interface(IMulticall.abi)\n\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  public static encodeMulticall(calldatas: string | string[]): string {\n    if (!Array.isArray(calldatas)) {\n      calldatas = [calldatas]\n    }\n\n    return calldatas.length === 1 ? calldatas[0] : Multicall.INTERFACE.encodeFunctionData('multicall', [calldatas])\n  }\n}\n","import JSBI from 'jsbi'\nimport { Interface } from '@ethersproject/abi'\nimport IPeripheryPaymentsWithFee from './IPeripheryPaymentsWithFeeNaka.json'\nimport {Token} from './token'\nimport { Percent} from './fractions/percent'\nimport { validateAndParseAddress } from '../utils/validateAndParseAddress'\nimport { toHex } from '../utils/calldata'\n\nexport interface FeeOptionsNaka {\n  /**\n   * The percent of the output that will be taken as a fee.\n   */\n  fee: Percent\n\n  /**\n   * The recipient of the fee.\n   */\n  recipient: string\n}\n\nexport abstract class PaymentsNaka {\n  public static INTERFACE: Interface = new Interface(IPeripheryPaymentsWithFee.abi)\n\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  private static encodeFeeBips(fee: Percent): string {\n    return toHex(fee.multiply(10_000).quotient)\n  }\n\n  public static encodeUnwrapWETH9(amountMinimum: JSBI, recipient: string, feeOptions?: FeeOptionsNaka): string {\n    recipient = validateAndParseAddress(recipient)\n\n    if (!!feeOptions) {\n      const feeBips = this.encodeFeeBips(feeOptions.fee)\n      const feeRecipient: string = validateAndParseAddress(feeOptions.recipient)\n\n      return PaymentsNaka.INTERFACE.encodeFunctionData('unwrapWNAKAWithFee', [\n        toHex(amountMinimum),\n        recipient,\n        feeBips,\n        feeRecipient\n      ])\n    } else {\n      return PaymentsNaka.INTERFACE.encodeFunctionData('unwrapWNAKA', [toHex(amountMinimum), recipient])\n    }\n  }\n\n  public static encodeSweepToken(\n    token: Token,\n    amountMinimum: JSBI,\n    recipient: string,\n    feeOptions?: FeeOptionsNaka\n  ): string {\n    recipient = validateAndParseAddress(recipient)\n\n    if (!!feeOptions) {\n      const feeBips = this.encodeFeeBips(feeOptions.fee)\n      const feeRecipient: string = validateAndParseAddress(feeOptions.recipient)\n\n      return PaymentsNaka.INTERFACE.encodeFunctionData('sweepTokenWithFee', [\n        token.address,\n        toHex(amountMinimum),\n        recipient,\n        feeBips,\n        feeRecipient\n      ])\n    } else {\n      return PaymentsNaka.INTERFACE.encodeFunctionData('sweepToken', [token.address, toHex(amountMinimum), recipient])\n    }\n  }\n\n  public static encodeRefundETH(): string {\n    return PaymentsNaka.INTERFACE.encodeFunctionData('refundNAKA')\n  }\n}\n","import { Token } from './entities/token'\nimport {Trade } from './entities/trade'\nimport {  TradeType } from './constants'\nimport { BigNumber, ethers } from 'ethers'\nimport bn from 'bignumber.js';\n\nexport function fromReadableAmount(\n    amount: number,\n    decimals: number\n): BigNumber {\n  return ethers.utils.parseUnits(amount.toString(), decimals)\n}\n\nexport function toReadableAmount(rawAmount: number, decimals: number): string {\n  return ethers.utils.formatUnits(rawAmount, decimals)\n}\n\nexport function displayTrade(trade: Trade<Token, Token, TradeType>): string {\n  return `${trade.inputAmount.toExact()} ${\n      trade.inputAmount.currency.symbol\n  } for ${trade.outputAmount.toExact()} ${trade.outputAmount.currency.symbol}`\n}\n\nexport function formatPriceToPriceSqrt(price: string): BigNumber {\n  console.log('price', price);\n  alert(\"vao day 5\")\n  const sqrt = BigNumber.from(\n      new bn(price.toString())\n          .sqrt()\n          .multipliedBy(new bn(2).pow(96))\n          .integerValue(3)\n          .toString(),\n  );\n  alert(\"vao day 6\")\n\n  return sqrt\n}","import {ADDRESS_ZERO, BigintIsh} from './constants'\nimport {Percent} from './entities/fractions/percent'\nimport {Currency} from './entities/currency'\nimport {Token} from './entities/token'\nimport {CurrencyAmount} from './entities/fractions/currencyAmount'\nimport {validateAndParseAddress} from './utils/validateAndParseAddress'\nimport {NativeCurrency} from './entities/nativeCurrency'\n\nimport {CurrentConfig, Environment} from './config'\n\n\nimport JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\nimport {Position} from './entities/position'\nimport {ONE, ZERO} from './internalConstants'\nimport {MethodParameters, toHex} from './utils/calldata'\nimport {Interface} from '@ethersproject/abi'\nimport INonfungiblePositionManager from './Nonfungible.json'\nimport {PermitOptions, SelfPermit} from './selfPermit'\nimport {Pool} from './entities'\nimport {Multicall} from './multicall'\nimport {Payments} from './entities/payments'\nimport {PaymentsNaka} from './entities/paymentsNaka'\nimport {fromReadableAmount} from './utils1'\n\n\nconst MaxUint128 = toHex(JSBI.subtract(JSBI.exponentiate(JSBI.BigInt(2), JSBI.BigInt(128)), JSBI.BigInt(1)))\n\nexport interface MintSpecificOptions {\n  /**\n   * The account that should receive the minted NFT.\n   */\n  recipient: string\n\n  /**\n   * Creates pool if not initialized before mint.\n   */\n  createPool?: boolean\n}\n\nexport interface IncreaseSpecificOptions {\n  /**\n   * Indicates the ID of the position to increase liquidity for.\n   */\n  tokenId: BigintIsh\n}\n\n/**\n * Options for producing the calldata to add liquidity.\n */\nexport interface CommonAddLiquidityOptions {\n  /**\n   * How much the pool price is allowed to move.\n   */\n  slippageTolerance: Percent\n\n  /**\n   * When the transaction expires, in epoch seconds.\n   */\n  deadline: BigintIsh\n\n  /**\n   * Whether to spend ether. If true, one of the pool tokens must be WETH, by default false\n   */\n  useNative?: NativeCurrency\n\n  /**\n   * The optional permit parameters for spending token0\n   */\n  token0Permit?: PermitOptions\n\n  /**\n   * The optional permit parameters for spending token1\n   */\n  token1Permit?: PermitOptions\n}\n\nexport type MintOptions = CommonAddLiquidityOptions & MintSpecificOptions\nexport type IncreaseOptions = CommonAddLiquidityOptions & IncreaseSpecificOptions\n\nexport type AddLiquidityOptions = MintOptions | IncreaseOptions\n\nexport interface SafeTransferOptions {\n  /**\n   * The account sending the NFT.\n   */\n  sender: string\n\n  /**\n   * The account that should receive the NFT.\n   */\n  recipient: string\n\n  /**\n   * The id of the token being sent.\n   */\n  tokenId: BigintIsh\n  /**\n   * The optional parameter that passes data to the `onERC721Received` call for the staker\n   */\n  data?: string\n}\n\n// type guard\nfunction isMint(options: AddLiquidityOptions): options is MintOptions {\n  return Object.keys(options).some(k => k === 'recipient')\n}\n\nexport interface CollectOptions {\n  /**\n   * Indicates the ID of the position to collect for.\n   */\n  tokenId: BigintIsh\n\n  /**\n   * Expected value of tokensOwed0, including as-of-yet-unaccounted-for fees/liquidity value to be burned\n   */\n  expectedCurrencyOwed0: CurrencyAmount<Currency>\n\n  /**\n   * Expected value of tokensOwed1, including as-of-yet-unaccounted-for fees/liquidity value to be burned\n   */\n  expectedCurrencyOwed1: CurrencyAmount<Currency>\n\n  /**\n   * The account that should receive the tokens.\n   */\n  recipient: string\n}\n\nexport interface NFTPermitOptions {\n  v: 0 | 1 | 27 | 28\n  r: string\n  s: string\n  deadline: BigintIsh\n  spender: string\n}\n\n/**\n * Options for producing the calldata to exit a position.\n */\nexport interface RemoveLiquidityOptions {\n  /**\n   * The ID of the token to exit\n   */\n  tokenId: BigintIsh\n\n  /**\n   * The percentage of position liquidity to exit.\n   */\n  liquidityPercentage: Percent\n\n  /**\n   * How much the pool price is allowed to move.\n   */\n  slippageTolerance: Percent\n\n  /**\n   * When the transaction expires, in epoch seconds.\n   */\n  deadline: BigintIsh\n\n  /**\n   * Whether the NFT should be burned if the entire position is being exited, by default false.\n   */\n  burnToken?: boolean\n\n  /**\n   * The optional permit of the token ID being exited, in case the exit transaction is being sent by an account that does not own the NFT\n   */\n  permit?: NFTPermitOptions\n\n  /**\n   * Parameters to be passed on to collect\n   */\n  collectOptions: Omit<CollectOptions, 'tokenId'>\n}\n\nexport abstract class NonfungiblePositionManager {\n  public static INTERFACE: Interface = new Interface(INonfungiblePositionManager)\n\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  private static encodeCreate(pool: Pool): string {\n    return NonfungiblePositionManager.INTERFACE.encodeFunctionData('createAndInitializePoolIfNecessary', [\n      pool.token0.address,\n      pool.token1.address,\n      pool.fee,\n      toHex(pool.sqrtRatioX96)\n    ])\n  }\n\n  public static createCallParameters(pool: Pool): MethodParameters {\n    return {\n      calldata: this.encodeCreate(pool),\n      value: toHex(0)\n    }\n  }\n\n  public static encodeCollectById( tokenId:any,\n                                    account: any):MethodParameters\n  {\n    const calldatas: string[] = []\n\n    // collect\n    calldatas.push(\n        NonfungiblePositionManager.INTERFACE.encodeFunctionData('collect', [\n          {\n            tokenId,\n            recipient: account,\n            amount0Max: MaxUint128,\n            amount1Max: MaxUint128\n          }\n        ])\n    )\n    return {\n      calldata:  Multicall.encodeMulticall(calldatas),\n      value: toHex(0)\n    }\n  }\n\n  public static encodeIncrease( tokenId:any,\n                                 amount0Desired:any, amount1Desired:any, amount0Min:any, amount1Min:any,deadline:any):MethodParameters\n  {\n    const calldatas: string[] = []\n    // collect\n\n    calldatas.push(\n        NonfungiblePositionManager.INTERFACE.encodeFunctionData('increaseLiquidity', [\n          {\n            tokenId: tokenId,\n            amount0Desired: amount0Desired,\n            amount1Desired: amount1Desired,\n            amount0Min,\n            amount1Min,\n            deadline\n          }\n        ])\n    )\n    return {\n      calldata:  Multicall.encodeMulticall(calldatas),\n      value: toHex(0)\n    }\n  }\n\n  public static encodeRemoveLiqidity( tokenId:any,\n                                liquidity:any, amount0Min:any, amount1Min:any,deadline:any,account:any):MethodParameters\n  {\n    const calldatas: string[] = []\n    // collect\n\n    calldatas.push(\n        NonfungiblePositionManager.INTERFACE.encodeFunctionData('decreaseLiquidity', [\n          {\n            tokenId: tokenId,\n            liquidity:liquidity,\n            amount0Min: amount0Min,\n            amount1Min: amount1Min,\n            deadline: deadline,\n          }\n        ])\n    )\n    calldatas.push(\n        NonfungiblePositionManager.INTERFACE.encodeFunctionData('collect', [\n          {\n            tokenId,\n            recipient: account,\n            amount0Max: MaxUint128,\n            amount1Max: MaxUint128\n          }\n        ])\n    )\n\n    return {\n      calldata:  Multicall.encodeMulticall(calldatas),\n      value: toHex(0)\n    }\n  }\n\n  public static encodeRemovePosition( tokenId:any):MethodParameters {\n    const calldatas: string[] = []\n    // collect\n\n    calldatas.push(\n        NonfungiblePositionManager.INTERFACE.encodeFunctionData('burn', [\n          {\n            tokenId: tokenId\n          }\n        ])\n    )\n\n    return {\n      calldata:  Multicall.encodeMulticall(calldatas),\n      value: toHex(0)\n    }\n  }\n\n  public static addCallParametersCreate(isNewPool:Boolean,\n                                     fee:any,\n                                        token0:any,\n                                        token1:any,\n                                     amountADesired:any,\n                                     amountBDesired:any,\n                                     lowerTick:any,\n                                     upperTick:any,\n                                     amount0Min:any,\n                                     amount1Min:any,\n                                     currentPrice:any,\n                                     account:any,\n                                     deadline:any,\n                                     ) :MethodParameters\n  {\n\n\n    const calldatas: string[] = []\n    let value: string = toHex(0)\n    if(!isNewPool){\n      calldatas.push(\n          NonfungiblePositionManager.INTERFACE.encodeFunctionData('mint', [\n            {\n              token0: token0,\n              token1: token1,\n              fee: fee,\n              tickLower: lowerTick,\n              tickUpper: upperTick,\n              amount0Desired: fromReadableAmount(amountADesired,18),\n              amount1Desired: fromReadableAmount(amountBDesired,18),\n              amount0Min:amount0Min,\n              amount1Min: amount1Min,\n              recipient: account,\n              deadline: deadline,\n            }\n          ])\n      )\n\n    } else  {\n      calldatas.push(\n          NonfungiblePositionManager.INTERFACE.encodeFunctionData('createAndInitializePoolIfNecessary', [\n            token0,\n            token1,\n            fee,\n            currentPrice,\n          ]))\n      calldatas.push(\n          NonfungiblePositionManager.INTERFACE.encodeFunctionData('mint', [\n            {\n              token0: token0,\n              token1: token1,\n              fee: fee,\n              tickLower: lowerTick,\n              tickUpper: upperTick,\n              amount0Desired: fromReadableAmount(amountADesired,18),\n              amount1Desired: fromReadableAmount(amountBDesired,18),\n              amount0Min:amount0Min,\n              amount1Min: amount1Min,\n              recipient: account,\n              deadline: deadline,\n            }\n          ])\n      )\n    }\n\n    if (token0.toLowerCase() === CurrentConfig.TC_CONTRACT_ADDRESS.toLowerCase() || token1.toLowerCase() === CurrentConfig.TC_CONTRACT_ADDRESS.toLowerCase()) {\n      const wrappedValue = token0.toLowerCase() === CurrentConfig.TC_CONTRACT_ADDRESS.toLowerCase() ? fromReadableAmount(amountADesired,18) : fromReadableAmount(amountBDesired,18)\n      if (wrappedValue.gt(0)) {\n        if(CurrentConfig.env== Environment.NAKAMAINNET||CurrentConfig.env== Environment.NAKATESTNET)\n        {\n          calldatas.push(PaymentsNaka.encodeRefundETH())\n        }else{\n          calldatas.push(Payments.encodeRefundETH())\n        }\n      }\n      value =toHex(wrappedValue.toString())\n    }\n    return {\n      calldata: Multicall.encodeMulticall(calldatas),\n      value\n    }\n  }\n\n  public static addCallParameters(position: Position, options: AddLiquidityOptions): MethodParameters {\n    invariant(JSBI.greaterThan(position.liquidity, ZERO), 'ZERO_LIQUIDITY')\n\n    const calldatas: string[] = []\n\n    // get amounts\n    const { amount0: amount0Desired, amount1: amount1Desired } = position.mintAmounts\n\n    // adjust for slippage\n    const minimumAmounts = position.mintAmountsWithSlippage(options.slippageTolerance)\n    const amount0Min = toHex(minimumAmounts.amount0)\n    const amount1Min = toHex(minimumAmounts.amount1)\n\n    const deadline = toHex(options.deadline)\n\n    // create pool if needed\n    if (isMint(options) && options.createPool) {\n      calldatas.push(this.encodeCreate(position.pool))\n    }\n\n    // permits if necessary\n    if (options.token0Permit) {\n      calldatas.push(SelfPermit.encodePermit(position.pool.token0, options.token0Permit))\n    }\n    if (options.token1Permit) {\n      calldatas.push(SelfPermit.encodePermit(position.pool.token1, options.token1Permit))\n    }\n\n    // mint\n    if (isMint(options)) {\n      const recipient: string = validateAndParseAddress(options.recipient)\n\n      calldatas.push(\n        NonfungiblePositionManager.INTERFACE.encodeFunctionData('mint', [\n          {\n            token0: position.pool.token0.address,\n            token1: position.pool.token1.address,\n            fee: position.pool.fee,\n            tickLower: position.tickLower,\n            tickUpper: position.tickUpper,\n            amount0Desired: toHex(amount0Desired),\n            amount1Desired: toHex(amount1Desired),\n            amount0Min,\n            amount1Min,\n            recipient,\n            deadline\n          }\n        ])\n      )\n    } else {\n      // increase\n      calldatas.push(\n        NonfungiblePositionManager.INTERFACE.encodeFunctionData('increaseLiquidity', [\n          {\n            tokenId: toHex(options.tokenId),\n            amount0Desired: toHex(amount0Desired),\n            amount1Desired: toHex(amount1Desired),\n            amount0Min,\n            amount1Min,\n            deadline\n          }\n        ])\n      )\n    }\n\n    let value: string = toHex(0)\n\n    if (options.useNative) {\n      const wrapped = options.useNative.wrapped\n      invariant(position.pool.token0.equals(wrapped) || position.pool.token1.equals(wrapped), 'NO_WETH')\n\n      const wrappedValue = position.pool.token0.equals(wrapped) ? amount0Desired : amount1Desired\n\n      // we only need to refund if we're actually sending ETH\n      if (JSBI.greaterThan(wrappedValue, ZERO)) {\n        if(CurrentConfig.env== Environment.NAKAMAINNET||CurrentConfig.env== Environment.NAKATESTNET)\n        {\n          calldatas.push(PaymentsNaka.encodeRefundETH())\n        }else{\n          calldatas.push(Payments.encodeRefundETH())\n        }\n      }\n\n      value = toHex(wrappedValue)\n    }\n\n    return {\n      calldata: Multicall.encodeMulticall(calldatas),\n      value\n    }\n  }\n\n  private static encodeCollect(options: CollectOptions): string[] {\n    const calldatas: string[] = []\n\n    const tokenId = toHex(options.tokenId)\n\n    const involvesETH =\n      options.expectedCurrencyOwed0.currency.isNative || options.expectedCurrencyOwed1.currency.isNative\n\n    const recipient = validateAndParseAddress(options.recipient)\n\n    // collect\n    calldatas.push(\n      NonfungiblePositionManager.INTERFACE.encodeFunctionData('collect', [\n        {\n          tokenId,\n          recipient: involvesETH ? ADDRESS_ZERO : recipient,\n          amount0Max: MaxUint128,\n          amount1Max: MaxUint128\n        }\n      ])\n    )\n\n    if (involvesETH) {\n      const ethAmount = options.expectedCurrencyOwed0.currency.isNative\n        ? options.expectedCurrencyOwed0.quotient\n        : options.expectedCurrencyOwed1.quotient\n      const token = options.expectedCurrencyOwed0.currency.isNative\n        ? (options.expectedCurrencyOwed1.currency as Token)\n        : (options.expectedCurrencyOwed0.currency as Token)\n      const tokenAmount = options.expectedCurrencyOwed0.currency.isNative\n        ? options.expectedCurrencyOwed1.quotient\n        : options.expectedCurrencyOwed0.quotient\n\n      if(CurrentConfig.env== Environment.NAKAMAINNET||CurrentConfig.env== Environment.NAKATESTNET)\n      {\n        calldatas.push(PaymentsNaka.encodeUnwrapWETH9(ethAmount, recipient))\n        calldatas.push(PaymentsNaka.encodeSweepToken(token, tokenAmount, recipient))\n      }else{\n        calldatas.push(Payments.encodeUnwrapWETH9(ethAmount, recipient))\n        calldatas.push(Payments.encodeSweepToken(token, tokenAmount, recipient))\n      }\n\n    }\n\n    return calldatas\n  }\n\n  public static collectCallParameters(options: CollectOptions): MethodParameters {\n    const calldatas: string[] = NonfungiblePositionManager.encodeCollect(options)\n\n    return {\n      calldata: Multicall.encodeMulticall(calldatas),\n      value: toHex(0)\n    }\n  }\n\n  /**\n   * Produces the calldata for completely or partially exiting a position\n   * @param position The position to exit\n   * @param options Additional information necessary for generating the calldata\n   * @returns The call parameters\n   */\n  public static removeCallParameters(position: Position, options: RemoveLiquidityOptions): MethodParameters {\n    const calldatas: string[] = []\n\n    const deadline = toHex(options.deadline)\n    const tokenId = toHex(options.tokenId)\n\n    // construct a partial position with a percentage of liquidity\n    const partialPosition = new Position({\n      pool: position.pool,\n      liquidity: options.liquidityPercentage.multiply(position.liquidity).quotient,\n      tickLower: position.tickLower,\n      tickUpper: position.tickUpper\n    })\n    invariant(JSBI.greaterThan(partialPosition.liquidity, ZERO), 'ZERO_LIQUIDITY')\n\n    // slippage-adjusted underlying amounts\n    const { amount0: amount0Min, amount1: amount1Min } = partialPosition.burnAmountsWithSlippage(\n      options.slippageTolerance\n    )\n\n    if (options.permit) {\n      calldatas.push(\n        NonfungiblePositionManager.INTERFACE.encodeFunctionData('permit', [\n          validateAndParseAddress(options.permit.spender),\n          tokenId,\n          toHex(options.permit.deadline),\n          options.permit.v,\n          options.permit.r,\n          options.permit.s\n        ])\n      )\n    }\n\n    // remove liquidity\n    calldatas.push(\n      NonfungiblePositionManager.INTERFACE.encodeFunctionData('decreaseLiquidity', [\n        {\n          tokenId,\n          liquidity: toHex(partialPosition.liquidity),\n          amount0Min: toHex(amount0Min),\n          amount1Min: toHex(amount1Min),\n          deadline\n        }\n      ])\n    )\n\n    const { expectedCurrencyOwed0, expectedCurrencyOwed1, ...rest } = options.collectOptions\n    calldatas.push(\n      ...NonfungiblePositionManager.encodeCollect({\n        tokenId: toHex(options.tokenId),\n        // add the underlying value to the expected currency already owed\n        expectedCurrencyOwed0: expectedCurrencyOwed0.add(\n          CurrencyAmount.fromRawAmount(expectedCurrencyOwed0.currency, amount0Min)\n        ),\n        expectedCurrencyOwed1: expectedCurrencyOwed1.add(\n          CurrencyAmount.fromRawAmount(expectedCurrencyOwed1.currency, amount1Min)\n        ),\n        ...rest\n      })\n    )\n\n    if (options.liquidityPercentage.equalTo(ONE)) {\n      if (options.burnToken) {\n        calldatas.push(NonfungiblePositionManager.INTERFACE.encodeFunctionData('burn', [tokenId]))\n      }\n    } else {\n      invariant(options.burnToken !== true, 'CANNOT_BURN')\n    }\n\n    return {\n      calldata: Multicall.encodeMulticall(calldatas),\n      value: toHex(0)\n    }\n  }\n\n  public static safeTransferFromParameters(options: SafeTransferOptions): MethodParameters {\n    const recipient = validateAndParseAddress(options.recipient)\n    const sender = validateAndParseAddress(options.sender)\n\n    let calldata: string\n    if (options.data) {\n      calldata = NonfungiblePositionManager.INTERFACE.encodeFunctionData(\n        'safeTransferFrom(address,address,uint256,bytes)',\n        [sender, recipient, toHex(options.tokenId), options.data]\n      )\n    } else {\n      calldata = NonfungiblePositionManager.INTERFACE.encodeFunctionData('safeTransferFrom(address,address,uint256)', [\n        sender,\n        recipient,\n        toHex(options.tokenId)\n      ])\n    }\n    return {\n      calldata: calldata,\n      value: toHex(0)\n    }\n  }\n}\n","import {BaseProvider} from '@ethersproject/providers'\nimport {BigNumber, ethers, providers} from 'ethers'\n\nimport {CurrentConfig, CurrentWallet, WalletType} from './config'\n\n// Single copies of provider and wallet\nlet mainnetProvider = new ethers.providers.JsonRpcProvider(\n    CurrentConfig.rpc\n)\nexport  let wallet:ethers.Wallet\n\nlet browserExtensionProvider : ethers.providers.Web3Provider | null\nlet walletExtensionAddress: string | null = null\n\nexport function refreshProvider(provider:any)\n{\n  mainnetProvider = new ethers.providers.JsonRpcProvider(\n      CurrentConfig.rpc\n  )\n  if(CurrentWallet.type==WalletType.PRIVATEKEY && CurrentWallet.privateKey!=\"\"){\n    wallet =  createWallet()\n  }\n  else if(CurrentWallet.type==WalletType.EXTENSION){\n    if(!provider){\n      provider = createBrowserExtensionProvider()\n    }\n    browserExtensionProvider = provider\n  }\n\n}\n// Interfaces\n\nexport enum TransactionState {\n  Failed = 'Failed',\n  New = 'New',\n  Rejected = 'Rejected',\n  Sending = 'Sending',\n  Sent = 'Sent',\n}\n\n// Provider and Wallet Functions\n\nexport function getMainnetProvider(): BaseProvider {\n  return mainnetProvider\n}\n\nexport function getProvider(): providers.Provider | null {\n  return CurrentWallet.type === WalletType.EXTENSION\n      ? browserExtensionProvider:CurrentWallet.privateKey==\"\"?mainnetProvider\n      : wallet.provider\n}\n\nexport function getWalletAddress(): string | null {\n  return CurrentWallet.type===  WalletType.EXTENSION\n      ? walletExtensionAddress:CurrentWallet.privateKey==\"\"?\"\": wallet.address\n}\n\nexport async function geSignerAddress(): Promise<string>{\n  const signer =  browserExtensionProvider?.getSigner()\n  if (!signer) {\n    return \"\"\n  }\n  const address =  await signer.getAddress()\n  console.log(\"signer address\",address)\n  return address\n}\n\nexport async function sendTransaction(\n    transaction: ethers.providers.TransactionRequest\n): Promise<TransactionState> {\n  if (CurrentWallet.type===  WalletType.EXTENSION) {\n    transaction.maxFeePerGas = transaction.maxFeePerGas?.toString()\n    transaction.maxPriorityFeePerGas = transaction.maxPriorityFeePerGas?.toString()\n    return sendTransactionViaExtension(transaction)\n  } else {\n    if (transaction.value) {\n      transaction.value = BigNumber.from(transaction.value)\n    }\n\n    //transaction.gasLimit = 1000000\n    return sendTransactionViaWallet(transaction)\n  }\n}\n\nexport async function sendTransactionGetReceipt(\n    transaction: ethers.providers.TransactionRequest,scanTX:any = true\n): Promise<any> {\n  if (CurrentWallet.type===  WalletType.EXTENSION) {\n    transaction.maxFeePerGas = transaction.maxFeePerGas?.toString()\n    transaction.maxPriorityFeePerGas = transaction.maxPriorityFeePerGas?.toString()\n    return sendTransactionViaExtensionGetReceipt(transaction)\n  } else {\n    if (transaction.value) {\n      transaction.value = BigNumber.from(transaction.value)\n    }\n    transaction.gasLimit = 1000000\n    return sendTransactionViaWalletReceipt(transaction,scanTX)\n  }\n}\n\n\nexport async function connectBrowserExtensionWallet(provider:any = null) {\n  if(!provider) {\n    if (!window.ethereum) {\n      return null\n    }\n\n    const {ethereum} = window\n    provider = new ethers.providers.Web3Provider(ethereum)\n  }\n\n  const accounts = await provider.send('eth_requestAccounts', [])\n  console.log('eth_requestAccounts',accounts)\n\n  if (accounts.length < 1) {\n    return\n  }\n\n  walletExtensionAddress = accounts[0]\n  return walletExtensionAddress\n}\n\n// Internal Functionality\n\nfunction createWallet(): ethers.Wallet {\n  let provider = mainnetProvider\n  return new ethers.Wallet(CurrentWallet.privateKey, provider)\n}\n\nfunction createBrowserExtensionProvider(): ethers.providers.Web3Provider | null {\n  try {\n    return( new ethers.providers.Web3Provider(window?.ethereum, 'any'))\n  } catch (e) {\n    console.log('No Wallet Extension Found')\n    return null\n  }\n}\n\n\n// Transacting with a wallet extension via a Web3 Provider\nasync function sendTransactionViaExtension(\n    transaction: ethers.providers.TransactionRequest\n): Promise<TransactionState> {\n  try {\n    const receipt = await browserExtensionProvider?.send(\n        'eth_sendTransaction',\n        [transaction]\n    )\n    if (receipt) {\n      console.log(\"Meta mask receipt \",receipt)\n      return TransactionState.Sent\n    } else {\n      return TransactionState.Failed\n    }\n  } catch (e) {\n    console.log(\"Meta mask error \",e)\n    return TransactionState.Rejected\n  }\n}\n\n// Transacting with a wallet extension via a Web3 Provider\nexport async function sendTransactionViaExtensionGetReceipt(\n    transaction: ethers.providers.TransactionRequest\n): Promise<any> {\n  try {\n    const receipt = await browserExtensionProvider?.send(\n        'eth_sendTransaction',\n        [transaction]\n    )\n    if (receipt) {\n      console.log(\"Meta mask receipt \",receipt)\n      return [TransactionState.Sent,receipt]\n    } else {\n      return [TransactionState.Failed,null]\n    }\n  } catch (e) {\n    console.log(\"Meta mask error \",e)\n    return [TransactionState.Rejected,null]\n  }\n}\n\nasync function sendTransactionViaWallet(\n    transaction: ethers.providers.TransactionRequest\n): Promise<TransactionState> {\n  if (transaction.value) {\n    transaction.value = BigNumber.from(transaction.value)\n  }\n  const txRes = await wallet.sendTransaction(transaction)\n\n  let receipt = null\n  const provider = getProvider()\n  if (!provider) {\n    return TransactionState.Failed\n  }\n\n  while (receipt === null) {\n    try {\n      receipt = await provider.getTransactionReceipt(txRes.hash)\n\n      if (receipt === null) {\n        continue\n      }\n      console.log(`Receipt recived:`, receipt)\n    } catch (e) {\n      console.log(`Receipt error:`, e)\n      break\n    }\n  }\n\n  // Transaction was successful if status === 1\n  if (receipt) {\n    return TransactionState.Sent\n  } else {\n    return TransactionState.Failed\n  }\n}\n\nasync function sendTransactionViaWalletReceipt(\n    transaction: ethers.providers.TransactionRequest,scanTX:any = true\n): Promise<any> {\n  if (transaction.value) {\n    transaction.value = BigNumber.from(transaction.value)\n  }\n  const txRes = await wallet.sendTransaction(transaction)\n\n  if (!scanTX){\n    return [TransactionState.Sent,txRes.hash]\n  }\n\n  let receipt = null\n  const provider = getProvider()\n  if (!provider) {\n    return [TransactionState.Failed,null]\n  }\n\n  while (receipt === null) {\n    try {\n      receipt = await provider.getTransactionReceipt(txRes.hash)\n\n      if (receipt === null) {\n        continue\n      }\n      console.log(`Receipt recived:`, receipt)\n    } catch (e) {\n      console.log(`Receipt error:`, e)\n      break\n    }\n  }\n\n  // Transaction was successful if status === 1\n  if (receipt) {\n    return [TransactionState.Sent,receipt]\n  } else {\n    return [TransactionState.Failed,null]\n  }\n}","import IV3PoolABI from './IV3Pool.json'\nimport {computePoolAddress} from './utils/computePoolAddress'\nimport {Token} from './entities/token'\nimport {Pool} from './entities/pool'\nimport { ethers } from 'ethers'\n\nimport { CurrentConfig} from './config'\nimport { getProvider } from './providers'\nimport { FeeAmount } from './constants'\n\ninterface PoolInfo {\n  token0: string\n  token1: string\n  fee: number\n  tickSpacing: number\n  sqrtPriceX96: ethers.BigNumber\n  liquidity: ethers.BigNumber\n  tick: number\n}\nexport async function getPoolInfoByToken(tokenIn: Token,tokenOut:Token,poolFee:number ): Promise<Pool> {\n  const provider = getProvider()\n  if (!provider) {\n    throw new Error('No provider')\n  }\n\n\n  const currentPoolAddress = computePoolAddress({\n    factoryAddress:CurrentConfig.POOL_FACTORY_CONTRACT_ADDRESS,\n    tokenA: tokenIn,\n    tokenB: tokenOut,\n    fee: poolFee\n  })\n\n  const poolContract = new ethers.Contract(\n      currentPoolAddress,\n      IV3PoolABI.abi,\n      provider\n  )\n\n\n  //const token0 = await poolContract.token0()\n  //const token1 = await poolContract.token1()\n  //const fee = await poolContract.fee()\n  //const tickSpacing = await poolContract.tickSpacing()\n  const liquidity = await poolContract.liquidity()\n  const slot0 = await poolContract.slot0()\n\n  const p = new Pool(\n      tokenIn,\n      tokenOut,\n      poolFee,\n      slot0[0].toString(),\n      liquidity.toString(),\n      slot0[1]\n  )\n\n\n  return p\n}\n\n\n\nexport async function getPoolInfo(tokenIn: Token,tokenOut:Token,poolFee:number ): Promise<PoolInfo> {\n  const provider = getProvider()\n  if (!provider) {\n    throw new Error('No provider')\n  }\n  const currentPoolAddress = computePoolAddress({\n    factoryAddress:CurrentConfig.POOL_FACTORY_CONTRACT_ADDRESS,\n    tokenA: tokenIn,\n    tokenB: tokenOut,\n    fee: poolFee\n  })\n  console.log(\"param\",{\n    factoryAddress:CurrentConfig.POOL_FACTORY_CONTRACT_ADDRESS,\n    tokenA: tokenIn,\n    tokenB: tokenOut,\n    fee: poolFee\n  })\n  const poolContract = new ethers.Contract(\n      currentPoolAddress,\n      IV3PoolABI.abi,\n      provider\n  )\n\n  const [token0, token1, fee, tickSpacing, liquidity, slot0] =\n    await Promise.all([\n      poolContract.token0(),\n      poolContract.token1(),\n      poolContract.fee(),\n      poolContract.tickSpacing(),\n      poolContract.liquidity(),\n      poolContract.slot0(),\n    ])\n  console.log(\"vao day 6\")\n\n  return {\n    token0,\n    token1,\n    fee,\n    tickSpacing,\n    liquidity,\n    sqrtPriceX96: slot0[0],\n    tick: slot0[1],\n  }\n}\n\nconst FEE_SIZE = 3\n\nexport function encodePath(path: string[], fees: FeeAmount[]): string {\n  if (path.length != fees.length + 1) {\n    throw new Error('path/fee lengths do not match')\n  }\n\n  let encoded = '0x'\n  for (let i = 0; i < fees.length; i++) {\n    // 20 byte encoding of the address\n    encoded += path[i].slice(2)\n    // 3 byte encoding of the fee\n    encoded += fees[i].toString(16).padStart(2 * FEE_SIZE, '0')\n  }\n  // encode the final token\n  encoded += path[path.length - 1].slice(2)\n\n  return encoded.toLowerCase()\n}\n\n\n\n","// This file contains code to easily connect to and get information from a wallet on chain\n\nimport {Currency} from './entities/currency'\nimport {BigNumber, ethers} from 'ethers'\nimport {providers} from 'ethers'\nimport JSBI from 'jsbi'\n\nimport {\n  CurrentConfig,\n} from './config'\nimport {\n  ERC20_ABI,\n  MAX_FEE_PER_GAS,\n  MAX_PRIORITY_FEE_PER_GAS,\n  WETH_ABI\n} from './constants'\nimport {getProvider, getWalletAddress, sendTransaction} from './providers'\nimport {toReadableAmount} from './utils1'\n\nexport async function getCurrencyBalance(\n    provider: providers.Provider,\n    address: string,\n    currency: Currency\n): Promise<string> {\n  // Handle ETH directly\n  if (currency.isNative || currency.address.toLowerCase() == CurrentConfig.TC_CONTRACT_ADDRESS.toLowerCase()) {\n    return ethers.utils.formatEther(await provider.getBalance(address))\n  }\n\n  // Get currency otherwise\n  const ERC20Contract = new ethers.Contract(\n      currency.address,\n      ERC20_ABI,\n      provider\n  )\n  const balance: number = await ERC20Contract.balanceOf(address)\n  const decimals: number = await ERC20Contract.decimals()\n\n  // Format with proper units (approximate)\n  return toReadableAmount(balance, decimals)\n}\n\nexport async function getCurrencyApproveRouter(\n    provider: providers.Provider,\n    address: string,\n    currency: Currency\n): Promise<number> {\n  // Handle ETH directly\n  if (currency.isNative) {\n    return -1\n  }\n\n  console.log(\"address\",address)\n\n  // Get currency otherwise\n  const ERC20Contract = new ethers.Contract(\n      currency.address,\n      ERC20_ABI,\n      provider\n  )\n  const amountAprrove: number = await ERC20Contract.allowance(address,CurrentConfig.SWAP_ROUTER_ADDRESS)\n  console.log(\"address1\",address)\n  const decimals: number = await ERC20Contract.decimals()\n  console.log(\"amountAprrove\",amountAprrove)\n\n  // Format with proper units (approximate)\n  return Number(toReadableAmount(amountAprrove, decimals))\n}\n\n\n// wraps ETH (rounding up to the nearest ETH for decimal places)\nexport async function wrapETH(eth: number) {\n  const provider = getProvider()\n  const address = getWalletAddress()\n  if (!provider || !address) {\n    throw new Error('Cannot wrap ETH without a provider and wallet address')\n  }\n\n  const wethContract = new ethers.Contract(\n      CurrentConfig.WETH_CONTRACT_ADDRESS,\n      WETH_ABI,\n      provider\n  )\n\n  const transaction = {\n    data: wethContract.interface.encodeFunctionData('deposit'),\n    value: BigNumber.from(Math.ceil(eth))\n        .mul(JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(18)).toString())\n        .toString(),\n    from: address,\n    to: CurrentConfig.WETH_CONTRACT_ADDRESS,\n    maxFeePerGas: MAX_FEE_PER_GAS,\n    maxPriorityFeePerGas: MAX_PRIORITY_FEE_PER_GAS,\n  }\n\n  await sendTransaction(transaction)\n}\n\n// unwraps ETH (rounding up to the nearest ETH for decimal places)\nexport async function unwrapETH(eth: number) {\n  const provider = getProvider()\n  const address = getWalletAddress()\n  if (!provider || !address) {\n    throw new Error('Cannot unwrap ETH without a provider and wallet address')\n  }\n\n  const wethContract = new ethers.Contract(\n      CurrentConfig.WETH_CONTRACT_ADDRESS,\n      WETH_ABI,\n      provider\n  )\n\n  const transaction = {\n    data: wethContract.interface.encodeFunctionData('withdraw', [\n      BigNumber.from(Math.ceil(eth))\n          .mul(JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(18)).toString())\n          .toString(),\n    ]),\n    from: address,\n    to: CurrentConfig.WETH_CONTRACT_ADDRESS,\n    maxFeePerGas: MAX_FEE_PER_GAS,\n    maxPriorityFeePerGas: MAX_PRIORITY_FEE_PER_GAS,\n  }\n\n  await sendTransaction(transaction)\n}\n\n/*\nexport async function buyTCFee(need_amount_tc = '0.1', tokenType?: TokenType){\n  const tokenAddress =\n      tokenType === 'ETH' ? TOKEN_ADDRESS.ETH_ADDRESS_L2 : BTC_L2_ADDRESS;\n  let [tokenBuyPrice, chainNetwork, userAmountBTC] = await Promise.all([\n    this.getBTCPrice(),\n    this.gameWalletProvider.gameWallet?.provider.getNetwork(),\n    this.contract\n        .getERC20Contract(tokenAddress)\n        .connect(this.wallet)\n        .balanceOf(this.wallet.address),\n  ]);\n\n  if (tokenType === 'ETH') {\n    tokenBuyPrice = BigNumber.from('145000000000000000000');\n  }\n  const amountApprove = await this.contract\n      .getERC20Contract(tokenAddress)\n      .allowance(this.wallet.address, ALPHA_KEY_FACTORY_ADDRESS);\n  if (BigNumber.from(amountApprove).lt(parseEther('1'))) {\n    const txApprove = await this.contract\n        .getERC20Contract(tokenAddress)\n        .connect(this.wallet)\n        .approve(ALPHA_KEY_FACTORY_ADDRESS, ethers.constants.MaxUint256);\n    await txApprove.wait();\n  }\n\n  const estimateBTCAmount = parseEther(need_amount_tc)\n      .mul(parseEther(tokenType === 'ETH' ? '0.1' : '1'))\n      .div(tokenBuyPrice);\n\n  let amountBTC = estimateBTCAmount;\n\n  if (BigNumber.from(estimateBTCAmount).gt(userAmountBTC)) {\n    amountBTC = BigNumber.from(userAmountBTC).gt(estimateBTCAmount)\n        ? amountBTC\n        : userAmountBTC;\n  }\n\n  try {\n    const akf = this.contract.getAlphaKeysFactoryContract();\n    const nonce = BigNumber.from(ethers.utils.randomBytes(32));\n\n    const chainId = chainNetwork?.chainId as number;\n\n    const messagePack = ethers.utils.defaultAbiCoder.encode(\n        [\n          'address',\n          'uint256',\n          'uint256',\n          'address',\n          'uint256',\n          'uint256',\n          'uint256',\n        ],\n        [\n          akf.address,\n          chainId,\n          nonce,\n          this.wallet.address,\n          amountBTC,\n          tokenBuyPrice,\n          ethers.constants.MaxUint256,\n        ]\n    );\n\n    const messageHash = ethers.utils.keccak256(\n        ethers.utils.arrayify(messagePack)\n    );\n    const signature = await this.wallet.signMessage(\n        ethers.utils.arrayify(messageHash)\n    );\n\n    const data_hex = akf.interface.encodeFunctionData(\n        (tokenType === 'ETH' ? 'requestETH2TC' : 'requestTC') as any,\n        [\n          nonce,\n          this.wallet.address,\n          amountBTC,\n          tokenBuyPrice,\n          ethers.constants.MaxUint256,\n          signature,\n        ]\n    );\n    const result: any = await this.tradeAPI.sendTx({\n      contract_address: akf.address,\n      data_hex,\n    });\n    const r: any =\n        await this.gameWalletProvider.gameWallet?.provider.getTransaction(\n            result\n        );\n    await r.wait();\n    await this.assetContext.fetchAssets();\n    return;\n  } catch (error) {\n    errorLogger.report({\n      action: errorLogger.ERROR_LOGGER_TYPE.BUY_TC,\n      address: this.wallet.address,\n      error: JSON.stringify(error),\n      info: JSON.stringify({\n        userAmountBTC: userAmountBTC.toString(),\n        amountBTC: amountBTC.toString(),\n      }),\n    });\n    await this.getFaucet();\n    throw error;\n  }\n};\n\n\nexport async function estimateTCGasFee ({\n                                          type,\n                                          needFeeTC,\n                                        }: {\n  type: ETypes;\n  needFeeTC?: any;\n}) {\n  const _needFeeTC = ceil(needFeeTC || typeToFee[type]);\n  console.log('_needFeeTC', _needFeeTC, typeToFee[type]);\n\n  let isBuy = false;\n\n  try {\n    const [amount, amountBTC] = await Promise.all([\n      gameWalletProvider.gameWallet?.provider.getBalance(\n          gameWalletProvider.gameWallet.address\n      ),\n      contract\n          .getERC20Contract(BTC_L2_ADDRESS)\n          .connect(wallet)\n          .balanceOf(wallet.address),\n    ]);\n\n\n    console.log(\n        'aaaa',\n        amountBTC.toString(),\n        BigNumber.from(amountBTC).gt('0')\n    );\n\n    if (\n        BigNumber.from(amount?.toString()).lt(parseEther('0.0005')) &&\n        BigNumber.from(amountBTC).gt('0')\n    ) {\n      const amountApprove = await this.contract\n          .getERC20Contract(BTC_L2_ADDRESS)\n          .allowance(this.wallet.address, ALPHA_KEY_FACTORY_ADDRESS);\n\n      if (BigNumber.from(amountApprove).lt(parseEther('1'))) {\n        await this.getFaucet();\n        const txApprove = await this.contract\n            .getERC20Contract(BTC_L2_ADDRESS)\n            .connect(this.wallet)\n            .approve(ALPHA_KEY_FACTORY_ADDRESS, ethers.constants.MaxUint256);\n        await txApprove.wait();\n        isBuy = true;\n      }\n    }\n\n\n    const gasPrice = await this.contract.provider?.getGasPrice();\n    const gasFee = new NBigNumber(_needFeeTC).multipliedBy(\n        gasPrice?.toString() as string\n    );\n    console.log(\n        'gasFee',\n        gasFee.toString(),\n        BigNumber.from(amount?.toString()).lt(gasFee.toString()),\n        amount?.toString()\n    );\n\n    if (\n        BigNumber.from(amount?.toString()).lt(parseEther('0.001')) ||\n        BigNumber.from(amount?.toString()).lt(gasFee.toString())\n    ) {\n      await this.buyTCFee(this.MIN_BUY_TC);\n      isBuy = true;\n    }\n  } catch (error) {\n    console.log('error', error);\n\n    isBuy = false;\n    throw error;\n  }\n\n  return isBuy;\n};\n*/","import { Interface } from '@ethersproject/abi'\nimport { ADDRESS_ZERO,BigintIsh,TradeType } from '../constants'\nimport { validateAndParseAddress } from '../utils/validateAndParseAddress'\nimport { Currency } from './currency'\nimport { CurrencyAmount } from './fractions/currencyAmount'\nimport { Percent } from './fractions/percent'\nimport invariant from 'tiny-invariant'\nimport { Trade } from './trade'\nimport { PermitOptions, SelfPermit } from '../selfPermit'\nimport { encodeRouteToPath } from '../utils/encodeRouteToPath'\nimport { MethodParameters, toHex } from '../utils/calldata'\nimport ISwapRouter from './SwRouterNaka.json'\nimport { Multicall } from './multicall'\nimport { FeeOptionsNaka, PaymentsNaka } from './paymentsNaka'\nimport { CurrentConfig } from '../config'\n\n/**\n * Options for producing the arguments to send calls to the router.\n */\nexport interface SwapOptionsNaka {\n  /**\n   * How much the execution price is allowed to move unfavorably from the trade execution price.\n   */\n  slippageTolerance: Percent\n\n  /**\n   * The account that should receive the output.\n   */\n  recipient: string\n\n  /**\n   * When the transaction expires, in epoch seconds.\n   */\n  deadline: BigintIsh\n\n  /**\n   * The optional permit parameters for spending the input.\n   */\n  inputTokenPermit?: PermitOptions\n\n  /**\n   * The optional price limit for the trade.\n   */\n  sqrtPriceLimitX96?: BigintIsh\n\n  /**\n   * Optional information for taking a fee on output.\n   */\n  fee?: FeeOptionsNaka\n\n  useDefiToken: boolean\n}\n\n/**\n * Represents the trustless-swap V3 SwapRouter, and has static methods for helping execute trades.\n */\nexport abstract class SwapRouterNaka {\n  public static INTERFACE: Interface = new Interface(ISwapRouter.abi)\n\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  /**\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trade to produce call parameters for\n   * @param options options for the call parameters\n   */\n  public static swapCallParameters(\n    trades: Trade<Currency, Currency, TradeType> | Trade<Currency, Currency, TradeType>[],\n    options: SwapOptionsNaka\n  ): MethodParameters {\n    if (!Array.isArray(trades)) {\n      trades = [trades]\n    }\n    const sampleTrade = trades[0]\n    const tokenIn = sampleTrade.inputAmount.currency.wrapped\n    const tokenOut = sampleTrade.outputAmount.currency.wrapped\n    // All trades should have the same starting and ending token.\n    invariant(\n      trades.every(trade => trade.inputAmount.currency.wrapped.equals(tokenIn)),\n      'TOKEN_IN_DIFF'\n    )\n    invariant(\n      trades.every(trade => trade.outputAmount.currency.wrapped.equals(tokenOut)),\n      'TOKEN_OUT_DIFF'\n    )\n\n    const calldatas: string[] = []\n\n    const ZERO_IN: CurrencyAmount<Currency> = CurrencyAmount.fromRawAmount(trades[0].inputAmount.currency, 0)\n    const ZERO_OUT: CurrencyAmount<Currency> = CurrencyAmount.fromRawAmount(trades[0].outputAmount.currency, 0)\n\n    const totalAmountOut: CurrencyAmount<Currency> = trades.reduce(\n      (sum, trade) => sum.add(trade.minimumAmountOut(options.slippageTolerance)),\n      ZERO_OUT\n    )\n\n    // flag for whether a refund needs to happen\n    const mustRefund = (sampleTrade.inputAmount.currency.isNative ||  sampleTrade.inputAmount.currency.address.toLowerCase() == CurrentConfig.TC_CONTRACT_ADDRESS.toLowerCase()) && sampleTrade.tradeType === TradeType.EXACT_OUTPUT\n    const inputIsNative = sampleTrade.inputAmount.currency.isNative ||  sampleTrade.inputAmount.currency.address.toLowerCase() == CurrentConfig.TC_CONTRACT_ADDRESS.toLowerCase()\n    // flags for whether funds should be send first to the router\n    const outputIsNative = sampleTrade.outputAmount.currency.isNative ||  sampleTrade.outputAmount.currency.address.toLowerCase() == CurrentConfig.TC_CONTRACT_ADDRESS.toLowerCase()\n    const routerMustCustody = outputIsNative || !!options.fee\n\n    const totalValue: CurrencyAmount<Currency> = inputIsNative\n      ? trades.reduce((sum, trade) => sum.add(trade.maximumAmountIn(options.slippageTolerance)), ZERO_IN)\n      : ZERO_IN\n\n    // encode permit if necessary\n    if (options.inputTokenPermit) {\n      invariant(sampleTrade.inputAmount.currency.isToken, 'NON_TOKEN_PERMIT')\n      calldatas.push(SelfPermit.encodePermit(sampleTrade.inputAmount.currency, options.inputTokenPermit))\n    }\n\n    const recipient: string = validateAndParseAddress(options.recipient)\n    const deadline = toHex(options.deadline)\n\n    for (const trade of trades) {\n      for (const { route, inputAmount, outputAmount } of trade.swaps) {\n        const amountIn: string = toHex(trade.maximumAmountIn(options.slippageTolerance, inputAmount).quotient)\n        const amountOut: string = toHex(trade.minimumAmountOut(options.slippageTolerance, outputAmount).quotient)\n\n        // flag for whether the trade is single hop or not\n        const singleHop = route.pools.length === 1\n        if (singleHop) {\n          if (trade.tradeType === TradeType.EXACT_INPUT) {\n            const exactInputSingleParams = {\n              tokenIn: route.tokenPath[0].address,\n              tokenOut: route.tokenPath[1].address,\n              fee: route.pools[0].fee,\n              recipient: routerMustCustody ? ADDRESS_ZERO : recipient,\n              deadline,\n              amountIn,\n              amountOutMinimum: amountOut,\n              sqrtPriceLimitX96: toHex(options.sqrtPriceLimitX96 ?? 0),\n              useDefiToken: options.useDefiToken\n            }\n\n            calldatas.push(SwapRouterNaka.INTERFACE.encodeFunctionData('exactInputSingle', [exactInputSingleParams]))\n          } else {\n            const exactOutputSingleParams = {\n              tokenIn: route.tokenPath[0].address,\n              tokenOut: route.tokenPath[1].address,\n              fee: route.pools[0].fee,\n              recipient: routerMustCustody ? ADDRESS_ZERO : recipient,\n              deadline,\n              amountOut,\n              amountInMaximum: amountIn,\n              sqrtPriceLimitX96: toHex(options.sqrtPriceLimitX96 ?? 0),\n              useDefiToken: options.useDefiToken\n            }\n\n            calldatas.push(SwapRouterNaka.INTERFACE.encodeFunctionData('exactOutputSingle', [exactOutputSingleParams]))\n          }\n        } else {\n          invariant(options.sqrtPriceLimitX96 === undefined, 'MULTIHOP_PRICE_LIMIT')\n\n          const path: string = encodeRouteToPath(route, trade.tradeType === TradeType.EXACT_OUTPUT)\n\n          if (trade.tradeType === TradeType.EXACT_INPUT) {\n            const exactInputParams = {\n              path,\n              recipient: routerMustCustody ? ADDRESS_ZERO : recipient,\n              deadline,\n              amountIn,\n              amountOutMinimum: amountOut,\n              useDefiToken: options.useDefiToken\n            }\n\n            calldatas.push(SwapRouterNaka.INTERFACE.encodeFunctionData('exactInput', [exactInputParams]))\n          } else {\n            const exactOutputParams = {\n              path,\n              recipient: routerMustCustody ? ADDRESS_ZERO : recipient,\n              deadline,\n              amountOut,\n              amountInMaximum: amountIn,\n              useDefiToken: options.useDefiToken\n            }\n            calldatas.push(SwapRouterNaka.INTERFACE.encodeFunctionData('exactOutput', [exactOutputParams]))\n          }\n        }\n      }\n    }\n\n    // unwrap\n    if (routerMustCustody) {\n      if (!!options.fee) {\n        if (outputIsNative) {\n          calldatas.push(PaymentsNaka.encodeUnwrapWETH9(totalAmountOut.quotient, recipient, options.fee))\n        } else {\n          calldatas.push(\n              PaymentsNaka.encodeSweepToken(\n              sampleTrade.outputAmount.currency.wrapped,\n              totalAmountOut.quotient,\n              recipient,\n              options.fee\n            )\n          )\n        }\n      } else {\n        calldatas.push(PaymentsNaka.encodeUnwrapWETH9(totalAmountOut.quotient, recipient))\n      }\n    }\n\n    // refund\n    if (mustRefund) {\n      calldatas.push(PaymentsNaka.encodeRefundETH())\n    }\n\n    return {\n      calldata: Multicall.encodeMulticall(calldatas),\n      value: toHex(totalValue.quotient)\n    }\n  }\n}\n","import {ethers} from 'ethers'\nimport {SwapOptions, SwapRouter} from './entities/swapRouter'\nimport {SwapOptionsNaka, SwapRouterNaka} from './entities/swapRouterNaka'\nimport {Percent} from './entities/fractions/percent'\nimport {ERC20_ABI, TOKEN_AMOUNT_TO_APPROVE_FOR_TRANSFER, TradeType} from './constants'\nimport {Token} from './entities/token'\nimport {Trade} from './entities/trade'\nimport {CurrencyAmount} from './entities/fractions/currencyAmount'\nimport {Route} from './entities/route'\nimport JSBI from 'jsbi'\nimport {encodePath, getPoolInfoByToken} from './poolinfo'\n//import queryString from 'query-string';\nimport {isEmpty, random} from 'lodash';\nimport camelCase from 'lodash/camelCase'\nimport {CurrentConfig, CurrentWallet, tokenSwap, WalletType} from './config'\n\nimport {\n  geSignerAddress,\n  getProvider,\n  getWalletAddress,\n  sendTransaction,\n  sendTransactionGetReceipt,\n  TransactionState\n} from './providers'\nimport {getCurrencyApproveRouter} from './wallet'\nimport {fromReadableAmount} from './utils1'\nimport QuoterV2ABI from \"./QuoterV2.json\";\nimport QuoterV2ABINaka from \"./QuoterV2Naka.json\";\nimport axios from 'axios';\nimport {IToken} from './interfaces/token'\n\n\nexport interface IPagingParams {\n  limit?: number;\n  page?: number;\n  is_test?: string;\n  network?: string;\n}\nexport interface IListTokenParams {\n  is_test?: string;\n  from_token?: string;\n  network?: string\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const camelCaseKeys = (obj: any): any => {\n  if (Boolean(obj) && !isEmpty(obj) && Array.isArray(obj)) {\n    return obj.map((v) => camelCaseKeys(v));\n  }\n  if (Boolean(obj) && obj !== null && obj.constructor === Object) {\n    return Object.keys(obj).reduce(\n        (result, key) => ({\n          ...result,\n          [camelCase(key)]: camelCaseKeys(obj[key]),\n        }),\n        {},\n    );\n  }\n  return obj;\n};\n\n\nexport const swrFetcher = async (url: string, options: any) => {\n  const { method, data, ...rest } = options;\n\n  try {\n    const response = await axios.request({ url, method, data, ...rest });\n\n    return camelCaseKeys(response?.data?.data || response?.data?.result);\n  } catch (error) {\n    throw new Error( 'Something went wrong');\n  }\n};\n\n\nexport async function getListRoute(from:string,to:string): Promise<any[]>{\n  let listrs =[]\n  try {\n    const res = await fetch(\n        CurrentConfig.API_ROOT+`/api/swap/token/route/v2?network=${CurrentConfig.chainName}&from_token=`+from+'&to_token='+to,\n    ).then((res:any) => {\n      return res.json();\n    });\n    for(let index = 0; index<res.data.length; index++)\n    {\n      listrs.push(res.data[index])\n    }\n  } catch (error) {\n\n  } finally {\n\n  }\n  return listrs\n}\n\nexport const getSwapTokensV1 = async (\n    params: any,\n): Promise<IToken[]> => {\n  const qs = '?' + new URLSearchParams(params).toString();\n\n  return swrFetcher(`${CurrentConfig.API_ROOT}/api/swap/token/list/v1${qs}`, {\n    method: 'GET',\n    error: 'Fail to get tokens data',\n  });\n};\n\nexport interface ISwapRouteParams {\n  from_token: string;\n  to_token: string;\n  network?: string\n}\n\nexport const getSwapRoutesV2 = async (params: any) => {\n  const qs = '?' + new URLSearchParams(params).toString();\n  return swrFetcher(`${CurrentConfig.API_ROOT}/api/swap/token/route/v2${qs}`, {\n    method: 'GET',\n    error: 'Fail to get route',\n  });\n};\n\n\nlet listToken:any[] = [\n]\nexport function  gettokenIndex(listToken :any[],address:string) {\n  let position = -1\n  for(let index = 0; index<listToken.length; index++) {\n    if(listToken[index].address.toLowerCase()==address.toLowerCase())\n    {\n      position = index\n    }\n  }\n  return position\n}\n\n\nexport type TokenTrade = Trade<Token, Token, TradeType>\nexport const reCheckRouteInSlippage= async function(amountIn: any, route: any, slippage: number, maxSlippage: number, oldNumber: number): Promise<any[]> {\n  const provider = getProvider()\n  if (!provider) {\n    throw new Error('No provider')\n  }\n  try {\n    const addresses = route?.pathTokens?.map((token: IToken) => token.address);\n    const fees = route?.pathPairs?.map((pair: any) => Number(pair.fee));\n    try {\n\n      const quoteContract = new ethers.Contract(\n            CurrentConfig.QUOTER_CONTRACT_ADDRESS,\n            QuoterV2ABI.abi,\n            provider\n        )\n      const transaction = await quoteContract\n          .connect(provider)\n          .callStatic\n          .quoteExactInput(\n              encodePath(addresses, fees),\n              ethers.utils.parseEther(amountIn.toString())\n          );\n     const out = Number(transaction.amountOut.toString());\n     if(out<oldNumber*(1.0-slippage/10000))\n     {\n       if(out>=oldNumber*(1.0-maxSlippage/10000)) {\n         let  listPools:any[] =[]\n         for (var pair of route.pathPairs){\n           const index0 = gettokenIndex(route.pathTokens,pair.token0)\n           const token0 = new Token(\n               1,\n               route.pathTokens[index0].address,\n               Number(route.pathTokens[index0].decimal),\n               route.pathTokens[index0].symbol,\n               route.pathTokens[index0].name)\n           const index1 = gettokenIndex(route.pathTokens,pair.token1)\n           const token1 = new Token(\n               1,\n               route.pathTokens[index1].address,\n               Number(route.pathTokens[index1].decimal),\n               route.pathTokens[index1].symbol,\n               route.pathTokens[index1].name)\n           const p =await  getPoolInfoByToken( token0, token1,parseInt(pair.fee))\n           listPools.push(p)\n         }\n\n         const swapRout1 = new Route(\n             listPools,\n             tokenSwap.in,\n             tokenSwap.out\n         )\n\n         const uncheckedTrade = Trade.createUncheckedTrade({\n           route: swapRout1,\n           inputAmount: CurrencyAmount.fromRawAmount(\n               tokenSwap.in,\n               fromReadableAmount(\n                   tokenSwap.amountIn,\n                   tokenSwap.in.decimals\n               ).toString()\n           ),\n           outputAmount: CurrencyAmount.fromRawAmount(\n               tokenSwap.out,\n               JSBI.BigInt(out)\n           ),\n           tradeType: TradeType.EXACT_INPUT,\n         })\n         return [true,uncheckedTrade]\n       }\n       return [true]\n     }else {\n       return [false]\n     }\n    } catch (e) {\n      console.log(\"reCheckRouteIn e\",e)\n      return [true]\n    }\n  } catch (error) {\n    console.log(\"reCheckRouteIn all\",error)\n    return [true]\n  } finally {\n  }\n}\nexport const reCheckRouteOutSlippage= async function(amountOut: any, route: any, slippage: number, maxSlippage: number, oldNumber: number): Promise<any[]> {\n  const provider = getProvider()\n  if (!provider) {\n    throw new Error('No provider')\n  }\n  try {\n    let addresses = route?.pathTokens?.map((token: IToken) => token.address);\n    let fees = route?.pathPairs?.map((pair: any) => Number(pair.fee));\n    addresses = addresses.reverse()\n    fees = fees.reverse()\n    try {\n      const quoteContract = new ethers.Contract(\n          CurrentConfig.QUOTER_CONTRACT_ADDRESS,\n          QuoterV2ABI.abi,\n          provider\n      )\n      const transaction = await quoteContract\n          .connect(provider)\n          .callStatic\n          .quoteExactOutput(\n              encodePath(addresses,fees),\n              ethers.utils.parseEther(amountOut.toString())\n          );\n      const input = Number(transaction.amountIn.toString())\n      if(input>oldNumber*1.0/(1.0-slippage/10000))\n      {\n        if(input<=oldNumber/(1.0-maxSlippage/10000)) {\n          let  listPools:any[] =[]\n          for (var pair of route.pathPairs){\n            const index0 = gettokenIndex(route.pathTokens,pair.token0)\n            const token0 = new Token(\n                1,\n                route.pathTokens[index0].address,\n                Number(route.pathTokens[index0].decimal),\n                route.pathTokens[index0].symbol,\n                route.pathTokens[index0].name)\n            const index1 = gettokenIndex(route.pathTokens,pair.token1)\n            const token1 = new Token(\n                1,\n                route.pathTokens[index1].address,\n                Number(route.pathTokens[index1].decimal),\n                route.pathTokens[index1].symbol,\n                route.pathTokens[index1].name)\n            const p =await  getPoolInfoByToken( token0, token1,parseInt(pair.fee))\n            listPools.push(p)\n          }\n\n          const swapRout1 = new Route(\n              listPools,\n              tokenSwap.in,\n              tokenSwap.out\n          )\n\n          const uncheckedTrade = Trade.createUncheckedTrade({\n            route: swapRout1,\n            inputAmount: CurrencyAmount.fromRawAmount(\n                tokenSwap.in,\n                JSBI.BigInt(input),\n            ),\n            outputAmount: CurrencyAmount.fromRawAmount(\n                tokenSwap.out,\n                fromReadableAmount(\n                    amountOut,\n                    tokenSwap.in.decimals\n                ).toString()\n            ),\n            tradeType: TradeType.EXACT_OUTPUT,\n          })\n          return [true,uncheckedTrade]\n        }\n        return [true]\n      }else {\n        return [false]\n      }\n    } catch (e) {\n      console.log(\"reCheckRouteout e\",e)\n      return [true]\n    }\n  } catch (error) {\n    console.log(\"reCheckRouteout all\",error)\n    return [true]\n  } finally {\n  }\n}\n\n// Trading Functions\n\nexport const getBestRouteExactIn= async function(amountIn: any, swapRoutes: any[] = [], listToken1: IToken[] = []): Promise<any[]> {\n  try {\n  const provider = getProvider()\n  if (!provider) {\n    throw new Error('No provider')\n  }\n    const quoteContract = new ethers.Contract(\n         CurrentConfig.QUOTER_CONTRACT_ADDRESS,\n         QuoterV2ABI.abi,\n         provider\n     )\n  let  listPools:any[] =[]\n\n\n  if( swapRoutes.length==0)\n  {\n    const params: ISwapRouteParams = {\n      from_token: tokenSwap.in.address,\n      to_token: tokenSwap.out.address,\n      network: CurrentConfig.network\n    };\n    swapRoutes = await getSwapRoutesV2(params);\n  }\n  if( listToken1.length==0)\n  {\n    /*\n    const res = await getSwapTokensV1({\n      limit: 500,\n      page: 1,\n      is_test: CurrentConfig.env == Environment.TESTNET ? '1' : '',\n      network:  CurrentConfig.chainName || \"nos\",\n    });\n\n    listToken1 = res ? camelCaseKeys(res) : [];\n   */\n  }\n\n    let swapRoutes1 = []\n    for (var route of swapRoutes) {\n      if(route?.pathPairs.length>0 && (Number(route?.pathPairs[0].reserve0)>0.000001 || Number(route?.pathPairs[0].reserve1)>0.000001))\n      {\n        swapRoutes1.push(route)\n      }\n    }\n\n    const promises = swapRoutes1.map(async (route: any) => {\n    const addresses = route?.pathTokens?.map((token: IToken) => token.address);\n    const fees = route?.pathPairs?.map((pair: any) => Number(pair.fee));\n    try {\n      const transaction = await quoteContract\n          .connect(provider)\n          .callStatic\n          .quoteExactInput(\n              encodePath(addresses, fees),\n              ethers.utils.parseEther(amountIn.toString())\n          );\n      return Number(transaction.amountOut.toString());\n\n    } catch (e) {\n      console.log(\"quoteExactIn error route,addresses,fees, encodePath(addresses, fees),ethers.utils.parseEther(amountIn.toString()),e\",route,addresses,fees, encodePath(addresses, fees),ethers.utils.parseEther(amountIn.toString()),e)\n    }\n    return 0\n  });\n\n\n  const res:number[] = await Promise.all(promises);\n  console.log(\"res\",res)\n  const result = Math.max(...res);\n    if(result==0){\n      return [-1]\n    }\n  const indexBestRoute = res.indexOf(result);\n  const bestRoute = swapRoutes1[indexBestRoute];\n  for (var pair of bestRoute.pathPairs) {\n    const index0 = gettokenIndex(bestRoute.pathTokens,pair.token0)\n    const token0 = new Token(\n        1,\n        bestRoute.pathTokens[index0].address,\n       Number(bestRoute.pathTokens[index0].decimal),\n        bestRoute.pathTokens[index0].symbol,\n        bestRoute.pathTokens[index0].name)\n    const index1 = gettokenIndex(bestRoute.pathTokens,pair.token1)\n    const token1 = new Token(\n        1,\n        bestRoute.pathTokens[index1].address,\n        Number(bestRoute.pathTokens[index1].decimal),\n        bestRoute.pathTokens[index1].symbol,\n        bestRoute.pathTokens[index1].name)\n    const p =await  getPoolInfoByToken( token0, token1,parseInt(pair.fee))\n    listPools.push(p)\n  }\n\n  const swapRout1 = new Route(\n      listPools,\n      tokenSwap.in,\n      tokenSwap.out\n  )\n\n  const uncheckedTrade = Trade.createUncheckedTrade({\n    route: swapRout1,\n    inputAmount: CurrencyAmount.fromRawAmount(\n        tokenSwap.in,\n        fromReadableAmount(\n            tokenSwap.amountIn,\n            tokenSwap.in.decimals\n        ).toString()\n    ),\n    outputAmount: CurrencyAmount.fromRawAmount(\n        tokenSwap.out,\n        JSBI.BigInt(result)\n    ),\n    tradeType: TradeType.EXACT_INPUT,\n  })\n\n  return [result,bestRoute,uncheckedTrade,result.toLocaleString('fullwide', {useGrouping:false}) ]\n  } catch (error) {\n    console.log(\"quoteExactInput Exception all\",error)\n  } finally {\n\n  }\n  return [-1]\n\n}\n\nexport const getBestRouteExactOut= async function(amountOut: any, swapRoutes: any[] = [], listToken1: IToken[] = []): Promise<any[]> {\n  try {\n\n    const provider = getProvider()\n    if (!provider) {\n      throw new Error('No provider')\n    }\n    const quoteContract = new ethers.Contract(\n          CurrentConfig.QUOTER_CONTRACT_ADDRESS,\n          QuoterV2ABI.abi,\n          provider\n      )\n    let  listPools:any[] =[]\n\n\n    if( swapRoutes.length==0)\n    {\n      const params: ISwapRouteParams = {\n        from_token: tokenSwap.in.address,\n        to_token: tokenSwap.out.address,\n        network: CurrentConfig.network\n      };\n      swapRoutes = await getSwapRoutesV2(params);\n    }\n\n    if(listToken1.length==0)\n    {\n      /*\n      const res = await getSwapTokensV1({\n        limit: 500,\n        page: 1,\n        is_test: CurrentConfig.env == Environment.TESTNET ? '1' : '',\n        network:  CurrentConfig.chainName || \"nos\",\n      });\n\n      listToken1 = res ? camelCaseKeys(res) : [];\n       */\n\n    }\n    let swapRoutes1 = []\n    for (let route of swapRoutes) {\n      if(route?.pathPairs.length>0 && (Number(route?.pathPairs[0].reserve0)>0.000001 || Number(route?.pathPairs[0].reserve1)>0.000001))\n      {\n        swapRoutes1.push(route)\n      }\n    }\n\n    const promises = swapRoutes1.map(async (route: any) => {\n      let addresses = route?.pathTokens?.map((token: IToken) => token.address);\n      let fees = route?.pathPairs?.map((pair: any) => Number(pair.fee));\n      addresses = addresses.reverse()\n      fees = fees.reverse()\n      try {\n        const transaction = await quoteContract\n            .connect(provider)\n            .callStatic\n            .quoteExactOutput(\n                encodePath(addresses,fees),\n                ethers.utils.parseEther(amountOut.toString())\n            );\n\n        return Number(transaction.amountIn.toString());\n\n      } catch (e) {\n        console.log(\"quoteExactOutput error route,addresses,fees, encodePath(addresses, fees),ethers.utils.parseEther(amountIn.toString()),e\",route,addresses,fees, encodePath(addresses, fees),ethers.utils.parseEther(amountOut.toString()),e)\n      }\n      return 0\n    });\n    const res:number[] = await Promise.all(promises);\n    let returnIndex = -1\n    res.forEach(function (value, index,arr) {\n      if(value>0&&returnIndex==-1){\n        returnIndex =index\n      }else if(value>0&&returnIndex>=0 &&value<arr[returnIndex])   {\n        returnIndex =index\n      }\n    });\n    if (returnIndex == -1){\n      return [returnIndex]\n    }\n    console.log(\"res\",res)\n    const result = res[returnIndex];\n    const indexBestRoute = returnIndex;\n    const bestRoute = swapRoutes1[indexBestRoute];\n\n    for (let pair of bestRoute.pathPairs) {\n\n      const index0 = gettokenIndex(bestRoute.pathTokens,pair.token0)\n      const token0 = new Token(\n          1,\n          bestRoute.pathTokens[index0].address,\n          Number(bestRoute.pathTokens[index0].decimal),\n          bestRoute.pathTokens[index0].symbol,\n          bestRoute.pathTokens[index0].name)\n      const index1 = gettokenIndex(bestRoute.pathTokens,pair.token1)\n      const token1 = new Token(\n          1,\n          bestRoute.pathTokens[index1].address,\n          Number(bestRoute.pathTokens[index1].decimal),\n          bestRoute.pathTokens[index1].symbol,\n          bestRoute.pathTokens[index1].name)\n      const p =await  getPoolInfoByToken(token0,token1,parseInt(pair.fee))\n      listPools.push(p)\n    }\n\n    const swapRout1 = new Route(\n        listPools,\n        tokenSwap.in,\n        tokenSwap.out\n    )\n\n\n    const uncheckedTrade = Trade.createUncheckedTrade({\n      route: swapRout1,\n      inputAmount: CurrencyAmount.fromRawAmount(\n          tokenSwap.in,\n          JSBI.BigInt(result),\n      ),\n      outputAmount: CurrencyAmount.fromRawAmount(\n          tokenSwap.out,\n          fromReadableAmount(\n              amountOut,\n              tokenSwap.in.decimals\n          ).toString()\n      ),\n      tradeType: TradeType.EXACT_OUTPUT,\n    })\n\n    return [result,bestRoute,uncheckedTrade]\n\n  } catch (error) {\n    console.log(\"getBestRouteExactOut all\",error)\n  } finally {\n  }\n  return [-1]\n}\n\n\nexport const getBestRouteExactInNaka= async function(amountIn: any,useDefiToken:any,\n                                                     swapRoutes: any[] = []): Promise<any[]> {\n  try {\n    const provider = getProvider()\n    if (!provider) {\n      throw new Error('No provider')\n    }\n    const quoteContract = new ethers.Contract(\n        CurrentConfig.QUOTER_CONTRACT_ADDRESS,\n        QuoterV2ABINaka.abi,\n        provider\n    )\n    let  listPools:any[] =[]\n    if( swapRoutes.length==0)\n    {\n      const params: ISwapRouteParams = {\n        from_token: tokenSwap.in.address,\n        to_token: tokenSwap.out.address,\n        network: CurrentConfig.network\n      };\n      swapRoutes = await getSwapRoutesV2(params);\n    }\n\n\n\n    let swapRoutes1 = []\n    for (var route of swapRoutes) {\n     // console.log(\"route swapRoutes\",route)\n      if(route?.pathPairs.length>0 && (Number(route?.pathPairs[0].reserve0)>0.000001 || Number(route?.pathPairs[0].reserve1)>0.000001))\n      {\n        swapRoutes1.push(route)\n      }\n    }\n\n    const promises = swapRoutes1.map(async (route: any) => {\n      const addresses = route?.pathTokens?.map((token: IToken) => token.address);\n      const fees = route?.pathPairs?.map((pair: any) => Number(pair.fee));\n      try {\n        const transaction = await quoteContract\n            .connect(provider)\n            .callStatic\n            .quoteExactInput(\n                encodePath(addresses, fees),\n                ethers.utils.parseEther(amountIn.toString()),\n                useDefiToken\n            );\n        return [Number(transaction.amountOut.toString()),Number(transaction.amountDefi.toString())];\n\n      } catch (e) {\n        console.log(\"quoteExactIn error route,addresses,fees, encodePath(addresses, fees),ethers.utils.parseEther(amountIn.toString()),e\",route,addresses,fees, encodePath(addresses, fees),ethers.utils.parseEther(amountIn.toString()),e)\n      }\n      return [0,0]\n    });\n\n\n    const res = await Promise.all(promises);\n   // console.log(\"result res\",res)\n    //const result = Math.max(...res[0]);\n    let  result = 0\n    let indexBestRoute = -1;\n    for (let idx = 0;idx<res.length;idx++){\n      if(res[idx][0]> result){\n        indexBestRoute = idx;\n        result = res[idx][0]\n      }\n    }\n    if(result==0){\n      return [-1]\n    }\n    const bestRoute = swapRoutes1[indexBestRoute];\n    for (var pair of bestRoute.pathPairs) {\n      const index0 = gettokenIndex(bestRoute.pathTokens,pair.token0)\n      const token0 = new Token(\n          1,\n          bestRoute.pathTokens[index0].address,\n          Number(bestRoute.pathTokens[index0].decimal),\n          bestRoute.pathTokens[index0].symbol,\n          bestRoute.pathTokens[index0].name)\n      const index1 = gettokenIndex(bestRoute.pathTokens,pair.token1)\n      const token1 = new Token(\n          1,\n          bestRoute.pathTokens[index1].address,\n          Number(bestRoute.pathTokens[index1].decimal),\n          bestRoute.pathTokens[index1].symbol,\n          bestRoute.pathTokens[index1].name)\n      const p =await  getPoolInfoByToken( token0, token1,parseInt(pair.fee))\n      listPools.push(p)\n    }\n\n    const swapRout1 = new Route(\n        listPools,\n        tokenSwap.in,\n        tokenSwap.out\n    )\n\n    const uncheckedTrade = Trade.createUncheckedTrade({\n      route: swapRout1,\n      inputAmount: CurrencyAmount.fromRawAmount(\n          tokenSwap.in,\n          fromReadableAmount(\n              tokenSwap.amountIn,\n              tokenSwap.in.decimals\n          ).toString()\n      ),\n      outputAmount: CurrencyAmount.fromRawAmount(\n          tokenSwap.out,\n          JSBI.BigInt(result)\n      ),\n      tradeType: TradeType.EXACT_INPUT,\n    })\n   // console.log(\"result,bestRoute,uncheckedTrade,res[indexBestRoute][1] ]\",result,bestRoute,uncheckedTrade,res[indexBestRoute][1])\n\n    return [result,bestRoute,uncheckedTrade,res[indexBestRoute][1] ]\n  } catch (error) {\n    console.log(\"quoteExactInput Exception all\",error)\n  } finally {\n\n  }\n  return [-1]\n\n}\n\nexport const getBestRouteExactOutNaka= async function(amountOut: any,useDefiToken:any, swapRoutes: any[] = []): Promise<any[]> {\n  try {\n\n    const provider = getProvider()\n    if (!provider) {\n      throw new Error('No provider')\n    }\n    const quoteContract = new ethers.Contract(\n        CurrentConfig.QUOTER_CONTRACT_ADDRESS,\n        QuoterV2ABINaka.abi,\n        provider\n    )\n    let  listPools:any[] =[]\n\n\n    if( swapRoutes.length==0)\n    {\n      const params: ISwapRouteParams = {\n        from_token: tokenSwap.in.address,\n        to_token: tokenSwap.out.address,\n        network: CurrentConfig.network\n      };\n      swapRoutes = await getSwapRoutesV2(params);\n    }\n\n    let swapRoutes1 = []\n    for (let route of swapRoutes) {\n      if(route?.pathPairs.length>0 && (Number(route?.pathPairs[0].reserve0)>0.000001 || Number(route?.pathPairs[0].reserve1)>0.000001))\n      {\n        swapRoutes1.push(route)\n      }\n    }\n\n    const promises = swapRoutes1.map(async (route: any) => {\n      let addresses = route?.pathTokens?.map((token: IToken) => token.address);\n      let fees = route?.pathPairs?.map((pair: any) => Number(pair.fee));\n      addresses = addresses.reverse()\n      fees = fees.reverse()\n      try {\n       // console.log(\"addresses,fees,amountOut,useDefiToken\",addresses,fees,amountOut,useDefiToken)\n        const transaction = await quoteContract\n            .connect(provider)\n            .callStatic\n            .quoteExactOutput(\n                encodePath(addresses,fees),\n                ethers.utils.parseEther(amountOut.toString()),\n                useDefiToken\n            );\n\n        return [Number(transaction.amountIn.toString()),Number(transaction.amountDefi.toString())];\n\n      } catch (e) {\n        console.log(\"quoteExactOutput error route,addresses,fees, encodePath(addresses, fees),ethers.utils.parseEther(amountIn.toString()),e\",route,addresses,fees, encodePath(addresses, fees),ethers.utils.parseEther(amountOut.toString()),e)\n      }\n      return [0,0]\n    });\n    const res = await Promise.all(promises);\n    let returnIndex = -1\n    res.forEach(function (value, index,arr) {\n      if(value[0]>0&&returnIndex==-1){\n        returnIndex =index\n      }else if(value[0]>0&&returnIndex>=0 &&value[0]<arr[returnIndex][0])   {\n        returnIndex =index\n      }\n    });\n    if (returnIndex == -1){\n      return [returnIndex]\n    }\n    const result = res[returnIndex];\n    const indexBestRoute = returnIndex;\n    const bestRoute = swapRoutes1[indexBestRoute];\n\n    for (let pair of bestRoute.pathPairs) {\n\n      const index0 = gettokenIndex(bestRoute.pathTokens,pair.token0)\n      const token0 = new Token(\n          1,\n          bestRoute.pathTokens[index0].address,\n          Number(bestRoute.pathTokens[index0].decimal),\n          bestRoute.pathTokens[index0].symbol,\n          bestRoute.pathTokens[index0].name)\n      const index1 = gettokenIndex(bestRoute.pathTokens,pair.token1)\n      const token1 = new Token(\n          1,\n          bestRoute.pathTokens[index1].address,\n          Number(bestRoute.pathTokens[index1].decimal),\n          bestRoute.pathTokens[index1].symbol,\n          bestRoute.pathTokens[index1].name)\n      const p =await  getPoolInfoByToken(token0,token1,parseInt(pair.fee))\n      listPools.push(p)\n    }\n\n    const swapRout1 = new Route(\n        listPools,\n        tokenSwap.in,\n        tokenSwap.out\n    )\n\n\n    const uncheckedTrade = Trade.createUncheckedTrade({\n      route: swapRout1,\n      inputAmount: CurrencyAmount.fromRawAmount(\n          tokenSwap.in,\n          JSBI.BigInt(result[0]),\n      ),\n      outputAmount: CurrencyAmount.fromRawAmount(\n          tokenSwap.out,\n          fromReadableAmount(\n              amountOut,\n              tokenSwap.in.decimals\n          ).toString()\n      ),\n      tradeType: TradeType.EXACT_OUTPUT,\n    })\n\n    return [result[0],bestRoute,uncheckedTrade,result[1]]\n\n  } catch (error) {\n    console.log(\"getBestRouteExactOut all\",error)\n  } finally {\n  }\n  return [-1]\n}\n\nexport async function executeTradeSlippageNaka(\n    trade: TokenTrade,\n    slippage: number,\n    useDefiToken: boolean,\n    recipient:any = null,\n    scanTX:any = true,\n): Promise<any> {\n\n  let walletAddress = getWalletAddress()\n  if (!walletAddress && CurrentWallet.type === WalletType.EXTENSION){\n    walletAddress =  await geSignerAddress()\n  }\n  if (!walletAddress ) {\n    throw new Error('Cannot execute a trade without a connected wallet')\n  }\n\n  recipient =recipient!=null&&recipient!=\"\"?recipient:walletAddress\n\n  const options: SwapOptionsNaka = {\n    slippageTolerance: new Percent(slippage, 10_000), // 50 bips, or 0.50%\n    deadline: Math.floor(Date.now() / 1000) + 60 * 20, // 20 minutes from the current Unix time\n    recipient: recipient,\n    useDefiToken:useDefiToken,\n  }\n  const methodParameters = SwapRouterNaka.swapCallParameters([trade], options)\n  const tx = {\n    data: methodParameters.calldata,\n    to: CurrentConfig.SWAP_ROUTER_ADDRESS,\n    value: methodParameters.value,\n    from: walletAddress,\n    //maxFeePerGas: MAX_FEE_PER_GAS.toString(),\n    // maxPriorityFeePerGas: MAX_PRIORITY_FEE_PER_GAS.toString(),\n    //  gasPrice: getGasFee(),\n    // gasLimit: '1000000',\n  }\n  const res = await sendTransactionGetReceipt(tx,scanTX)\n\n  return res\n}\n\nexport async function createTrade(): Promise<TokenTrade> {\n  const provider = getProvider()\n  if (!provider) {\n    throw new Error('No provider')\n  }\n  const quoteContract = new ethers.Contract(\n        CurrentConfig.QUOTER_CONTRACT_ADDRESS,\n        QuoterV2ABI.abi,\n        provider\n    )\n  const swapRoutes =await  getListRoute(tokenSwap.in.address, tokenSwap.out.address)\n  let  listPools:any[] =[]\n\n  const promises = swapRoutes.map(async (route: any) => {\n    const addresses = route.path_tokens.map((token: any) => token['address']);\n    const fees = route.path_pairs.map((pair: any) => Number(pair.fee));\n    const transaction = await quoteContract\n        .connect(provider)\n        .callStatic\n        .quoteExactInput(\n            encodePath(addresses, fees),\n            ethers.utils.parseEther(tokenSwap.amountIn.toString())\n        );\n\n    return Number(transaction.amountOut.toString());\n  });\n\n  const res = await Promise.all(promises);\n  const result = Math.max(...res);\n  const indexBestRoute = res.indexOf(result);\n  const bestRoute = swapRoutes[indexBestRoute];\n\n  for (var pair of bestRoute.path_pairs) {\n\n    const index0 = gettokenIndex(listToken,pair.token0)\n    const token0 = new Token(\n        1,\n        listToken[index0].address,\n        listToken[index0].decimal,\n        listToken[index0].symbol,\n        listToken[index0].symbol)\n    const index1 = gettokenIndex(listToken,pair.token1)\n    const token1 = new Token(\n        1,\n        listToken[index1].address,\n        listToken[index1].decimal,\n        listToken[index1].symbol,\n        listToken[index1].symbol)\n    const p =await  getPoolInfoByToken( token0, token1,parseInt(pair.fee))\n    listPools.push(p)\n  }\n\n  const swapRout1 = new Route(\n      listPools,\n      tokenSwap.in,\n      tokenSwap.out\n  )\n\n\n  const uncheckedTrade = Trade.createUncheckedTrade({\n    route: swapRout1,\n    inputAmount: CurrencyAmount.fromRawAmount(\n        tokenSwap.in,\n        fromReadableAmount(\n            tokenSwap.amountIn,\n            tokenSwap.in.decimals\n        ).toString()\n    ),\n    outputAmount: CurrencyAmount.fromRawAmount(\n        tokenSwap.out,\n        JSBI.BigInt(result)\n    ),\n    tradeType: TradeType.EXACT_INPUT,\n  })\n\n  return uncheckedTrade\n}\n\nexport async function executeTradeAftercheckSlippage(\n    type:TradeType,\n    oldAmout: any,\n    expectAmout: any,\n    bestRoute: any,\n    trade: TokenTrade,\n    slippage: number,\n    maxSlippage: number,\n    recipient:any = null,\n    scanTX:any = true,\n): Promise<any> {\n  let newEstimate = undefined;\n  let newTrade = trade;\n  if(type == TradeType.EXACT_OUTPUT)\n  {\n    newEstimate = await reCheckRouteOutSlippage(expectAmout, bestRoute, slippage, maxSlippage, oldAmout)\n  }else {\n    newEstimate = await reCheckRouteInSlippage(expectAmout, bestRoute, slippage, maxSlippage, oldAmout)\n  }\n  if(newEstimate===[true]){\n    return [false]\n  }else if(newEstimate[0]==true && newEstimate.length==2){\n    newTrade = newEstimate[1]\n  }\n\n  let walletAddress = getWalletAddress()\n  if (!walletAddress && CurrentWallet.type === WalletType.EXTENSION){\n    walletAddress =  await geSignerAddress()\n  }\n  if (!walletAddress ) {\n    throw new Error('Cannot execute a trade without a connected wallet')\n  }\n\n  recipient =recipient!=null&&recipient!=\"\"?recipient:walletAddress\n\n  const options: SwapOptions = {\n    slippageTolerance: new Percent(slippage, 10_000), // 50 bips, or 0.50%\n    deadline: Math.floor(Date.now() / 1000) + 60 * 20, // 20 minutes from the current Unix time\n    recipient: recipient,\n  }\n  const methodParameters = SwapRouter.swapCallParameters([newTrade], options)\n  const tx = {\n    data: methodParameters.calldata,\n    to: CurrentConfig.SWAP_ROUTER_ADDRESS,\n    value: methodParameters.value,\n    from: walletAddress,\n  }\n\n  const res = await sendTransactionGetReceipt(tx,scanTX)\n  return  [true,res]\n}\n\nexport async function executeTradeSlippage(\n    trade: TokenTrade,\n    slippage: number,\n    recipient:any = null,\n    scanTX:any = true,\n): Promise<any> {\n\n  let walletAddress = getWalletAddress()\n  if (!walletAddress && CurrentWallet.type === WalletType.EXTENSION){\n    walletAddress =  await geSignerAddress()\n  }\n  if (!walletAddress ) {\n    throw new Error('Cannot execute a trade without a connected wallet')\n  }\n\n  recipient =recipient!=null&&recipient!=\"\"?recipient:walletAddress\n\n  const options: SwapOptions = {\n    slippageTolerance: new Percent(slippage, 10_000), // 50 bips, or 0.50%\n    deadline: Math.floor(Date.now() / 1000) + 60 * 20, // 20 minutes from the current Unix time\n    recipient: recipient,\n  }\n  const methodParameters = SwapRouter.swapCallParameters([trade], options)\n  const tx = {\n    data: methodParameters.calldata,\n    to: CurrentConfig.SWAP_ROUTER_ADDRESS,\n    value: methodParameters.value,\n    from: walletAddress,\n    //maxFeePerGas: MAX_FEE_PER_GAS.toString(),\n   // maxPriorityFeePerGas: MAX_PRIORITY_FEE_PER_GAS.toString(),\n  //  gasPrice: getGasFee(),\n   // gasLimit: '1000000',\n  }\n\n  const res = await sendTransactionGetReceipt(tx,scanTX)\n\n  return res\n\n}\n\nexport async function executeTrade(\n    trade: TokenTrade\n): Promise<TransactionState> {\n  const walletAddress = getWalletAddress()\n  const provider = getProvider()\n\n  if (!walletAddress || !provider) {\n    throw new Error('Cannot execute a trade without a connected wallet')\n  }\n\n/*\n\n// Give approval to the router to spend the token\n  const tokenApproval = await getTokenTransferApproval(tokenSwap.in,Number(trade.inputAmount.toExact()))\n\n// Fail if transfer approvals do not go through\n  if (tokenApproval !== TransactionState.Sent) {\n    return TransactionState.Failed\n  }\n */\n\n\n\n  const options: SwapOptions = {\n    slippageTolerance: new Percent(50, 10_000), // 50 bips, or 0.50%\n    deadline: Math.floor(Date.now() / 1000) + 60 * 20, // 20 minutes from the current Unix time\n    recipient: walletAddress,\n  }\n\n  const methodParameters = SwapRouter.swapCallParameters([trade], options)\n\n  const tx = {\n    data: methodParameters.calldata,\n    to: CurrentConfig.SWAP_ROUTER_ADDRESS,\n    value: methodParameters.value,\n    from: walletAddress,\n   // maxFeePerGas: MAX_FEE_PER_GAS,\n   // maxPriorityFeePerGas: MAX_PRIORITY_FEE_PER_GAS,\n  }\n\n  const res = await sendTransaction(tx)\n\n  return res\n}\n/*\n// Helper Quoting and Pool Functions\n\nasync function getOutputQuote(route: Route<Currency, Currency>) {\n  const provider = getProvider()\n\n  if (!provider) {\n    throw new Error('Provider required to get pool state')\n  }\n\n  const { calldata } = await SwapQuoter.quoteCallParameters(\n      route,\n      CurrencyAmount.fromRawAmount(\n          tokenSwap.in,\n          fromReadableAmount(\n              tokenSwap.amountIn,\n              tokenSwap.in.decimals\n          ).toString()\n      ),\n      TradeType.EXACT_INPUT,\n      {\n        useQuoterV2: true,\n      }\n  )\n\n  const quoteCallReturnData = await provider.call({\n    to: CurrentConfig.QUOTER_CONTRACT_ADDRESS,\n    data: calldata,\n  })\n\n  return ethers.utils.defaultAbiCoder.decode(['uint256'], quoteCallReturnData)\n}\n\n */\n\nexport function setTokens(listTk :any[]){\n  listToken =[...listTk]\n}\n\nexport async function getTokenTransferApprovalSwap(\n    token: Token\n\n): Promise<number> {\n  const provider = getProvider()\n  const walletAddress = getWalletAddress()\n  if (!provider || !walletAddress) {\n    console.log('No Provider Found')\n    return -1\n  }\n\n  return  await  getCurrencyApproveRouter(provider, walletAddress, token)\n}\n\nexport async function tokenTransferApproval(\n    token: Token,\n    amount:number = TOKEN_AMOUNT_TO_APPROVE_FOR_TRANSFER,\n\n): Promise<TransactionState> {\n  const provider = getProvider()\n  const address = getWalletAddress()\n  if (!provider || !address) {\n    console.log('No Provider Found')\n    return TransactionState.Failed\n  }\n\n  try {\n    const tokenContract = new ethers.Contract(\n        token.address,\n        ERC20_ABI,\n        provider\n    )\n\n    const transaction = await tokenContract.populateTransaction.approve(\n        CurrentConfig.SWAP_ROUTER_ADDRESS,\n        fromReadableAmount(\n            amount,\n            token.decimals\n        ).toString()\n    )\n\n    return sendTransaction({\n      ...transaction,\n      from: address,\n    })\n  } catch (e) {\n    return TransactionState.Failed\n  }\n}\n\nexport const getGasFee = async (): Promise<number> => {\n  const _rpc = CurrentConfig.rpc;\n\n  if (_rpc) {\n    const provider = new ethers.providers.JsonRpcProvider(_rpc);\n    const gasPrice = await provider.getGasPrice();\n\n    return Number(gasPrice?.toString());\n  }\n\n  return 0;\n};\n\nexport const DEFAULT_GAS_PRICE = 1e9;\nexport const getDefaultGasPrice = () => {\n  return random(35, 45) * DEFAULT_GAS_PRICE;\n};\n\n","import JSBI from 'jsbi'\n\nexport function fromReadableAmount(amount: number, decimals: number): JSBI {\n  const extraDigits = Math.pow(10, countDecimals(amount))\n  const adjustedAmount = amount * extraDigits\n  return JSBI.divide(\n    JSBI.multiply(\n      JSBI.BigInt(adjustedAmount),\n      JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(decimals))\n    ),\n    JSBI.BigInt(extraDigits)\n  )\n}\n\nexport function toReadableAmount(rawAmount: number, decimals: number): string {\n  return JSBI.divide(\n    JSBI.BigInt(rawAmount),\n    JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(decimals))\n  ).toString()\n}\n\nfunction countDecimals(x: number) {\n  if (Math.floor(x) === x) {\n    return 0\n  }\n  return x.toString().split('.')[1].length || 0\n}\n","import { BigNumber, ethers } from 'ethers'\nimport {\n  ERC20_ABI,\n  MAX_FEE_PER_GAS,\n  MAX_PRIORITY_FEE_PER_GAS,\n  NONFUNGIBLE_POSITION_MANAGER_ABI,\n} from './constants'\nimport { TOKEN_AMOUNT_TO_APPROVE_FOR_TRANSFER,MaxUint128 } from './constants'\nimport {geSignerAddress, sendTransaction, sendTransactionGetReceipt, TransactionState} from './providers'\n\nimport { Pool } from './entities/pool'\nimport { Position } from './entities/position'\nimport { nearestUsableTick } from './utils/nearestUsableTick'\nimport { Token } from './entities/token'\nimport { Percent } from './entities/fractions/percent'\nimport { CurrencyAmount } from './entities/fractions/currencyAmount'\nimport { NonfungiblePositionManager,MintOptions,AddLiquidityOptions,RemoveLiquidityOptions,CollectOptions } from './nonfungiblePositionManager'\nimport {CurrentConfig, CurrentWallet, tokenLiquidity, WalletType} from './config'\nimport { getPoolInfo} from './poolinfo'\nimport { getProvider, getWalletAddress } from './providers'\nimport { fromReadableAmount } from './conversion'\nimport {camelCaseKeys} from \"./trading\";\nimport  {ILiquidity} from './interfaces/liquidity'\nimport  {IToken} from './interfaces/token'\nimport  {IPosition} from './interfaces/position'\nimport axios from 'axios';\nimport INonfungiblePositionManager from './Nonfungible.json'\nimport IV3PoolABI from \"./IV3Pool.json\";\nimport IV3FactoryABI from \"./V3Factory.json\";\n\n const swrFetcher = async (url: string, options: any) => {\n  const { method, data, ...rest } = options;\n\n  try {\n    const response = await axios.request({ url, method, data, ...rest });\n\n    return camelCaseKeys(response?.data?.data || response?.data?.result);\n  } catch (error) {\n    throw new Error( 'Something went wrong');\n  }\n};\n\n\nexport const getListLiquidity = async (\n    address?: string\n): Promise<ILiquidity[]> => {\n  const qs = `?limit=100&network=${CurrentConfig.chainName}&page=1&address=${address}`\n  return swrFetcher(`${CurrentConfig.API_ROOT}/api/swap/pair/apr/list${qs}`, {\n    method: 'GET',\n    error: 'Fail to get list liquidity',\n  });\n};\n\n//TODO:  add type\nexport const getTokens = async (limit:any): Promise<IToken[]> => {\n  return swrFetcher(`${CurrentConfig.API_ROOT}/api/token-explorer/tokens?limit=${limit.toString()}&network=${CurrentConfig.network}&page=1`, {\n    method: 'GET',\n    error: 'Fail to get tokens data',\n  });\n};\n\nexport const getPositionDetail = async (\n    id: number\n): Promise<IPosition> => {\n  return swrFetcher(`${CurrentConfig.API_ROOT}/api/${CurrentConfig.swapApi}/pool/user-position/${id}?network=${CurrentConfig.network}`, {\n    method: 'GET',\n    error: 'Fail to get list user positions',\n  });\n};\n\n\nexport interface PositionInfo {\n  tickLower: number\n  tickUpper: number\n  liquidity: BigNumber\n  feeGrowthInside0LastX128: BigNumber\n  feeGrowthInside1LastX128: BigNumber\n  tokensOwed0: BigNumber\n  tokensOwed1: BigNumber\n}\n\n\nexport async function CollectFeeeById(\n    tokenId:any\n):Promise<TransactionState> {\n\n  let walletAddress = getWalletAddress()\n  if (!walletAddress && CurrentWallet.type === WalletType.EXTENSION){\n    walletAddress =  await geSignerAddress()\n  }\n  if (!walletAddress ) {\n    return TransactionState.Failed\n  }\n\n  // get calldata for increasing a position\n  const { calldata, value } = NonfungiblePositionManager.encodeCollectById(\n      tokenId,walletAddress\n  )\n  // build transaction\n  const transaction = {\n    data: calldata,\n    to: CurrentConfig.NONFUNGIBLE_POSITION_MANAGER_CONTRACT_ADDRESS,\n    value: value,\n    from: walletAddress\n  }\n  return await sendTransactionGetReceipt(transaction)\n}\n\nexport async function increaseLiquidity(\n    tokenId:any,\n    amount0Desired:any, amount1Desired:any, amount0Min:any, amount1Min:any,deadline:any\n):Promise<TransactionState> {\n\n  let walletAddress = getWalletAddress()\n  if (!walletAddress && CurrentWallet.type === WalletType.EXTENSION){\n    walletAddress =  await geSignerAddress()\n  }\n  if (!walletAddress ) {\n    return TransactionState.Failed\n  }\n\n  // get calldata for increasing a position\n  const { calldata, value } = NonfungiblePositionManager.encodeIncrease(\n      tokenId,amount0Desired,amount1Desired,amount0Min, amount1Min,deadline\n  )\n  // build transaction\n  const transaction = {\n    data: calldata,\n    to: CurrentConfig.NONFUNGIBLE_POSITION_MANAGER_CONTRACT_ADDRESS,\n    value: value,\n    from: walletAddress\n  }\n  return await sendTransactionGetReceipt(transaction)\n}\n\nexport async function decreaseLiquidity(\n    tokenId:any,liquidity:any, amount0Min:any, amount1Min:any,deadline:any\n):Promise<TransactionState> {\n\n  let walletAddress = getWalletAddress()\n  if (!walletAddress && CurrentWallet.type === WalletType.EXTENSION){\n    walletAddress =  await geSignerAddress()\n  }\n  if (!walletAddress ) {\n    return TransactionState.Failed\n  }\n\n  // get calldata for increasing a position\n  const { calldata, value } = NonfungiblePositionManager.encodeRemoveLiqidity(\n      tokenId,liquidity,amount0Min, amount1Min,deadline, walletAddress\n  )\n  // build transaction\n  const transaction = {\n    data: calldata,\n    to: CurrentConfig.NONFUNGIBLE_POSITION_MANAGER_CONTRACT_ADDRESS,\n    value: value,\n    from: walletAddress\n  }\n  return await sendTransactionGetReceipt(transaction)\n}\n\nexport async function removePosition(\n    tokenId:any\n):Promise<TransactionState> {\n\n  let walletAddress = getWalletAddress()\n  if (!walletAddress && CurrentWallet.type === WalletType.EXTENSION){\n    walletAddress =  await geSignerAddress()\n  }\n  if (!walletAddress ) {\n    return TransactionState.Failed\n  }\n\n  // get calldata for increasing a position\n  const { calldata, value } = NonfungiblePositionManager.encodeRemovePosition(\n      tokenId\n  )\n  // build transaction\n  const transaction = {\n    data: calldata,\n    to: CurrentConfig.NONFUNGIBLE_POSITION_MANAGER_CONTRACT_ADDRESS,\n    value: value,\n    from: walletAddress\n  }\n  return await sendTransactionGetReceipt(transaction)\n}\n\nexport async function addLiquidityIncludeCreatePool(\n    isNewPool:Boolean,\n    fee:any,\n    token0:any,\n    token1:any,\n    amountADesired:any,\n    amountBDesired:any,\n    lowerTick:any,\n    upperTick:any,\n    amount0Min:any,\n    amount1Min:any,\n    currentPrice:any,\n    deadline:any,\n):Promise<TransactionState> {\n\n\n  let walletAddress = getWalletAddress()\n  if (!walletAddress && CurrentWallet.type === WalletType.EXTENSION){\n    walletAddress =  await geSignerAddress()\n  }\n  if (!walletAddress ) {\n    return TransactionState.Failed\n  }\n\n  // get calldata for increasing a position\n  const { calldata, value } = NonfungiblePositionManager.addCallParametersCreate(\n      isNewPool,\n      fee,\n      token0,\n      token1,\n      amountADesired,\n      amountBDesired,\n      lowerTick,\n      upperTick,\n      amount0Min,\n      amount1Min,\n      currentPrice,\n      walletAddress,\n      deadline,\n  )\n\n\n  // build transaction\n  const transaction = {\n    data: calldata,\n    to: CurrentConfig.NONFUNGIBLE_POSITION_MANAGER_CONTRACT_ADDRESS,\n    value: value,\n    from: walletAddress\n  }\n  return await sendTransactionGetReceipt(transaction)\n\n}\n\nexport async function addLiquidity(\n  positionId: number\n): Promise<TransactionState> {\n  const address = getWalletAddress()\n  const provider = getProvider()\n  if (!address || !provider) {\n    return TransactionState.Failed\n  }\n\n  const positionToIncreaseBy = await constructPosition(\n    CurrencyAmount.fromRawAmount(\n      tokenLiquidity.token0,\n      fromReadableAmount(\n        tokenLiquidity.token0Amount * tokenLiquidity.fractionToAdd,\n        tokenLiquidity.token0.decimals\n      )\n    ),\n    CurrencyAmount.fromRawAmount(\n      tokenLiquidity.token1,\n      fromReadableAmount(\n        tokenLiquidity.token1Amount * tokenLiquidity.fractionToAdd,\n        tokenLiquidity.token1.decimals\n      )\n    )\n  )\n\n  const addLiquidityOptions: AddLiquidityOptions = {\n    deadline: Math.floor(Date.now() / 1000) + 60 * 20,\n    slippageTolerance: new Percent(50, 10_000),\n    tokenId: positionId,\n  }\n\n  // get calldata for increasing a position\n  const { calldata, value } = NonfungiblePositionManager.addCallParameters(\n    positionToIncreaseBy,\n    addLiquidityOptions\n  )\n\n  // build transaction\n  const transaction = {\n    data: calldata,\n    to: CurrentConfig.NONFUNGIBLE_POSITION_MANAGER_CONTRACT_ADDRESS,\n    value: value,\n    from: address,\n    maxFeePerGas: MAX_FEE_PER_GAS,\n    maxPriorityFeePerGas: MAX_PRIORITY_FEE_PER_GAS,\n  }\n\n  return sendTransaction(transaction)\n}\n\nexport async function removeLiquidity(\n  positionId: number\n): Promise<TransactionState> {\n  const address = getWalletAddress()\n  const provider = getProvider()\n  if (!address || !provider) {\n    return TransactionState.Failed\n  }\n\n  const currentPosition = await constructPosition(\n    CurrencyAmount.fromRawAmount(\n        tokenLiquidity.token0,\n      fromReadableAmount(\n          tokenLiquidity.token0Amount,\n          tokenLiquidity.token0.decimals\n      )\n    ),\n    CurrencyAmount.fromRawAmount(\n        tokenLiquidity.token1,\n      fromReadableAmount(\n          tokenLiquidity.token1Amount,\n          tokenLiquidity.token1.decimals\n      )\n    )\n  )\n\n  const collectOptions: Omit<CollectOptions, 'tokenId'> = {\n    expectedCurrencyOwed0: CurrencyAmount.fromRawAmount(\n      tokenLiquidity.token0,\n      0\n    ),\n    expectedCurrencyOwed1: CurrencyAmount.fromRawAmount(\n      tokenLiquidity.token1,\n      0\n    ),\n    recipient: address,\n  }\n\n  const removeLiquidityOptions: RemoveLiquidityOptions = {\n    deadline: Math.floor(Date.now() / 1000) + 60 * 20,\n    slippageTolerance: new Percent(50, 10_000),\n    tokenId: positionId,\n    // percentage of liquidity to remove\n    liquidityPercentage: new Percent(tokenLiquidity.fractionToRemove),\n    collectOptions,\n  }\n  // get calldata for minting a position\n  const { calldata, value } = NonfungiblePositionManager.removeCallParameters(\n    currentPosition,\n    removeLiquidityOptions\n  )\n\n  // build transaction\n  const transaction = {\n    data: calldata,\n    to: CurrentConfig.NONFUNGIBLE_POSITION_MANAGER_CONTRACT_ADDRESS,\n    value: value,\n    from: address,\n    maxFeePerGas: MAX_FEE_PER_GAS,\n    maxPriorityFeePerGas: MAX_PRIORITY_FEE_PER_GAS,\n  }\n\n  return sendTransaction(transaction)\n}\n\nexport async function getPositionIds(): Promise<number[]> {\n  const provider = getProvider()\n  const address = getWalletAddress()\n\n  if (!provider || !address) {\n    throw new Error('No provider available')\n  }\n\n  const positionContract = new ethers.Contract(\n      CurrentConfig.NONFUNGIBLE_POSITION_MANAGER_CONTRACT_ADDRESS,\n    NONFUNGIBLE_POSITION_MANAGER_ABI,\n    provider\n  )\n  // Get number of positions\n  const balance: number = await positionContract.balanceOf(address)\n\n\n  // Get all positions\n  const tokenIds = []\n  for (let i = 0; i < balance; i++) {\n    const tokenOfOwnerByIndex: number =\n      await positionContract.tokenOfOwnerByIndex(address, i)\n    tokenIds.push(tokenOfOwnerByIndex)\n  }\n\n  return tokenIds\n}\n\nexport async function getPositionInfo(tokenId: number): Promise<PositionInfo> {\n  const provider = getProvider()\n  if (!provider) {\n    throw new Error('No provider available')\n  }\n\n  const positionContract = new ethers.Contract(\n      CurrentConfig.NONFUNGIBLE_POSITION_MANAGER_CONTRACT_ADDRESS,\n    NONFUNGIBLE_POSITION_MANAGER_ABI,\n    provider\n  )\n\n  const position = await positionContract.positions(tokenId)\n\n  return {\n    tickLower: position.tickLower,\n    tickUpper: position.tickUpper,\n    liquidity: position.liquidity,\n    feeGrowthInside0LastX128: position.feeGrowthInside0LastX128,\n    feeGrowthInside1LastX128: position.feeGrowthInside1LastX128,\n    tokensOwed0: position.tokensOwed0,\n    tokensOwed1: position.tokensOwed1,\n  }\n}\n\nexport async function getTokenTransferApprovalPosition(\n  token: Token\n): Promise<TransactionState> {\n  const provider = getProvider()\n  const address = getWalletAddress()\n  if (!provider || !address) {\n    console.log('No Provider Found')\n    return TransactionState.Failed\n  }\n\n  try {\n    const tokenContract = new ethers.Contract(\n      token.address,\n      ERC20_ABI,\n      provider\n    )\n\n    const transaction = await tokenContract.populateTransaction.approve(\n        CurrentConfig.NONFUNGIBLE_POSITION_MANAGER_CONTRACT_ADDRESS,\n      TOKEN_AMOUNT_TO_APPROVE_FOR_TRANSFER\n    )\n\n    return sendTransaction({\n      ...transaction,\n      from: address,\n    })\n  } catch (e) {\n    console.error(e)\n    return TransactionState.Failed\n  }\n}\n\nexport async function constructPosition(\n  token0Amount: CurrencyAmount<Token>,\n  token1Amount: CurrencyAmount<Token>\n): Promise<Position> {\n  // get pool info\n  const poolInfo = await getPoolInfo(tokenLiquidity.token0,tokenLiquidity.token1,tokenLiquidity.poolFee)\n\n  // construct pool instance\n  const configuredPool = new Pool(\n    token0Amount.currency,\n    token1Amount.currency,\n    poolInfo.fee,\n    poolInfo.sqrtPriceX96.toString(),\n    poolInfo.liquidity.toString(),\n    poolInfo.tick\n  )\n\n\n  // create position using the maximum liquidity from input amounts\n  return Position.fromAmounts({\n    pool: configuredPool,\n    tickLower:\n      nearestUsableTick(poolInfo.tick, poolInfo.tickSpacing) -\n      poolInfo.tickSpacing * 2,\n    tickUpper:\n      nearestUsableTick(poolInfo.tick, poolInfo.tickSpacing) +\n      poolInfo.tickSpacing * 2,\n    amount0: token0Amount.quotient,\n    amount1: token1Amount.quotient,\n    useFullPrecision: true,\n  })\n}\n\nexport async function mintPosition(): Promise<TransactionState> {\n  const address = getWalletAddress()\n  const provider = getProvider()\n  if (!address || !provider) {\n    return TransactionState.Failed\n  }\n\n  /*\n  // Give approval to the contract to transfer tokens\n  const tokenInApproval = await getTokenTransferApprovalPosition(\n    tokenLiquidity.token0\n  )\n  const tokenOutApproval = await getTokenTransferApprovalPosition(\n    tokenLiquidity.token1\n  )\n\n  if (\n    tokenInApproval !== TransactionState.Sent ||\n    tokenOutApproval !== TransactionState.Sent\n  ) {\n    return TransactionState.Failed\n  }\n*/\n\n  const positionToMint = await constructPosition(\n    CurrencyAmount.fromRawAmount(\n      tokenLiquidity.token0,\n      fromReadableAmount(\n        tokenLiquidity.token0Amount,\n        tokenLiquidity.token0.decimals\n      )\n    ),\n    CurrencyAmount.fromRawAmount(\n      tokenLiquidity.token1,\n      fromReadableAmount(\n        tokenLiquidity.token1Amount,\n        tokenLiquidity.token1.decimals\n      )\n    )\n  )\n\n\n  const mintOptions: MintOptions = {\n    recipient: address,\n    deadline: Math.floor(Date.now() / 1000) + 60 * 20,\n    slippageTolerance: new Percent(50, 10_000),\n  }\n\n  // get calldata for minting a position\n  const { calldata, value } = NonfungiblePositionManager.addCallParameters(\n    positionToMint,\n    mintOptions\n  )\n\n  // build transaction\n  const transaction = {\n    data: calldata,\n    to:  CurrentConfig.NONFUNGIBLE_POSITION_MANAGER_CONTRACT_ADDRESS,\n    value: value,\n    from: address,\n    maxFeePerGas: MAX_FEE_PER_GAS,\n    maxPriorityFeePerGas: MAX_PRIORITY_FEE_PER_GAS,\n  }\n\n  return sendTransaction(transaction)\n}\n\nexport async function getEarnedFee(tokenId:any): Promise<any> {\n  let walletAddress = getWalletAddress()\n  if (!walletAddress && CurrentWallet.type === WalletType.EXTENSION) {\n    walletAddress = await geSignerAddress()\n  }\n  const provider = getProvider()\n  if (!provider || !walletAddress) {\n    throw new Error('No provider or address')\n  }\n  const quoteContract = new ethers.Contract(\n      CurrentConfig.NONFUNGIBLE_POSITION_MANAGER_CONTRACT_ADDRESS,\n      INonfungiblePositionManager,\n      provider\n  )\n\n  const transaction = await quoteContract\n      .connect(provider)\n      .callStatic\n      .collect({\n            tokenId:tokenId,\n            recipient: walletAddress,\n            amount0Max: MaxUint128,\n            amount1Max: MaxUint128,\n          }\n      );\n\n  return [\n    transaction.amount0.toString(),\n    transaction.amount1.toString(),\n  ]\n}\n\nexport async function getPoolAddress(token0:any,token1:any,fee:any): Promise<any> {\n  let walletAddress = getWalletAddress()\n  if (!walletAddress && CurrentWallet.type === WalletType.EXTENSION) {\n    walletAddress = await geSignerAddress()\n  }\n  const provider = getProvider()\n  if (!provider || !walletAddress) {\n    throw new Error('No provider or address')\n  }\n  const factoryContract = new ethers.Contract(\n      CurrentConfig.POOL_FACTORY_CONTRACT_ADDRESS,\n      IV3FactoryABI,\n      provider\n  )\n\n  const transaction = await factoryContract\n      .connect(provider)\n      .callStatic\n      .getPool(token0,token1,fee);\n\n  return transaction\n}\n\nexport async function getPoolFromAddress(poolAddress:any): Promise<any> {\n  let walletAddress = getWalletAddress()\n  if (!walletAddress && CurrentWallet.type === WalletType.EXTENSION) {\n    walletAddress = await geSignerAddress()\n  }\n  const provider = getProvider()\n  if (!provider || !walletAddress) {\n    throw new Error('No provider or address')\n  }\n  const poolContract = new ethers.Contract(\n      poolAddress,\n      IV3PoolABI.abi,\n      provider\n  )\n\n  const contract = await poolContract\n      .connect(provider);\n\n  return contract\n}\n\nexport async function getPositionImage(tokenId:any): Promise<any> {\n  let walletAddress = getWalletAddress()\n  if (!walletAddress && CurrentWallet.type === WalletType.EXTENSION) {\n    walletAddress = await geSignerAddress()\n  }\n  const provider = getProvider()\n  if (!provider || !walletAddress) {\n    throw new Error('No provider or address')\n  }\n  const quoteContract = new ethers.Contract(\n      CurrentConfig.NONFUNGIBLE_POSITION_MANAGER_CONTRACT_ADDRESS,\n      INonfungiblePositionManager,\n      provider\n  )\n\n  const transaction = await quoteContract\n      .connect(provider)\n      .callStatic\n      .tokenURI(tokenId);\n\n  return transaction\n}\n\n\n"],"names":["TradeType","Rounding","FeeAmount","MaxUint256","JSBI","BigInt","MaxUint128","BigNumber","from","pow","sub","TICK_SPACINGS","_TICK_SPACINGS","LOWEST","LOW","MEDIUM","HIGH","ADDRESS_ZERO","POOL_INIT_CODE_HASH","ERC20_ABI","WETH_ABI","NONFUNGIBLE_POSITION_MANAGER_ABI","validateAndParseAddress","address","getAddress","error","Error","startsWith0xLen42HexRegex","Decimal","toFormat","_Decimal","Big","_Big","toSignificantRounding","_toSignificantRoundin","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","toFixedRounding","_toFixedRounding","Fraction","numerator","denominator","this","tryParseFraction","fractionish","_proto","prototype","invert","add","other","otherParsed","equal","multiply","subtract","lessThan","equalTo","greaterThan","divide","toSignificant","significantDigits","format","rounding","groupSeparator","Number","isInteger","invariant","set","precision","quotient","toString","div","toSignificantDigits","decimalPlaces","toFixed","DP","RM","_createClass","key","get","remainder","CurrencyAmount","_Fraction","currency","_this","call","lessThanOrEqual","decimalScale","exponentiate","decimals","_inheritsLoose","fromRawAmount","rawAmount","fromFractionalAmount","equals","added","subtracted","multiplied","divided","toExact","isToken","wrapped","toHex","bigintIsh","hex","length","SelfPermit","encodePermit","token","options","INTERFACE","encodeFunctionData","nonce","expiry","v","r","s","amount","deadline","encodeRouteToPath","route","exactOutput","_route$pools$reduce","pools","reduce","_ref","pool","index","inputToken","path","types","outputToken","token0","token1","fee","concat","input","pack","reverse","Interface","ISelfPermit","Multicall","encodeMulticall","calldatas","Array","isArray","IMulticall","Payments","encodeFeeBips","encodeUnwrapWETH9","amountMinimum","recipient","feeOptions","feeBips","feeRecipient","encodeSweepToken","encodeRefundETH","IPeripheryPaymentsWithFee","ETypes","BaseCurrency","chainId","symbol","name","isSafeInteger","Token","_BaseCurrency","bypassChecksum","test","checkValidAddress","toLowerCase","sortsBefore","Environment","WalletType","typeToFee","_typeToFee","issue","buy","sell","approve","update_creator_fee","withdraw","createTournament","add_watch_list","remove_watch_list","swap_tokens","transfer","swap_eth_key","testnetConfig","env","TESTNET","network","swapApi","API_ROOT","rpc","POOL_FACTORY_CONTRACT_ADDRESS","QUOTER_CONTRACT_ADDRESS","SWAP_ROUTER_ADDRESS","WETH_CONTRACT_ADDRESS","TC_CONTRACT_ADDRESS","ALPHA_CONTRACT_ADDRESS","NONFUNGIBLE_POSITION_MANAGER_CONTRACT_ADDRESS","tokens_list","chainName","nakatestnetConfig","NAKATESTNET","nakamainnetConfig","NAKAMAINNET","mainnetConfig","MAINNET","exports","tokenSwap","in","CurrentConfig","amountIn","out","poolFee","tokenLiquidity","token0Amount","token1Amount","fractionToRemove","fractionToAdd","resetTOkenSwap","CurrentWallet","privateKey","type","PRIVATEKEY","SwapRouter","swapCallParameters","trades","sampleTrade","tokenIn","inputAmount","tokenOut","outputAmount","every","trade","ZERO_IN","ZERO_OUT","totalAmountOut","sum","minimumAmountOut","slippageTolerance","mustRefund","isNative","tradeType","EXACT_OUTPUT","inputIsNative","outputIsNative","routerMustCustody","totalValue","maximumAmountIn","inputTokenPermit","push","_step","_iterator","_createForOfIteratorHelperLoose","done","_step2","value","_iterator2","swaps","_step2$value","amountOut","EXACT_INPUT","_options$sqrtPriceLim","exactInputSingleParams","tokenPath","amountOutMinimum","sqrtPriceLimitX96","_options$sqrtPriceLim2","exactOutputSingleParams","amountInMaximum","undefined","calldata","ISwapRouter","SwapQuoter","quoteCallParameters","singleHop","quoteAmount","swapInterface","useQuoterV2","V2INTERFACE","V1INTERFACE","_options","baseQuoteParams","v2QuoteParams","_extends","tradeTypeFunctionName","_options2","IQuoter","IQuoterV2","Price","baseCurrency","quoteCurrency","_len","arguments","args","_key","result","baseAmount","scalar","fraction","quote","currencyAmount","adjustedForDecimals","NEGATIVE_ONE","ZERO","ONE","Q96","Q192","computePoolAddress","factoryAddress","tokenA","tokenB","initCodeHashManualOverride","_ref2","getCreate2Address","keccak256","defaultAbiCoder","encode","LiquidityMath","addDelta","x","y","FullMath","mulDivRoundingUp","a","b","product","notEqual","MaxUint160","multiplyIn256","bitwiseAnd","SqrtPriceMath","getAmount0Delta","sqrtRatioAX96","sqrtRatioBX96","liquidity","roundUp","numerator1","leftShift","numerator2","getAmount1Delta","getNextSqrtPriceFromInput","sqrtPX96","zeroForOne","getNextSqrtPriceFromAmount0RoundingUp","getNextSqrtPriceFromAmount1RoundingDown","getNextSqrtPriceFromOutput","greaterThanOrEqual","MAX_FEE","SwapMath","computeSwapStep","sqrtRatioCurrentX96","sqrtRatioTargetX96","amountRemaining","feePips","returnValues","exactIn","amountRemainingLessFee","sqrtRatioNextX96","max","feeAmount","TWO","POWERS_OF_2","map","mostSignificantBit","msb","_step$value","power","signedRightShift","mulShift","val","mulBy","Q32","TickMath","getSqrtRatioAtTick","tick","MIN_TICK","MAX_TICK","absTick","ratio","getTickAtSqrtRatio","sqrtRatioX96","MIN_SQRT_RATIO","MAX_SQRT_RATIO","sqrtRatioX128","log_2","i","f","bitwiseOr","log_sqrt10001","tickLow","toNumber","tickHigh","NoTickDataProvider","getTick","_getTick","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_tick","wrap","_context","prev","next","ERROR_MESSAGE","stop","_x","apply","nextInitializedTickWithinOneWord","_nextInitializedTickWithinOneWord","_callee2","_lte","_tickSpacing","_context2","_x2","_x3","_x4","isSorted","list","comparator","tickComparator","TickList","validateList","ticks","tickSpacing","accumulator","liquidityNet","isBelowSmallest","isAtOrAboveLargest","binarySearch","l","Math","floor","nextInitializedTick","lte","compressed","minimum","maximum","min","Tick","liquidityGross","TickListDataProvider","ticksMapped","t","abrupt","NO_TICK_DATA_PROVIDER_DEFAULT","Pool","tickCurrent","tickCurrentSqrtRatioX96","nextTickSqrtRatioX96","tickDataProvider","factoryAddressOverride","involvesToken","priceOf","token0Price","token1Price","getOutputAmount","_getOutputAmount","_yield$this$swap","swap","sent","amountCalculated","getInputAmount","_getInputAmount","_yield$this$swap2","_swap","_callee3","amountSpecified","exactInput","state","step","_yield$this$tickDataP","_SwapMath$computeSwap","_context3","amountSpecifiedRemaining","sqrtPriceX96","sqrtPriceStartX96","tickNext","initialized","sqrtPriceNextX96","t0","t1","_x5","_x6","_x7","_this$_token0Price","_token0Price","_this$_token1Price","_token1Price","Route","output","wrappedInput","entries","currentInputToken","nextToken","_midPrice","price","slice","nextInput","sortedInsert","items","maxSize","isFull","lo","hi","mid","splice","pop","ONE_HUNDRED","toPercent","Percent","tradeComparator","total","cur","Trade","routes","inputCurrency","outputCurrency","_ref3","numPools","_ref4","poolAddressSet","Set","size","_exactIn","fromRoute","exactOut","_exactOut","_fromRoute","amounts","_i","_pool","fromRoutes","_fromRoutes","_callee4","populatedRoutes","_iterator3","_step3","_step3$value","_i2","_pool2","_context4","_x8","_x9","createUncheckedTrade","constructorArguments","createUncheckedTradeWithMultipleRoutes","slippageAdjustedAmountOut","slippageAdjustedAmountIn","worstExecutionPrice","bestTradeExactIn","_bestTradeExactIn","_callee5","currencyAmountIn","currencyOut","_temp","currentPools","nextAmountIn","bestTrades","maxNumResults","_ref5$maxNumResults","maxHops","_ref5$maxHops","_ref5","_context5","isInsufficientInputAmountError","t2","t3","t4","t5","poolsExcludingThisPool","_x10","_x11","_x12","_x13","_x14","_x15","_x16","bestTradeExactOut","_bestTradeExactOut","_callee6","currencyIn","currencyAmountOut","_temp2","nextAmountOut","_ref6$maxNumResults","_ref6$maxHops","_ref6","_context6","isInsufficientReservesError","_x17","_x18","_x19","_x20","_x21","_x22","_x23","_inputAmount","totalInputFromRoutes","_ref7","_outputAmount","totalOutputFromRoutes","_ref8","_this$_executionPrice","_executionPrice","_priceImpact","_step4","spotOutputAmount","_iterator4","_step4$value","midPrice","priceImpact","NativeCurrency","maxLiquidityForAmount0Imprecise","amount0","intermediate","maxLiquidityForAmount0Precise","maxLiquidityForAmount1","amount1","maxLiquidityForAmounts","useFullPrecision","maxLiquidityForAmount0","liquidity0","liquidity1","MAX_SAFE_INTEGER","encodeSqrtRatioX96","sqrt","z","tickToPrice","baseToken","quoteToken","ratioX192","ChainId","Position","tickLower","tickUpper","ratiosAfterSlippage","priceLower","asFraction","priceUpper","sqrtRatioX96Lower","sqrtRatioX96Upper","mintAmountsWithSlippage","_this$ratiosAfterSlip","poolLower","poolUpper","positionThatWillBeCreated","fromAmounts","mintAmounts","burnAmountsWithSlippage","_this$ratiosAfterSlip2","fromAmount0","fromAmount1","_token0Amount","_token1Amount","_mintAmounts","NativeCurrencyName","SUPPORTED_CHAINS","OPTIMISM","OPTIMISM_GOERLI","ARBITRUM_ONE","ARBITRUM_GOERLI","POLYGON","POLYGON_MUMBAI","GOERLI","SEPOLIA","CELO_ALFAJORES","CELO","BNB","AVALANCHE","BASE_GOERLI","NOSTEST","NOS","nearestUsableTick","rounded","round","PaymentsNaka","fromReadableAmount","ethers","utils","parseUnits","toReadableAmount","formatUnits","isMint","Object","keys","some","k","NonfungiblePositionManager","encodeCreate","createCallParameters","encodeCollectById","tokenId","account","amount0Max","amount1Max","encodeIncrease","amount0Desired","amount1Desired","amount0Min","amount1Min","encodeRemoveLiqidity","encodeRemovePosition","addCallParametersCreate","isNewPool","amountADesired","amountBDesired","lowerTick","upperTick","currentPrice","wrappedValue","gt","addCallParameters","position","_position$mintAmounts","minimumAmounts","createPool","token0Permit","token1Permit","useNative","encodeCollect","involvesETH","expectedCurrencyOwed0","expectedCurrencyOwed1","ethAmount","tokenAmount","collectCallParameters","removeCallParameters","partialPosition","liquidityPercentage","_partialPosition$burn","permit","spender","_options$collectOptio","collectOptions","rest","_objectWithoutPropertiesLoose","_excluded","burnToken","safeTransferFromParameters","sender","data","INonfungiblePositionManager","browserExtensionProvider","TransactionState","mainnetProvider","providers","JsonRpcProvider","walletExtensionAddress","getProvider","EXTENSION","wallet","provider","getWalletAddress","geSignerAddress","_geSignerAddress","_browserExtensionProv","signer","getSigner","console","log","sendTransaction","_sendTransaction","transaction","_transaction$maxFeePe","_transaction$maxPrior","maxFeePerGas","maxPriorityFeePerGas","sendTransactionViaExtension","sendTransactionViaWallet","sendTransactionGetReceipt","_sendTransactionGetReceipt","scanTX","_transaction$maxFeePe2","_transaction$maxPrior2","sendTransactionViaExtensionGetReceipt","gasLimit","sendTransactionViaWalletReceipt","_connectBrowserExtensionWallet","window","ethereum","_window2","Web3Provider","send","accounts","_sendTransactionViaExtension","_browserExtensionProv2","receipt","Sent","Failed","Rejected","_sendTransactionViaExtensionGetReceipt","_browserExtensionProv3","_sendTransactionViaWallet","_callee7","txRes","_context7","getTransactionReceipt","hash","_sendTransactionViaWalletReceipt","_callee8","_context8","getPoolInfoByToken","_getPoolInfoByToken","currentPoolAddress","poolContract","slot0","p","Contract","IV3PoolABI","getPoolInfo","_getPoolInfo","_yield$Promise$all","Promise","all","encodePath","fees","encoded","padStart","_getCurrencyBalance","ERC20Contract","balance","getBalance","formatEther","balanceOf","getCurrencyApproveRouter","_getCurrencyApproveRouter","amountAprrove","allowance","_wrapETH","eth","wethContract","ceil","mul","to","_unwrapETH","SwapRouterNaka","useDefiToken","camelCaseKeys","obj","Boolean","isEmpty","constructor","_extends2","camelCase","swrFetcher","url","method","_response$data","_response$data2","response","axios","request","getListRoute","_getListRoute","_callee15","listrs","res","_context15","fetch","then","json","finish","getSwapTokensV1","params","qs","URLSearchParams","getSwapRoutesV2","listToken","gettokenIndex","reCheckRouteInSlippage","slippage","maxSlippage","oldNumber","_route$pathTokens","_route$pathPairs","addresses","quoteContract","listPools","pair","index0","index1","swapRout1","uncheckedTrade","pathTokens","pathPairs","QuoterV2ABI","connect","callStatic","quoteExactInput","parseEther","decimal","parseInt","reCheckRouteOutSlippage","_route$pathTokens2","_route$pathPairs2","quoteExactOutput","getBestRouteExactIn","swapRoutes","listToken1","from_token","to_token","swapRoutes1","_route","_route2","reserve0","_route3","reserve1","promises","_route$pathTokens3","_route$pathPairs3","indexBestRoute","indexOf","bestRoute","toLocaleString","useGrouping","getBestRouteExactOut","_callee9","_context9","_iterator5","_step5","_ref9","_route$pathTokens4","_route$pathPairs4","_x24","returnIndex","forEach","arr","_iterator6","_step6","getBestRouteExactInNaka","_ref10","_callee11","_context11","QuoterV2ABINaka","_iterator7","_step7","_route4","_route5","_route6","_ref11","_callee10","_route$pathTokens5","_route$pathPairs5","_context10","amountDefi","_x28","idx","_iterator8","_step8","_x25","_x26","_x27","getBestRouteExactOutNaka","_ref12","_callee13","_context13","_iterator9","_step9","_ref13","_callee12","_route$pathTokens6","_route$pathPairs6","_context12","_x32","_iterator10","_step10","_x29","_x30","_x31","_executeTradeSlippageNaka","_callee16","walletAddress","_context16","Date","now","methodParameters","tx","_createTrade","_callee18","_iterator11","_step11","_context18","_ref15","_callee17","_context17","path_tokens","path_pairs","_x55","_executeTradeAftercheckSlippage","_callee19","oldAmout","expectAmout","newEstimate","newTrade","_context19","_executeTradeSlippage","_callee20","_context20","_executeTrade","_callee21","_context21","_getTokenTransferApprovalSwap","_callee22","_context22","_tokenTransferApproval","_callee23","_context23","tokenContract","populateTransaction","getGasFee","_ref14","_callee14","_rpc","gasPrice","_context14","getGasPrice","extraDigits","split","getListLiquidity","getTokens","limit","getPositionDetail","id","_CollectFeeeById","_NonfungiblePositionM","_increaseLiquidity","_NonfungiblePositionM2","_decreaseLiquidity","_NonfungiblePositionM3","_removePosition","_NonfungiblePositionM4","_addLiquidityIncludeCreatePool","_NonfungiblePositionM5","_addLiquidity","positionId","positionToIncreaseBy","addLiquidityOptions","_NonfungiblePositionM6","constructPosition","_removeLiquidity","currentPosition","removeLiquidityOptions","_NonfungiblePositionM7","_getPositionIds","positionContract","tokenIds","tokenOfOwnerByIndex","_getPositionInfo","positions","feeGrowthInside0LastX128","feeGrowthInside1LastX128","tokensOwed0","tokensOwed1","_getTokenTransferApprovalPosition","_x35","_x36","_constructPosition","poolInfo","configuredPool","_mintPosition","positionToMint","mintOptions","_NonfungiblePositionM8","_getEarnedFee","collect","_getPoolAddress","factoryContract","IV3FactoryABI","getPool","_getPoolFromAddress","poolAddress","_getPositionImage","tokenURI","environment","_x51","_x38","_x39","_x40","_x41","_x42","_x43","_x44","_x45","_x46","_x47","_x48","_x49","_x50","_x33","_x34","_x37","alert","bn","multipliedBy","integerValue","random","_x52","Wallet","_window","e","createBrowserExtensionProvider","config","outToken","listTk","_x53","_x54"],"mappings":"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"}