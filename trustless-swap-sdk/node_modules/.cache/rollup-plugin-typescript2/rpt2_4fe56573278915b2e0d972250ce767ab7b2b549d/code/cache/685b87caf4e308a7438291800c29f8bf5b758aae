{"code":"import { ethers } from 'ethers';\r\nimport { ERC20_ABI, MAX_FEE_PER_GAS, MAX_PRIORITY_FEE_PER_GAS, NONFUNGIBLE_POSITION_MANAGER_ABI, } from './constants';\r\nimport { TOKEN_AMOUNT_TO_APPROVE_FOR_TRANSFER } from './constants';\r\nimport { geSignerAddress, sendTransaction, sendTransactionGetReceipt, TransactionState } from './providers';\r\nimport { Pool } from './entities/pool';\r\nimport { Position } from './entities/position';\r\nimport { nearestUsableTick } from './utils/nearestUsableTick';\r\nimport { Percent } from './entities/fractions/percent';\r\nimport { CurrencyAmount } from './entities/fractions/currencyAmount';\r\nimport { NonfungiblePositionManager } from './nonfungiblePositionManager';\r\nimport { CurrentConfig, CurrentWallet, tokenLiquidity, WalletType } from './config';\r\nimport { getPoolInfo } from './poolinfo';\r\nimport { getProvider, getWalletAddress } from './providers';\r\nimport { fromReadableAmount } from './conversion';\r\nexport async function CollectFeeeById(tokenId) {\r\n    let walletAddress = getWalletAddress();\r\n    if (!walletAddress && CurrentWallet.type === WalletType.EXTENSION) {\r\n        walletAddress = await geSignerAddress();\r\n    }\r\n    if (!walletAddress) {\r\n        return TransactionState.Failed;\r\n    }\r\n    // get calldata for increasing a position\r\n    const { calldata, value } = NonfungiblePositionManager.encodeCollectById(tokenId, walletAddress);\r\n    // build transaction\r\n    const transaction = {\r\n        data: calldata,\r\n        to: CurrentConfig.NONFUNGIBLE_POSITION_MANAGER_CONTRACT_ADDRESS,\r\n        value: value,\r\n        from: walletAddress\r\n    };\r\n    return await sendTransactionGetReceipt(transaction);\r\n}\r\nexport async function increaseLiquidity(tokenId, amount0Desired, amount1Desired, amount0Min, amount1Min, deadline) {\r\n    let walletAddress = getWalletAddress();\r\n    if (!walletAddress && CurrentWallet.type === WalletType.EXTENSION) {\r\n        walletAddress = await geSignerAddress();\r\n    }\r\n    if (!walletAddress) {\r\n        return TransactionState.Failed;\r\n    }\r\n    // get calldata for increasing a position\r\n    const { calldata, value } = NonfungiblePositionManager.encodeIncrease(tokenId, amount0Desired, amount1Desired, amount0Min, amount1Min, deadline);\r\n    // build transaction\r\n    const transaction = {\r\n        data: calldata,\r\n        to: CurrentConfig.NONFUNGIBLE_POSITION_MANAGER_CONTRACT_ADDRESS,\r\n        value: value,\r\n        from: walletAddress\r\n    };\r\n    return await sendTransactionGetReceipt(transaction);\r\n}\r\nexport async function decreaseLiquidity(tokenId, liquidity, amount0Min, amount1Min, deadline) {\r\n    let walletAddress = getWalletAddress();\r\n    if (!walletAddress && CurrentWallet.type === WalletType.EXTENSION) {\r\n        walletAddress = await geSignerAddress();\r\n    }\r\n    if (!walletAddress) {\r\n        return TransactionState.Failed;\r\n    }\r\n    // get calldata for increasing a position\r\n    const { calldata, value } = NonfungiblePositionManager.encodeRemoveLiqidity(tokenId, liquidity, amount0Min, amount1Min, deadline, walletAddress);\r\n    // build transaction\r\n    const transaction = {\r\n        data: calldata,\r\n        to: CurrentConfig.NONFUNGIBLE_POSITION_MANAGER_CONTRACT_ADDRESS,\r\n        value: value,\r\n        from: walletAddress\r\n    };\r\n    return await sendTransactionGetReceipt(transaction);\r\n}\r\nexport async function removePosition(tokenId) {\r\n    let walletAddress = getWalletAddress();\r\n    if (!walletAddress && CurrentWallet.type === WalletType.EXTENSION) {\r\n        walletAddress = await geSignerAddress();\r\n    }\r\n    if (!walletAddress) {\r\n        return TransactionState.Failed;\r\n    }\r\n    // get calldata for increasing a position\r\n    const { calldata, value } = NonfungiblePositionManager.encodeRemovePosition(tokenId);\r\n    // build transaction\r\n    const transaction = {\r\n        data: calldata,\r\n        to: CurrentConfig.NONFUNGIBLE_POSITION_MANAGER_CONTRACT_ADDRESS,\r\n        value: value,\r\n        from: walletAddress\r\n    };\r\n    return await sendTransactionGetReceipt(transaction);\r\n}\r\nexport async function addLiquidityIncludeCreatePool(isNewPool, fee, token0, token1, amountADesired, amountBDesired, lowerTick, upperTick, amount0Min, amount1Min, currentPrice, deadline) {\r\n    let walletAddress = getWalletAddress();\r\n    if (!walletAddress && CurrentWallet.type === WalletType.EXTENSION) {\r\n        walletAddress = await geSignerAddress();\r\n    }\r\n    if (!walletAddress) {\r\n        return TransactionState.Failed;\r\n    }\r\n    // get calldata for increasing a position\r\n    const { calldata, value } = NonfungiblePositionManager.addCallParametersCreate(isNewPool, fee, token0, token1, amountADesired, amountBDesired, lowerTick, upperTick, amount0Min, amount1Min, currentPrice, walletAddress, deadline);\r\n    // build transaction\r\n    const transaction = {\r\n        data: calldata,\r\n        to: CurrentConfig.NONFUNGIBLE_POSITION_MANAGER_CONTRACT_ADDRESS,\r\n        value: value,\r\n        from: walletAddress\r\n    };\r\n    return await sendTransactionGetReceipt(transaction);\r\n}\r\nexport async function addLiquidity(positionId) {\r\n    const address = getWalletAddress();\r\n    const provider = getProvider();\r\n    if (!address || !provider) {\r\n        return TransactionState.Failed;\r\n    }\r\n    const positionToIncreaseBy = await constructPosition(CurrencyAmount.fromRawAmount(tokenLiquidity.token0, fromReadableAmount(tokenLiquidity.token0Amount * tokenLiquidity.fractionToAdd, tokenLiquidity.token0.decimals)), CurrencyAmount.fromRawAmount(tokenLiquidity.token1, fromReadableAmount(tokenLiquidity.token1Amount * tokenLiquidity.fractionToAdd, tokenLiquidity.token1.decimals)));\r\n    const addLiquidityOptions = {\r\n        deadline: Math.floor(Date.now() / 1000) + 60 * 20,\r\n        slippageTolerance: new Percent(50, 10000),\r\n        tokenId: positionId,\r\n    };\r\n    // get calldata for increasing a position\r\n    const { calldata, value } = NonfungiblePositionManager.addCallParameters(positionToIncreaseBy, addLiquidityOptions);\r\n    // build transaction\r\n    const transaction = {\r\n        data: calldata,\r\n        to: CurrentConfig.NONFUNGIBLE_POSITION_MANAGER_CONTRACT_ADDRESS,\r\n        value: value,\r\n        from: address,\r\n        maxFeePerGas: MAX_FEE_PER_GAS,\r\n        maxPriorityFeePerGas: MAX_PRIORITY_FEE_PER_GAS,\r\n    };\r\n    return sendTransaction(transaction);\r\n}\r\nexport async function removeLiquidity(positionId) {\r\n    const address = getWalletAddress();\r\n    const provider = getProvider();\r\n    if (!address || !provider) {\r\n        return TransactionState.Failed;\r\n    }\r\n    const currentPosition = await constructPosition(CurrencyAmount.fromRawAmount(tokenLiquidity.token0, fromReadableAmount(tokenLiquidity.token0Amount, tokenLiquidity.token0.decimals)), CurrencyAmount.fromRawAmount(tokenLiquidity.token1, fromReadableAmount(tokenLiquidity.token1Amount, tokenLiquidity.token1.decimals)));\r\n    const collectOptions = {\r\n        expectedCurrencyOwed0: CurrencyAmount.fromRawAmount(tokenLiquidity.token0, 0),\r\n        expectedCurrencyOwed1: CurrencyAmount.fromRawAmount(tokenLiquidity.token1, 0),\r\n        recipient: address,\r\n    };\r\n    const removeLiquidityOptions = {\r\n        deadline: Math.floor(Date.now() / 1000) + 60 * 20,\r\n        slippageTolerance: new Percent(50, 10000),\r\n        tokenId: positionId,\r\n        // percentage of liquidity to remove\r\n        liquidityPercentage: new Percent(tokenLiquidity.fractionToRemove),\r\n        collectOptions,\r\n    };\r\n    // get calldata for minting a position\r\n    const { calldata, value } = NonfungiblePositionManager.removeCallParameters(currentPosition, removeLiquidityOptions);\r\n    // build transaction\r\n    const transaction = {\r\n        data: calldata,\r\n        to: CurrentConfig.NONFUNGIBLE_POSITION_MANAGER_CONTRACT_ADDRESS,\r\n        value: value,\r\n        from: address,\r\n        maxFeePerGas: MAX_FEE_PER_GAS,\r\n        maxPriorityFeePerGas: MAX_PRIORITY_FEE_PER_GAS,\r\n    };\r\n    return sendTransaction(transaction);\r\n}\r\nexport async function getPositionIds() {\r\n    const provider = getProvider();\r\n    const address = getWalletAddress();\r\n    if (!provider || !address) {\r\n        throw new Error('No provider available');\r\n    }\r\n    const positionContract = new ethers.Contract(CurrentConfig.NONFUNGIBLE_POSITION_MANAGER_CONTRACT_ADDRESS, NONFUNGIBLE_POSITION_MANAGER_ABI, provider);\r\n    // Get number of positions\r\n    const balance = await positionContract.balanceOf(address);\r\n    // Get all positions\r\n    const tokenIds = [];\r\n    for (let i = 0; i < balance; i++) {\r\n        const tokenOfOwnerByIndex = await positionContract.tokenOfOwnerByIndex(address, i);\r\n        tokenIds.push(tokenOfOwnerByIndex);\r\n    }\r\n    return tokenIds;\r\n}\r\nexport async function getPositionInfo(tokenId) {\r\n    const provider = getProvider();\r\n    if (!provider) {\r\n        throw new Error('No provider available');\r\n    }\r\n    const positionContract = new ethers.Contract(CurrentConfig.NONFUNGIBLE_POSITION_MANAGER_CONTRACT_ADDRESS, NONFUNGIBLE_POSITION_MANAGER_ABI, provider);\r\n    const position = await positionContract.positions(tokenId);\r\n    return {\r\n        tickLower: position.tickLower,\r\n        tickUpper: position.tickUpper,\r\n        liquidity: position.liquidity,\r\n        feeGrowthInside0LastX128: position.feeGrowthInside0LastX128,\r\n        feeGrowthInside1LastX128: position.feeGrowthInside1LastX128,\r\n        tokensOwed0: position.tokensOwed0,\r\n        tokensOwed1: position.tokensOwed1,\r\n    };\r\n}\r\nexport async function getTokenTransferApprovalPosition(token) {\r\n    const provider = getProvider();\r\n    const address = getWalletAddress();\r\n    if (!provider || !address) {\r\n        console.log('No Provider Found');\r\n        return TransactionState.Failed;\r\n    }\r\n    try {\r\n        const tokenContract = new ethers.Contract(token.address, ERC20_ABI, provider);\r\n        const transaction = await tokenContract.populateTransaction.approve(CurrentConfig.NONFUNGIBLE_POSITION_MANAGER_CONTRACT_ADDRESS, TOKEN_AMOUNT_TO_APPROVE_FOR_TRANSFER);\r\n        return sendTransaction({\r\n            ...transaction,\r\n            from: address,\r\n        });\r\n    }\r\n    catch (e) {\r\n        console.error(e);\r\n        return TransactionState.Failed;\r\n    }\r\n}\r\nexport async function constructPosition(token0Amount, token1Amount) {\r\n    // get pool info\r\n    const poolInfo = await getPoolInfo(tokenLiquidity.token0, tokenLiquidity.token1, tokenLiquidity.poolFee);\r\n    // construct pool instance\r\n    const configuredPool = new Pool(token0Amount.currency, token1Amount.currency, poolInfo.fee, poolInfo.sqrtPriceX96.toString(), poolInfo.liquidity.toString(), poolInfo.tick);\r\n    // create position using the maximum liquidity from input amounts\r\n    return Position.fromAmounts({\r\n        pool: configuredPool,\r\n        tickLower: nearestUsableTick(poolInfo.tick, poolInfo.tickSpacing) -\r\n            poolInfo.tickSpacing * 2,\r\n        tickUpper: nearestUsableTick(poolInfo.tick, poolInfo.tickSpacing) +\r\n            poolInfo.tickSpacing * 2,\r\n        amount0: token0Amount.quotient,\r\n        amount1: token1Amount.quotient,\r\n        useFullPrecision: true,\r\n    });\r\n}\r\nexport async function mintPosition() {\r\n    const address = getWalletAddress();\r\n    const provider = getProvider();\r\n    if (!address || !provider) {\r\n        return TransactionState.Failed;\r\n    }\r\n    /*\r\n    // Give approval to the contract to transfer tokens\r\n    const tokenInApproval = await getTokenTransferApprovalPosition(\r\n      tokenLiquidity.token0\r\n    )\r\n    const tokenOutApproval = await getTokenTransferApprovalPosition(\r\n      tokenLiquidity.token1\r\n    )\r\n  \n    if (\r\n      tokenInApproval !== TransactionState.Sent ||\r\n      tokenOutApproval !== TransactionState.Sent\r\n    ) {\r\n      return TransactionState.Failed\r\n    }\r\n  */\r\n    const positionToMint = await constructPosition(CurrencyAmount.fromRawAmount(tokenLiquidity.token0, fromReadableAmount(tokenLiquidity.token0Amount, tokenLiquidity.token0.decimals)), CurrencyAmount.fromRawAmount(tokenLiquidity.token1, fromReadableAmount(tokenLiquidity.token1Amount, tokenLiquidity.token1.decimals)));\r\n    const mintOptions = {\r\n        recipient: address,\r\n        deadline: Math.floor(Date.now() / 1000) + 60 * 20,\r\n        slippageTolerance: new Percent(50, 10000),\r\n    };\r\n    // get calldata for minting a position\r\n    const { calldata, value } = NonfungiblePositionManager.addCallParameters(positionToMint, mintOptions);\r\n    // build transaction\r\n    const transaction = {\r\n        data: calldata,\r\n        to: CurrentConfig.NONFUNGIBLE_POSITION_MANAGER_CONTRACT_ADDRESS,\r\n        value: value,\r\n        from: address,\r\n        maxFeePerGas: MAX_FEE_PER_GAS,\r\n        maxPriorityFeePerGas: MAX_PRIORITY_FEE_PER_GAS,\r\n    };\r\n    return sendTransaction(transaction);\r\n}\r\n//# sourceMappingURL=liquidity.js.map","references":["/Users/tuan/WebstormProjects/trustless-swap-sdk/trustless-swap-sdk/node_modules/ethers/lib/index.d.ts","/Users/tuan/WebstormProjects/trustless-swap-sdk/trustless-swap-sdk/src/constants.ts","/Users/tuan/WebstormProjects/trustless-swap-sdk/trustless-swap-sdk/src/constants.ts","/Users/tuan/WebstormProjects/trustless-swap-sdk/trustless-swap-sdk/src/providers.ts","/Users/tuan/WebstormProjects/trustless-swap-sdk/trustless-swap-sdk/src/entities/pool.ts","/Users/tuan/WebstormProjects/trustless-swap-sdk/trustless-swap-sdk/src/entities/position.ts","/Users/tuan/WebstormProjects/trustless-swap-sdk/trustless-swap-sdk/src/utils/nearestUsableTick.ts","/Users/tuan/WebstormProjects/trustless-swap-sdk/trustless-swap-sdk/src/entities/token.ts","/Users/tuan/WebstormProjects/trustless-swap-sdk/trustless-swap-sdk/src/entities/fractions/percent.ts","/Users/tuan/WebstormProjects/trustless-swap-sdk/trustless-swap-sdk/src/entities/fractions/currencyAmount.ts","/Users/tuan/WebstormProjects/trustless-swap-sdk/trustless-swap-sdk/src/nonfungiblePositionManager.ts","/Users/tuan/WebstormProjects/trustless-swap-sdk/trustless-swap-sdk/src/config.ts","/Users/tuan/WebstormProjects/trustless-swap-sdk/trustless-swap-sdk/src/poolinfo.ts","/Users/tuan/WebstormProjects/trustless-swap-sdk/trustless-swap-sdk/src/providers.ts","/Users/tuan/WebstormProjects/trustless-swap-sdk/trustless-swap-sdk/src/conversion.ts"],"map":"{\"version\":3,\"file\":\"liquidity.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../src/liquidity.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/Users/tuan/WebstormProjects/trustless-swap-sdk/trustless-swap-sdk/liquidity.d.ts","writeByteOrderMark":false,"text":"import { BigNumber } from 'ethers';\r\nimport { TransactionState } from './providers';\r\nimport { Position } from './entities/position';\r\nimport { Token } from './entities/token';\r\nimport { CurrencyAmount } from './entities/fractions/currencyAmount';\r\nexport interface PositionInfo {\r\n    tickLower: number;\r\n    tickUpper: number;\r\n    liquidity: BigNumber;\r\n    feeGrowthInside0LastX128: BigNumber;\r\n    feeGrowthInside1LastX128: BigNumber;\r\n    tokensOwed0: BigNumber;\r\n    tokensOwed1: BigNumber;\r\n}\r\nexport declare function CollectFeeeById(tokenId: any): Promise<TransactionState>;\r\nexport declare function increaseLiquidity(tokenId: any, amount0Desired: any, amount1Desired: any, amount0Min: any, amount1Min: any, deadline: any): Promise<TransactionState>;\r\nexport declare function decreaseLiquidity(tokenId: any, liquidity: any, amount0Min: any, amount1Min: any, deadline: any): Promise<TransactionState>;\r\nexport declare function removePosition(tokenId: any): Promise<TransactionState>;\r\nexport declare function addLiquidityIncludeCreatePool(isNewPool: Boolean, fee: any, token0: any, token1: any, amountADesired: any, amountBDesired: any, lowerTick: any, upperTick: any, amount0Min: any, amount1Min: any, currentPrice: any, deadline: any): Promise<TransactionState>;\r\nexport declare function addLiquidity(positionId: number): Promise<TransactionState>;\r\nexport declare function removeLiquidity(positionId: number): Promise<TransactionState>;\r\nexport declare function getPositionIds(): Promise<number[]>;\r\nexport declare function getPositionInfo(tokenId: number): Promise<PositionInfo>;\r\nexport declare function getTokenTransferApprovalPosition(token: Token): Promise<TransactionState>;\r\nexport declare function constructPosition(token0Amount: CurrencyAmount<Token>, token1Amount: CurrencyAmount<Token>): Promise<Position>;\r\nexport declare function mintPosition(): Promise<TransactionState>;\r\n"}}
