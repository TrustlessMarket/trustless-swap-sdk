{"code":"import { BigNumber, ethers } from 'ethers';\r\nimport { CurrentConfig, CurrentWallet, WalletType } from './config';\r\n// Single copies of provider and wallet\r\nlet mainnetProvider = new ethers.providers.JsonRpcProvider(CurrentConfig.rpc);\r\nlet wallet;\r\nlet browserExtensionProvider;\r\nlet walletExtensionAddress = null;\r\nexport function refreshProvider(provider) {\r\n    mainnetProvider = new ethers.providers.JsonRpcProvider(CurrentConfig.rpc);\r\n    if (CurrentWallet.type == WalletType.PRIVATEKEY && CurrentWallet.privateKey != \"\") {\r\n        wallet = createWallet();\r\n    }\r\n    else if (CurrentWallet.type == WalletType.EXTENSION) {\r\n        if (!provider) {\r\n            provider = createBrowserExtensionProvider();\r\n        }\r\n        browserExtensionProvider = provider;\r\n    }\r\n}\r\n// Interfaces\r\nexport var TransactionState;\r\n(function (TransactionState) {\r\n    TransactionState[\"Failed\"] = \"Failed\";\r\n    TransactionState[\"New\"] = \"New\";\r\n    TransactionState[\"Rejected\"] = \"Rejected\";\r\n    TransactionState[\"Sending\"] = \"Sending\";\r\n    TransactionState[\"Sent\"] = \"Sent\";\r\n})(TransactionState || (TransactionState = {}));\r\n// Provider and Wallet Functions\r\nexport function getMainnetProvider() {\r\n    return mainnetProvider;\r\n}\r\nexport function getProvider() {\r\n    return CurrentWallet.type === WalletType.EXTENSION\r\n        ? browserExtensionProvider\r\n        : wallet.provider;\r\n}\r\nexport function getWalletAddress() {\r\n    return CurrentWallet.type === WalletType.EXTENSION\r\n        ? walletExtensionAddress\r\n        : wallet.address;\r\n}\r\nexport async function geSignerAddress() {\r\n    const signer = browserExtensionProvider?.getSigner();\r\n    if (!signer) {\r\n        return \"\";\r\n    }\r\n    const address = await signer.getAddress();\r\n    console.log(\"signer address\", address);\r\n    return address;\r\n}\r\nexport async function sendTransaction(transaction) {\r\n    if (CurrentWallet.type === WalletType.EXTENSION) {\r\n        transaction.maxFeePerGas = transaction.maxFeePerGas?.toString();\r\n        transaction.maxPriorityFeePerGas = transaction.maxPriorityFeePerGas?.toString();\r\n        return sendTransactionViaExtension(transaction);\r\n    }\r\n    else {\r\n        if (transaction.value) {\r\n            transaction.value = BigNumber.from(transaction.value);\r\n        }\r\n        //transaction.gasLimit = 1000000\r\n        return sendTransactionViaWallet(transaction);\r\n    }\r\n}\r\nexport async function sendTransactionGetReceipt(transaction) {\r\n    if (CurrentWallet.type === WalletType.EXTENSION) {\r\n        transaction.maxFeePerGas = transaction.maxFeePerGas?.toString();\r\n        transaction.maxPriorityFeePerGas = transaction.maxPriorityFeePerGas?.toString();\r\n        return sendTransactionViaExtensionGetReceipt(transaction);\r\n    }\r\n    else {\r\n        if (transaction.value) {\r\n            transaction.value = BigNumber.from(transaction.value);\r\n        }\r\n        transaction.gasLimit = 1000000;\r\n        return sendTransactionViaWalletReceipt(transaction);\r\n    }\r\n}\r\nexport async function connectBrowserExtensionWallet(provider = null) {\r\n    if (!provider) {\r\n        if (!window.ethereum) {\r\n            return null;\r\n        }\r\n        const { ethereum } = window;\r\n        provider = new ethers.providers.Web3Provider(ethereum);\r\n    }\r\n    const accounts = await provider.send('eth_requestAccounts', []);\r\n    if (accounts.length !== 1) {\r\n        return;\r\n    }\r\n    walletExtensionAddress = accounts[0];\r\n    return walletExtensionAddress;\r\n}\r\n// Internal Functionality\r\nfunction createWallet() {\r\n    let provider = mainnetProvider;\r\n    return new ethers.Wallet(CurrentWallet.privateKey, provider);\r\n}\r\nfunction createBrowserExtensionProvider() {\r\n    try {\r\n        return (new ethers.providers.Web3Provider(window?.ethereum, 'any'));\r\n    }\r\n    catch (e) {\r\n        console.log('No Wallet Extension Found');\r\n        return null;\r\n    }\r\n}\r\n// Transacting with a wallet extension via a Web3 Provider\r\nasync function sendTransactionViaExtension(transaction) {\r\n    try {\r\n        const receipt = await browserExtensionProvider?.send('eth_sendTransaction', [transaction]);\r\n        if (receipt) {\r\n            console.log(\"Meta mask receipt \", receipt);\r\n            return TransactionState.Sent;\r\n        }\r\n        else {\r\n            return TransactionState.Failed;\r\n        }\r\n    }\r\n    catch (e) {\r\n        console.log(\"Meta mask error \", e);\r\n        return TransactionState.Rejected;\r\n    }\r\n}\r\n// Transacting with a wallet extension via a Web3 Provider\r\nexport async function sendTransactionViaExtensionGetReceipt(transaction) {\r\n    try {\r\n        const receipt = await browserExtensionProvider?.send('eth_sendTransaction', [transaction]);\r\n        if (receipt) {\r\n            console.log(\"Meta mask receipt \", receipt);\r\n            return [TransactionState.Sent, receipt];\r\n        }\r\n        else {\r\n            return [TransactionState.Failed, null];\r\n        }\r\n    }\r\n    catch (e) {\r\n        console.log(\"Meta mask error \", e);\r\n        return [TransactionState.Rejected, null];\r\n    }\r\n}\r\nasync function sendTransactionViaWallet(transaction) {\r\n    if (transaction.value) {\r\n        transaction.value = BigNumber.from(transaction.value);\r\n    }\r\n    const txRes = await wallet.sendTransaction(transaction);\r\n    let receipt = null;\r\n    const provider = getProvider();\r\n    if (!provider) {\r\n        return TransactionState.Failed;\r\n    }\r\n    while (receipt === null) {\r\n        try {\r\n            receipt = await provider.getTransactionReceipt(txRes.hash);\r\n            if (receipt === null) {\r\n                continue;\r\n            }\r\n            console.log(`Receipt recived:`, receipt);\r\n        }\r\n        catch (e) {\r\n            console.log(`Receipt error:`, e);\r\n            break;\r\n        }\r\n    }\r\n    // Transaction was successful if status === 1\r\n    if (receipt) {\r\n        return TransactionState.Sent;\r\n    }\r\n    else {\r\n        return TransactionState.Failed;\r\n    }\r\n}\r\nasync function sendTransactionViaWalletReceipt(transaction) {\r\n    if (transaction.value) {\r\n        transaction.value = BigNumber.from(transaction.value);\r\n    }\r\n    const txRes = await wallet.sendTransaction(transaction);\r\n    let receipt = null;\r\n    const provider = getProvider();\r\n    if (!provider) {\r\n        return [TransactionState.Failed, null];\r\n    }\r\n    while (receipt === null) {\r\n        try {\r\n            receipt = await provider.getTransactionReceipt(txRes.hash);\r\n            if (receipt === null) {\r\n                continue;\r\n            }\r\n            console.log(`Receipt recived:`, receipt);\r\n        }\r\n        catch (e) {\r\n            console.log(`Receipt error:`, e);\r\n            break;\r\n        }\r\n    }\r\n    // Transaction was successful if status === 1\r\n    if (receipt) {\r\n        return [TransactionState.Sent, receipt];\r\n    }\r\n    else {\r\n        return [TransactionState.Failed, null];\r\n    }\r\n}\r\n//# sourceMappingURL=providers.js.map","references":["/Users/tuan/WebstormProjects/trustless-swap-sdk/trustless-swap-sdk/node_modules/@ethersproject/providers/lib/index.d.ts","/Users/tuan/WebstormProjects/trustless-swap-sdk/trustless-swap-sdk/node_modules/ethers/lib/index.d.ts","/Users/tuan/WebstormProjects/trustless-swap-sdk/trustless-swap-sdk/src/config.ts"],"map":"{\"version\":3,\"file\":\"providers.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../src/providers.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/Users/tuan/WebstormProjects/trustless-swap-sdk/trustless-swap-sdk/providers.d.ts","writeByteOrderMark":false,"text":"import { BaseProvider } from '@ethersproject/providers';\r\nimport { ethers, providers } from 'ethers';\r\nexport declare function refreshProvider(provider: any): void;\r\nexport declare enum TransactionState {\r\n    Failed = \"Failed\",\r\n    New = \"New\",\r\n    Rejected = \"Rejected\",\r\n    Sending = \"Sending\",\r\n    Sent = \"Sent\"\r\n}\r\nexport declare function getMainnetProvider(): BaseProvider;\r\nexport declare function getProvider(): providers.Provider | null;\r\nexport declare function getWalletAddress(): string | null;\r\nexport declare function geSignerAddress(): Promise<string>;\r\nexport declare function sendTransaction(transaction: ethers.providers.TransactionRequest): Promise<TransactionState>;\r\nexport declare function sendTransactionGetReceipt(transaction: ethers.providers.TransactionRequest): Promise<any>;\r\nexport declare function connectBrowserExtensionWallet(provider?: any): Promise<string | null | undefined>;\r\nexport declare function sendTransactionViaExtensionGetReceipt(transaction: ethers.providers.TransactionRequest): Promise<any>;\r\n"}}
