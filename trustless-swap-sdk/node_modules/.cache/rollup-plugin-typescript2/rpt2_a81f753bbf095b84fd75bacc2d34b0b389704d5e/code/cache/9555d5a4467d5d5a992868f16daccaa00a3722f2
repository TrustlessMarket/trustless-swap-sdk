{"code":"import { Token } from './entities/token';\r\nimport { FeeAmount } from './constants';\r\n//import { BigNumber } from \"@ethersproject/bignumber\"\r\n//import bn from \"bignumber.js\"\r\nexport var ETypes;\r\n(function (ETypes) {\r\n    ETypes[ETypes[\"issue\"] = 0] = \"issue\";\r\n    ETypes[ETypes[\"buy\"] = 1] = \"buy\";\r\n    ETypes[ETypes[\"sell\"] = 2] = \"sell\";\r\n    ETypes[ETypes[\"approve\"] = 3] = \"approve\";\r\n    ETypes[ETypes[\"update_creator_fee\"] = 4] = \"update_creator_fee\";\r\n    ETypes[ETypes[\"withdraw\"] = 5] = \"withdraw\";\r\n    ETypes[ETypes[\"createTournament\"] = 6] = \"createTournament\";\r\n    ETypes[ETypes[\"add_watch_list\"] = 7] = \"add_watch_list\";\r\n    ETypes[ETypes[\"remove_watch_list\"] = 8] = \"remove_watch_list\";\r\n    ETypes[ETypes[\"swap_tokens\"] = 9] = \"swap_tokens\";\r\n    ETypes[ETypes[\"transfer\"] = 10] = \"transfer\";\r\n    ETypes[ETypes[\"swap_eth_key\"] = 11] = \"swap_eth_key\";\r\n})(ETypes || (ETypes = {}));\r\nexport function encodePriceSqrt(reserve1, reserve0) {\r\n    const result = BigInt(Math.floor(Math.sqrt(reserve1 / reserve0) * 2 ** 96));\r\n    return result;\r\n}\r\nexport function priceToSqrtPrice(price) {\r\n    const result = BigInt(Math.floor(Math.sqrt(price) * 2 ** 96));\r\n    return result;\r\n}\r\nexport const typeToFee = {\r\n    [ETypes.issue]: 1000000,\r\n    [ETypes.buy]: 1000000,\r\n    [ETypes.sell]: 1000000,\r\n    [ETypes.approve]: 60000,\r\n    [ETypes.update_creator_fee]: 100000,\r\n    [ETypes.withdraw]: 2100000,\r\n    [ETypes.createTournament]: 350000,\r\n    [ETypes.add_watch_list]: 200000,\r\n    [ETypes.remove_watch_list]: 70000,\r\n    [ETypes.swap_tokens]: 2000000,\r\n    [ETypes.transfer]: 10000,\r\n    [ETypes.swap_eth_key]: 2000000,\r\n};\r\nexport var Environment;\r\n(function (Environment) {\r\n    Environment[Environment[\"LOCAL\"] = 0] = \"LOCAL\";\r\n    Environment[Environment[\"TESTNET\"] = 1] = \"TESTNET\";\r\n    Environment[Environment[\"MAINNET\"] = 2] = \"MAINNET\";\r\n    Environment[Environment[\"NAKATESTNET\"] = 3] = \"NAKATESTNET\";\r\n    Environment[Environment[\"NAKAMAINNET\"] = 4] = \"NAKAMAINNET\";\r\n})(Environment || (Environment = {}));\r\nexport var WalletType;\r\n(function (WalletType) {\r\n    WalletType[WalletType[\"EXTENSION\"] = 0] = \"EXTENSION\";\r\n    WalletType[WalletType[\"PRIVATEKEY\"] = 1] = \"PRIVATEKEY\";\r\n})(WalletType || (WalletType = {}));\r\n// Example Configuration\r\nexport const testnetConfig = {\r\n    env: Environment.TESTNET,\r\n    network: \"nos\",\r\n    swapApi: \"swap-v3\",\r\n    API_ROOT: \"https://dex-api.newbitcoincity.com\",\r\n    rpc: 'https://l2-node.regtest.trustless.computer',\r\n    POOL_FACTORY_CONTRACT_ADDRESS: '0x9D921bF7460d1FcfF77d88edd4D34cD1e2F56BDc',\r\n    QUOTER_CONTRACT_ADDRESS: '0xD228465a3E1C64Ed6C627a87132dc6b1552cd0F2',\r\n    SWAP_ROUTER_ADDRESS: '0x3a3885F7a03beC1F4A1c00f155A5d57168fDE205',\r\n    WETH_CONTRACT_ADDRESS: '0x0fba66555b74f13809862bd6f15fffa0a0237059',\r\n    TC_CONTRACT_ADDRESS: '0x8b485d217096cE20A09AF11D15ccCc63323C1469',\r\n    ALPHA_CONTRACT_ADDRESS: '0x056e34faC103a216Ce1bBe65B75521d5C5f59037',\r\n    NONFUNGIBLE_POSITION_MANAGER_CONTRACT_ADDRESS: '0xe6Dc33d13200f0A9CF7cFC7B484aE1891D934234',\r\n    tokens_list: [\r\n        new Token(1, '0x0FBa66555B74F13809862BD6f15FffA0A0237059', 18, 'WETH', 'Wrapped Ether'),\r\n        new Token(1, '0xB68BB951883A7c5f24C7e2Cca8d9A68CFC606F41', 18, 'USDC', 'USD//C'),\r\n        new Token(1, '0x1d45c32C97707C916b350042CEAC2164fb6D00A1', 18, 'WBTC', 'Wrapped BTC'),\r\n        new Token(1, '0xe051b16b611138e45B42d74EEE10F6370B0AA9B6', 18, 'GM', 'GM'),\r\n        new Token(1, '0x0F888a161Ca87a2F4dD08e1DBf38Aff80388E2AE', 18, 'NAKA', 'NAKA')\r\n    ],\r\n    chainName: 'nos'\r\n};\r\nexport const nakatestnetConfig = {\r\n    env: Environment.NAKATESTNET,\r\n    network: \"naka\",\r\n    swapApi: \"swap\",\r\n    API_ROOT: \"https://stag-naka-api.fprotocol.io\",\r\n    rpc: 'https://l2-node.regtest.trustless.computer',\r\n    POOL_FACTORY_CONTRACT_ADDRESS: '0x0CA45caD791CaB68BfaB71c536fD0A30384eEF64',\r\n    QUOTER_CONTRACT_ADDRESS: '0xbC693F10C74aFf16D78AF93FDF0737d0E2cbd961',\r\n    SWAP_ROUTER_ADDRESS: '0x7C9e6d498A3Dc8a672D6A1ddD7Acc9D6D88D63F9',\r\n    WETH_CONTRACT_ADDRESS: '0x0fba66555b74f13809862bd6f15fffa0a0237059',\r\n    TC_CONTRACT_ADDRESS: '0x3B9d9f8C9765c1BF7F4868c3721c136B70FD65fC',\r\n    ALPHA_CONTRACT_ADDRESS: '0x056e34faC103a216Ce1bBe65B75521d5C5f59037',\r\n    NONFUNGIBLE_POSITION_MANAGER_CONTRACT_ADDRESS: '0x48e6d71a83C969ac9CC1a93A49f74169520Dd187',\r\n    tokens_list: [\r\n        new Token(1, '0x0FBa66555B74F13809862BD6f15FffA0A0237059', 18, 'WETH', 'Wrapped Ether'),\r\n        new Token(1, '0xB68BB951883A7c5f24C7e2Cca8d9A68CFC606F41', 18, 'USDC', 'USD//C'),\r\n        new Token(1, '0x1d45c32C97707C916b350042CEAC2164fb6D00A1', 18, 'WBTC', 'Wrapped BTC')\r\n    ],\r\n    chainName: 'nos'\r\n};\r\nexport const nakamainnetConfig = {\r\n    env: Environment.NAKAMAINNET,\r\n    network: \"naka\",\r\n    swapApi: \"swap\",\r\n    API_ROOT: \"https://api.nakachain.xyz\",\r\n    rpc: 'https://node.nakachain.xyz',\r\n    POOL_FACTORY_CONTRACT_ADDRESS: '0xB4FdCd9e30f0d418e9BbdA2Ba9B6C59123dc6b6d',\r\n    QUOTER_CONTRACT_ADDRESS: '0xb81E3cE690DEb07AF108117E958C6C712FB1b95f',\r\n    SWAP_ROUTER_ADDRESS: '0x53004da3353Aec99CE9546Ff9BbcEDF37E80E46b',\r\n    WETH_CONTRACT_ADDRESS: '0xCebaA2326DF8821ac4FfE6fd8751E5f9982F4Ee5',\r\n    TC_CONTRACT_ADDRESS: '0x87415029485119E96775D9d6C0CE1b21822CF708',\r\n    ALPHA_CONTRACT_ADDRESS: '0x056e34faC103a216Ce1bBe65B75521d5C5f59037',\r\n    NONFUNGIBLE_POSITION_MANAGER_CONTRACT_ADDRESS: '0x0f24f93043fFE43A92e4F035bA67954f1CA0B4E4',\r\n    tokens_list: [\r\n        new Token(1, '0xCebaA2326DF8821ac4FfE6fd8751E5f9982F4Ee5', 18, 'WETH', 'Wrapped Ether'),\r\n        new Token(1, '0x08C50bAa19d834fef4A8dd7559a6105281D1C378', 18, 'USDC', 'USD//C'),\r\n        new Token(1, '0xBD0adB3Ee21e0A75D3021384177238883D69e883', 18, 'WBTC', 'Wrapped BTC')\r\n    ],\r\n    chainName: 'naka'\r\n};\r\nexport const mainnetConfig = {\r\n    env: Environment.MAINNET,\r\n    network: \"nos\",\r\n    swapApi: \"swap-v3\",\r\n    rpc: 'https://node.l2.trustless.computer',\r\n    API_ROOT: \"https://dex-api.newbitcoincity.com\",\r\n    POOL_FACTORY_CONTRACT_ADDRESS: '0x1d12AC81710da54A50e2e9095E20dB2D915Ce3C8',\r\n    QUOTER_CONTRACT_ADDRESS: '0x17f8275c3842f977d42Ab09c35042ddE4ec55856',\r\n    SWAP_ROUTER_ADDRESS: '0xB3eAc9358462356B231801309f553c48667B2CB7',\r\n    WETH_CONTRACT_ADDRESS: '0x43bda480de297a14cec95bfb1c6a313615f809ef',\r\n    NONFUNGIBLE_POSITION_MANAGER_CONTRACT_ADDRESS: '0x7D9D03317e90E477180dcFE28c75f8007Ecc6031',\r\n    TC_CONTRACT_ADDRESS: '0xad771ed0f8c5df06d21a7eda3b00acd6688dd532',\r\n    ALPHA_CONTRACT_ADDRESS: '0x9b727dcaC7b331f95786D3b01fA79191Ab527DA3',\r\n    tokens_list: [\r\n        new Token(1, '0x43bda480de297a14cec95bfb1c6a313615f809ef', 18, 'WETH', 'Wrapped Ether'),\r\n        new Token(1, '0xe8B280Ebb57bE03adC9d87e207BCD689EfADef96', 18, 'USDC', 'USD//C'),\r\n        new Token(1, '0x111808AbE352c8003e0eFfcc04998EaB26Cebe3c', 18, 'WBTC', 'Wrapped BTC'),\r\n        new Token(1, '0xdb380837095fbfAA4Ea65e7388Ef35A5FCad0334', 18, 'token1', 'token1'),\r\n        new Token(1, '0xBBA317FD4f2Cc8b8906D77cE410691dD9a6ee64F', 18, 'tk3', 'tk3')\r\n    ],\r\n    chainName: 'nos'\r\n};\r\nexport let CurrentConfig = mainnetConfig;\r\nexport let tokenSwap = {\r\n    in: CurrentConfig.tokens_list[0],\r\n    amountIn: 1,\r\n    out: CurrentConfig.tokens_list[1],\r\n    poolFee: FeeAmount.MEDIUM,\r\n};\r\nexport let tokenLiquidity = {\r\n    token0: CurrentConfig.tokens_list[3],\r\n    token0Amount: 0.5,\r\n    token1: CurrentConfig.tokens_list[4],\r\n    token1Amount: 0.2,\r\n    poolFee: FeeAmount.MEDIUM,\r\n    fractionToRemove: 1,\r\n    fractionToAdd: 0.5,\r\n};\r\nexport function setTOkenSwap(inputToken, amountIn, outToken, poolFee) {\r\n    tokenSwap = {\r\n        in: inputToken,\r\n        amountIn: amountIn,\r\n        out: outToken,\r\n        poolFee: poolFee,\r\n    };\r\n}\r\nexport function setTOkenIn(inputToken) {\r\n    tokenSwap[\"in\"] = inputToken;\r\n}\r\nexport function setTOkenOut(outToken) {\r\n    tokenSwap[\"out\"] = outToken;\r\n}\r\nexport function resetTOkenSwap() {\r\n    tokenSwap = {\r\n        in: CurrentConfig.tokens_list[0],\r\n        amountIn: 1,\r\n        out: CurrentConfig.tokens_list[1],\r\n        poolFee: FeeAmount.MEDIUM,\r\n    };\r\n}\r\nexport function choiceConFig(environment) {\r\n    if (environment == Environment.TESTNET) {\r\n        CurrentConfig = testnetConfig;\r\n    }\r\n    else if (environment == Environment.MAINNET) {\r\n        CurrentConfig = mainnetConfig;\r\n    }\r\n    else if (environment == Environment.NAKATESTNET) {\r\n        CurrentConfig = nakatestnetConfig;\r\n    }\r\n    else if (environment == Environment.NAKAMAINNET) {\r\n        CurrentConfig = nakamainnetConfig;\r\n    }\r\n    resetTOkenSwap();\r\n}\r\nexport function setConfig(config) {\r\n    CurrentConfig = config;\r\n    resetTOkenSwap();\r\n}\r\nexport let CurrentWallet = {\r\n    address: '',\r\n    privateKey: '',\r\n    type: WalletType.PRIVATEKEY,\r\n};\r\nexport function changeWallet(type, address, privateKey) {\r\n    CurrentWallet.address = address;\r\n    CurrentWallet.privateKey = privateKey;\r\n    CurrentWallet.type = type;\r\n}\r\n//# sourceMappingURL=config.js.map","references":["/Users/macbookpro/trustless-computer/trustless-swap-sdk/trustless-swap-sdk/src/entities/token.ts","/Users/macbookpro/trustless-computer/trustless-swap-sdk/trustless-swap-sdk/src/constants.ts"],"map":"{\"version\":3,\"file\":\"config.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../src/config.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/Users/macbookpro/trustless-computer/trustless-swap-sdk/trustless-swap-sdk/config.d.ts","writeByteOrderMark":false,"text":"import { Token } from './entities/token';\r\nimport { FeeAmount } from './constants';\r\nexport declare enum ETypes {\r\n    'issue' = 0,\r\n    'buy' = 1,\r\n    'sell' = 2,\r\n    'approve' = 3,\r\n    'update_creator_fee' = 4,\r\n    'withdraw' = 5,\r\n    'createTournament' = 6,\r\n    'add_watch_list' = 7,\r\n    'remove_watch_list' = 8,\r\n    'swap_tokens' = 9,\r\n    'transfer' = 10,\r\n    'swap_eth_key' = 11\r\n}\r\nexport declare type TokenType = 'BTC' | 'ETH';\r\nexport declare function encodePriceSqrt(reserve1: number, reserve0: number): BigInt;\r\nexport declare function priceToSqrtPrice(price: number): BigInt;\r\nexport declare const typeToFee: {\r\n    0: number;\r\n    1: number;\r\n    2: number;\r\n    3: number;\r\n    4: number;\r\n    5: number;\r\n    6: number;\r\n    7: number;\r\n    8: number;\r\n    9: number;\r\n    10: number;\r\n    11: number;\r\n};\r\nexport declare enum Environment {\r\n    LOCAL = 0,\r\n    TESTNET = 1,\r\n    MAINNET = 2,\r\n    NAKATESTNET = 3,\r\n    NAKAMAINNET = 4\r\n}\r\nexport declare enum WalletType {\r\n    EXTENSION = 0,\r\n    PRIVATEKEY = 1\r\n}\r\nexport interface EnvironmentConfig {\r\n    env: Environment;\r\n    rpc: string;\r\n    network: string;\r\n    swapApi: string;\r\n    API_ROOT: string;\r\n    POOL_FACTORY_CONTRACT_ADDRESS: string;\r\n    QUOTER_CONTRACT_ADDRESS: string;\r\n    SWAP_ROUTER_ADDRESS: string;\r\n    WETH_CONTRACT_ADDRESS: string;\r\n    NONFUNGIBLE_POSITION_MANAGER_CONTRACT_ADDRESS: string;\r\n    TC_CONTRACT_ADDRESS: string;\r\n    ALPHA_CONTRACT_ADDRESS: string;\r\n    tokens_list: Array<Token>;\r\n    chainName: string;\r\n}\r\nexport declare const testnetConfig: EnvironmentConfig;\r\nexport declare const nakatestnetConfig: EnvironmentConfig;\r\nexport declare const nakamainnetConfig: EnvironmentConfig;\r\nexport declare const mainnetConfig: EnvironmentConfig;\r\nexport declare let CurrentConfig: EnvironmentConfig;\r\nexport declare let tokenSwap: {\r\n    in: Token;\r\n    amountIn: number;\r\n    out: Token;\r\n    poolFee: FeeAmount;\r\n};\r\nexport declare let tokenLiquidity: {\r\n    token0: Token;\r\n    token0Amount: number;\r\n    token1: Token;\r\n    token1Amount: number;\r\n    poolFee: FeeAmount;\r\n    fractionToRemove: number;\r\n    fractionToAdd: number;\r\n};\r\nexport declare function setTOkenSwap(inputToken: Token, amountIn: number, outToken: Token, poolFee: number): void;\r\nexport declare function setTOkenIn(inputToken: Token): void;\r\nexport declare function setTOkenOut(outToken: Token): void;\r\nexport declare function resetTOkenSwap(): void;\r\nexport declare function choiceConFig(environment: number): void;\r\nexport declare function setConfig(config: EnvironmentConfig): void;\r\nexport interface walletConfig {\r\n    address: string;\r\n    privateKey: string;\r\n    type: WalletType;\r\n}\r\nexport declare let CurrentWallet: walletConfig;\r\nexport declare function changeWallet(type: WalletType, address: string, privateKey: string): void;\r\n"}}
