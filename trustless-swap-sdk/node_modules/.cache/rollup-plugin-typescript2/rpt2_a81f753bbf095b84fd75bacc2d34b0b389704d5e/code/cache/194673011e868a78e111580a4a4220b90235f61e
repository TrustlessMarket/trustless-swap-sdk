{"code":"import { Interface } from '@ethersproject/abi';\r\nimport { ADDRESS_ZERO, TradeType } from '../constants';\r\nimport { validateAndParseAddress } from '../utils/validateAndParseAddress';\r\nimport { CurrencyAmount } from './fractions/currencyAmount';\r\nimport invariant from 'tiny-invariant';\r\nimport { SelfPermit } from '../selfPermit';\r\nimport { encodeRouteToPath } from '../utils/encodeRouteToPath';\r\nimport { toHex } from '../utils/calldata';\r\nimport ISwapRouter from './SwRouter.json';\r\nimport { Multicall } from './multicall';\r\nimport { Payments } from './payments';\r\nimport { CurrentConfig } from '../config';\r\n/**\r\n * Represents the trustless-swap V3 SwapRouter, and has static methods for helping execute trades.\r\n */\r\nexport class SwapRouter {\r\n    /**\r\n     * Cannot be constructed.\r\n     */\r\n    constructor() { }\r\n    /**\r\n     * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\r\n     * @param trade to produce call parameters for\r\n     * @param options options for the call parameters\r\n     */\r\n    static swapCallParameters(trades, options) {\r\n        if (!Array.isArray(trades)) {\r\n            trades = [trades];\r\n        }\r\n        const sampleTrade = trades[0];\r\n        const tokenIn = sampleTrade.inputAmount.currency.wrapped;\r\n        const tokenOut = sampleTrade.outputAmount.currency.wrapped;\r\n        // All trades should have the same starting and ending token.\r\n        invariant(trades.every(trade => trade.inputAmount.currency.wrapped.equals(tokenIn)), 'TOKEN_IN_DIFF');\r\n        invariant(trades.every(trade => trade.outputAmount.currency.wrapped.equals(tokenOut)), 'TOKEN_OUT_DIFF');\r\n        const calldatas = [];\r\n        const ZERO_IN = CurrencyAmount.fromRawAmount(trades[0].inputAmount.currency, 0);\r\n        const ZERO_OUT = CurrencyAmount.fromRawAmount(trades[0].outputAmount.currency, 0);\r\n        const totalAmountOut = trades.reduce((sum, trade) => sum.add(trade.minimumAmountOut(options.slippageTolerance)), ZERO_OUT);\r\n        // flag for whether a refund needs to happen\r\n        const mustRefund = (sampleTrade.inputAmount.currency.isNative || sampleTrade.inputAmount.currency.address.toLowerCase() == CurrentConfig.TC_CONTRACT_ADDRESS.toLowerCase()) && sampleTrade.tradeType === TradeType.EXACT_OUTPUT;\r\n        const inputIsNative = sampleTrade.inputAmount.currency.isNative || sampleTrade.inputAmount.currency.address.toLowerCase() == CurrentConfig.TC_CONTRACT_ADDRESS.toLowerCase();\r\n        // flags for whether funds should be send first to the router\r\n        const outputIsNative = sampleTrade.outputAmount.currency.isNative || sampleTrade.outputAmount.currency.address.toLowerCase() == CurrentConfig.TC_CONTRACT_ADDRESS.toLowerCase();\r\n        const routerMustCustody = outputIsNative || !!options.fee;\r\n        const totalValue = inputIsNative\r\n            ? trades.reduce((sum, trade) => sum.add(trade.maximumAmountIn(options.slippageTolerance)), ZERO_IN)\r\n            : ZERO_IN;\r\n        // encode permit if necessary\r\n        if (options.inputTokenPermit) {\r\n            invariant(sampleTrade.inputAmount.currency.isToken, 'NON_TOKEN_PERMIT');\r\n            calldatas.push(SelfPermit.encodePermit(sampleTrade.inputAmount.currency, options.inputTokenPermit));\r\n        }\r\n        const recipient = validateAndParseAddress(options.recipient);\r\n        const deadline = toHex(options.deadline);\r\n        for (const trade of trades) {\r\n            for (const { route, inputAmount, outputAmount } of trade.swaps) {\r\n                const amountIn = toHex(trade.maximumAmountIn(options.slippageTolerance, inputAmount).quotient);\r\n                const amountOut = toHex(trade.minimumAmountOut(options.slippageTolerance, outputAmount).quotient);\r\n                // flag for whether the trade is single hop or not\r\n                const singleHop = route.pools.length === 1;\r\n                if (singleHop) {\r\n                    if (trade.tradeType === TradeType.EXACT_INPUT) {\r\n                        const exactInputSingleParams = {\r\n                            tokenIn: route.tokenPath[0].address,\r\n                            tokenOut: route.tokenPath[1].address,\r\n                            fee: route.pools[0].fee,\r\n                            recipient: routerMustCustody ? ADDRESS_ZERO : recipient,\r\n                            deadline,\r\n                            amountIn,\r\n                            amountOutMinimum: amountOut,\r\n                            sqrtPriceLimitX96: toHex(options.sqrtPriceLimitX96 ?? 0)\r\n                        };\r\n                        calldatas.push(SwapRouter.INTERFACE.encodeFunctionData('exactInputSingle', [exactInputSingleParams]));\r\n                    }\r\n                    else {\r\n                        const exactOutputSingleParams = {\r\n                            tokenIn: route.tokenPath[0].address,\r\n                            tokenOut: route.tokenPath[1].address,\r\n                            fee: route.pools[0].fee,\r\n                            recipient: routerMustCustody ? ADDRESS_ZERO : recipient,\r\n                            deadline,\r\n                            amountOut,\r\n                            amountInMaximum: amountIn,\r\n                            sqrtPriceLimitX96: toHex(options.sqrtPriceLimitX96 ?? 0)\r\n                        };\r\n                        calldatas.push(SwapRouter.INTERFACE.encodeFunctionData('exactOutputSingle', [exactOutputSingleParams]));\r\n                    }\r\n                }\r\n                else {\r\n                    invariant(options.sqrtPriceLimitX96 === undefined, 'MULTIHOP_PRICE_LIMIT');\r\n                    const path = encodeRouteToPath(route, trade.tradeType === TradeType.EXACT_OUTPUT);\r\n                    if (trade.tradeType === TradeType.EXACT_INPUT) {\r\n                        const exactInputParams = {\r\n                            path,\r\n                            recipient: routerMustCustody ? ADDRESS_ZERO : recipient,\r\n                            deadline,\r\n                            amountIn,\r\n                            amountOutMinimum: amountOut\r\n                        };\r\n                        calldatas.push(SwapRouter.INTERFACE.encodeFunctionData('exactInput', [exactInputParams]));\r\n                    }\r\n                    else {\r\n                        const exactOutputParams = {\r\n                            path,\r\n                            recipient: routerMustCustody ? ADDRESS_ZERO : recipient,\r\n                            deadline,\r\n                            amountOut,\r\n                            amountInMaximum: amountIn\r\n                        };\r\n                        calldatas.push(SwapRouter.INTERFACE.encodeFunctionData('exactOutput', [exactOutputParams]));\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        // unwrap\r\n        if (routerMustCustody) {\r\n            if (!!options.fee) {\r\n                if (outputIsNative) {\r\n                    calldatas.push(Payments.encodeUnwrapWETH9(totalAmountOut.quotient, recipient, options.fee));\r\n                }\r\n                else {\r\n                    calldatas.push(Payments.encodeSweepToken(sampleTrade.outputAmount.currency.wrapped, totalAmountOut.quotient, recipient, options.fee));\r\n                }\r\n            }\r\n            else {\r\n                calldatas.push(Payments.encodeUnwrapWETH9(totalAmountOut.quotient, recipient));\r\n            }\r\n        }\r\n        // refund\r\n        if (mustRefund) {\r\n            calldatas.push(Payments.encodeRefundETH());\r\n        }\r\n        return {\r\n            calldata: Multicall.encodeMulticall(calldatas),\r\n            value: toHex(totalValue.quotient)\r\n        };\r\n    }\r\n}\r\nSwapRouter.INTERFACE = new Interface(ISwapRouter.abi);\r\n//# sourceMappingURL=swapRouter.js.map","references":["/Users/macbookpro/trustless-computer/trustless-swap-sdk/trustless-swap-sdk/node_modules/@ethersproject/abi/lib/index.d.ts","/Users/macbookpro/trustless-computer/trustless-swap-sdk/trustless-swap-sdk/src/constants.ts","/Users/macbookpro/trustless-computer/trustless-swap-sdk/trustless-swap-sdk/src/utils/validateAndParseAddress.ts","/Users/macbookpro/trustless-computer/trustless-swap-sdk/trustless-swap-sdk/src/entities/currency.ts","/Users/macbookpro/trustless-computer/trustless-swap-sdk/trustless-swap-sdk/src/entities/fractions/currencyAmount.ts","/Users/macbookpro/trustless-computer/trustless-swap-sdk/trustless-swap-sdk/src/entities/fractions/percent.ts","/Users/macbookpro/trustless-computer/trustless-swap-sdk/trustless-swap-sdk/node_modules/tiny-invariant/dist/tiny-invariant.d.ts","/Users/macbookpro/trustless-computer/trustless-swap-sdk/trustless-swap-sdk/src/entities/trade.ts","/Users/macbookpro/trustless-computer/trustless-swap-sdk/trustless-swap-sdk/src/selfPermit.ts","/Users/macbookpro/trustless-computer/trustless-swap-sdk/trustless-swap-sdk/src/utils/encodeRouteToPath.ts","/Users/macbookpro/trustless-computer/trustless-swap-sdk/trustless-swap-sdk/src/utils/calldata.ts","/Users/macbookpro/trustless-computer/trustless-swap-sdk/trustless-swap-sdk/src/entities/SwRouter.json","/Users/macbookpro/trustless-computer/trustless-swap-sdk/trustless-swap-sdk/src/entities/multicall.ts","/Users/macbookpro/trustless-computer/trustless-swap-sdk/trustless-swap-sdk/src/entities/payments.ts","/Users/macbookpro/trustless-computer/trustless-swap-sdk/trustless-swap-sdk/src/config.ts"],"map":"{\"version\":3,\"file\":\"swapRouter.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/entities/swapRouter.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/Users/macbookpro/trustless-computer/trustless-swap-sdk/trustless-swap-sdk/entities/swapRouter.d.ts","writeByteOrderMark":false,"text":"import { Interface } from '@ethersproject/abi';\r\nimport { BigintIsh, TradeType } from '../constants';\r\nimport { Currency } from './currency';\r\nimport { Percent } from './fractions/percent';\r\nimport { Trade } from './trade';\r\nimport { PermitOptions } from '../selfPermit';\r\nimport { MethodParameters } from '../utils/calldata';\r\nimport { FeeOptions } from './payments';\r\n/**\r\n * Options for producing the arguments to send calls to the router.\r\n */\r\nexport interface SwapOptions {\r\n    /**\r\n     * How much the execution price is allowed to move unfavorably from the trade execution price.\r\n     */\r\n    slippageTolerance: Percent;\r\n    /**\r\n     * The account that should receive the output.\r\n     */\r\n    recipient: string;\r\n    /**\r\n     * When the transaction expires, in epoch seconds.\r\n     */\r\n    deadline: BigintIsh;\r\n    /**\r\n     * The optional permit parameters for spending the input.\r\n     */\r\n    inputTokenPermit?: PermitOptions;\r\n    /**\r\n     * The optional price limit for the trade.\r\n     */\r\n    sqrtPriceLimitX96?: BigintIsh;\r\n    /**\r\n     * Optional information for taking a fee on output.\r\n     */\r\n    fee?: FeeOptions;\r\n}\r\n/**\r\n * Represents the trustless-swap V3 SwapRouter, and has static methods for helping execute trades.\r\n */\r\nexport declare abstract class SwapRouter {\r\n    static INTERFACE: Interface;\r\n    /**\r\n     * Cannot be constructed.\r\n     */\r\n    private constructor();\r\n    /**\r\n     * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\r\n     * @param trade to produce call parameters for\r\n     * @param options options for the call parameters\r\n     */\r\n    static swapCallParameters(trades: Trade<Currency, Currency, TradeType> | Trade<Currency, Currency, TradeType>[], options: SwapOptions): MethodParameters;\r\n}\r\n"}}
