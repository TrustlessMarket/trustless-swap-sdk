{"code":"import { ethers } from 'ethers';\r\nimport { SwapRouter } from './entities/swapRouter';\r\nimport { SwapRouterNaka } from './entities/swapRouterNaka';\r\nimport { Percent } from './entities/fractions/percent';\r\nimport { ERC20_ABI, TOKEN_AMOUNT_TO_APPROVE_FOR_TRANSFER, TradeType } from './constants';\r\nimport { Token } from './entities/token';\r\nimport { Trade } from './entities/trade';\r\nimport { CurrencyAmount } from './entities/fractions/currencyAmount';\r\nimport { Route } from './entities/route';\r\nimport JSBI from 'jsbi';\r\nimport { encodePath, getPoolInfoByToken } from './poolinfo';\r\n//import queryString from 'query-string';\r\nimport { isEmpty, random } from 'lodash';\r\nimport camelCase from 'lodash/camelCase';\r\nimport { CurrentConfig, CurrentWallet, tokenSwap, WalletType } from './config';\r\nimport { geSignerAddress, getProvider, getWalletAddress, sendTransaction, sendTransactionGetReceipt, TransactionState } from './providers';\r\nimport { getCurrencyApproveRouter } from './wallet';\r\nimport { fromReadableAmount } from './utils1';\r\nimport QuoterV2ABI from \"./QuoterV2.json\";\r\nimport QuoterV2ABINaka from \"./QuoterV2Naka.json\";\r\nimport axios from 'axios';\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nexport const camelCaseKeys = (obj) => {\r\n    if (Boolean(obj) && !isEmpty(obj) && Array.isArray(obj)) {\r\n        return obj.map((v) => camelCaseKeys(v));\r\n    }\r\n    if (Boolean(obj) && obj !== null && obj.constructor === Object) {\r\n        return Object.keys(obj).reduce((result, key) => ({\r\n            ...result,\r\n            [camelCase(key)]: camelCaseKeys(obj[key]),\r\n        }), {});\r\n    }\r\n    return obj;\r\n};\r\nexport const swrFetcher = async (url, options) => {\r\n    const { method, data, ...rest } = options;\r\n    try {\r\n        const response = await axios.request({ url, method, data, ...rest });\r\n        return camelCaseKeys(response?.data?.data || response?.data?.result);\r\n    }\r\n    catch (error) {\r\n        throw new Error('Something went wrong');\r\n    }\r\n};\r\nexport async function getListRoute(from, to) {\r\n    let listrs = [];\r\n    try {\r\n        const res = await fetch(CurrentConfig.API_ROOT + `/api/swap/token/route/v2?network=${CurrentConfig.chainName}&from_token=` + from + '&to_token=' + to).then((res) => {\r\n            return res.json();\r\n        });\r\n        for (let index = 0; index < res.data.length; index++) {\r\n            listrs.push(res.data[index]);\r\n        }\r\n    }\r\n    catch (error) {\r\n    }\r\n    finally {\r\n    }\r\n    return listrs;\r\n}\r\nexport const getSwapTokensV1 = async (params) => {\r\n    const qs = '?' + new URLSearchParams(params).toString();\r\n    return swrFetcher(`${CurrentConfig.API_ROOT}/api/swap/token/list/v1${qs}`, {\r\n        method: 'GET',\r\n        error: 'Fail to get tokens data',\r\n    });\r\n};\r\nexport const getSwapRoutesV2 = async (params) => {\r\n    const qs = '?' + new URLSearchParams(params).toString();\r\n    return swrFetcher(`${CurrentConfig.API_ROOT}/api/swap/token/route/v2${qs}`, {\r\n        method: 'GET',\r\n        error: 'Fail to get route',\r\n    });\r\n};\r\nlet listToken = [];\r\nexport function gettokenIndex(listToken, address) {\r\n    let position = -1;\r\n    for (let index = 0; index < listToken.length; index++) {\r\n        if (listToken[index].address.toLowerCase() == address.toLowerCase()) {\r\n            position = index;\r\n        }\r\n    }\r\n    return position;\r\n}\r\nexport const reCheckRouteInSlippage = async function (amountIn, route, slippage, maxSlippage, oldNumber) {\r\n    const provider = getProvider();\r\n    if (!provider) {\r\n        throw new Error('No provider');\r\n    }\r\n    try {\r\n        const addresses = route?.pathTokens?.map((token) => token.address);\r\n        const fees = route?.pathPairs?.map((pair) => Number(pair.fee));\r\n        try {\r\n            const quoteContract = new ethers.Contract(CurrentConfig.QUOTER_CONTRACT_ADDRESS, QuoterV2ABI.abi, provider);\r\n            const transaction = await quoteContract\r\n                .connect(provider)\r\n                .callStatic\r\n                .quoteExactInput(encodePath(addresses, fees), ethers.utils.parseEther(amountIn.toString()));\r\n            const out = Number(transaction.amountOut.toString());\r\n            if (out < oldNumber * (1.0 - slippage / 10000)) {\r\n                if (out >= oldNumber * (1.0 - maxSlippage / 10000)) {\r\n                    let listPools = [];\r\n                    for (var pair of route.pathPairs) {\r\n                        const index0 = gettokenIndex(route.pathTokens, pair.token0);\r\n                        const token0 = new Token(1, route.pathTokens[index0].address, Number(route.pathTokens[index0].decimal), route.pathTokens[index0].symbol, route.pathTokens[index0].name);\r\n                        const index1 = gettokenIndex(route.pathTokens, pair.token1);\r\n                        const token1 = new Token(1, route.pathTokens[index1].address, Number(route.pathTokens[index1].decimal), route.pathTokens[index1].symbol, route.pathTokens[index1].name);\r\n                        const p = await getPoolInfoByToken(token0, token1, parseInt(pair.fee));\r\n                        listPools.push(p);\r\n                    }\r\n                    const swapRout1 = new Route(listPools, tokenSwap.in, tokenSwap.out);\r\n                    const uncheckedTrade = Trade.createUncheckedTrade({\r\n                        route: swapRout1,\r\n                        inputAmount: CurrencyAmount.fromRawAmount(tokenSwap.in, fromReadableAmount(tokenSwap.amountIn, tokenSwap.in.decimals).toString()),\r\n                        outputAmount: CurrencyAmount.fromRawAmount(tokenSwap.out, JSBI.BigInt(out)),\r\n                        tradeType: TradeType.EXACT_INPUT,\r\n                    });\r\n                    return [true, uncheckedTrade];\r\n                }\r\n                return [true];\r\n            }\r\n            else {\r\n                return [false];\r\n            }\r\n        }\r\n        catch (e) {\r\n            console.log(\"reCheckRouteIn e\", e);\r\n            return [true];\r\n        }\r\n    }\r\n    catch (error) {\r\n        console.log(\"reCheckRouteIn all\", error);\r\n        return [true];\r\n    }\r\n    finally {\r\n    }\r\n};\r\nexport const reCheckRouteOutSlippage = async function (amountOut, route, slippage, maxSlippage, oldNumber) {\r\n    const provider = getProvider();\r\n    if (!provider) {\r\n        throw new Error('No provider');\r\n    }\r\n    try {\r\n        let addresses = route?.pathTokens?.map((token) => token.address);\r\n        let fees = route?.pathPairs?.map((pair) => Number(pair.fee));\r\n        addresses = addresses.reverse();\r\n        fees = fees.reverse();\r\n        try {\r\n            const quoteContract = new ethers.Contract(CurrentConfig.QUOTER_CONTRACT_ADDRESS, QuoterV2ABI.abi, provider);\r\n            const transaction = await quoteContract\r\n                .connect(provider)\r\n                .callStatic\r\n                .quoteExactOutput(encodePath(addresses, fees), ethers.utils.parseEther(amountOut.toString()));\r\n            const input = Number(transaction.amountIn.toString());\r\n            if (input > oldNumber * 1.0 / (1.0 - slippage / 10000)) {\r\n                if (input <= oldNumber / (1.0 - maxSlippage / 10000)) {\r\n                    let listPools = [];\r\n                    for (var pair of route.pathPairs) {\r\n                        const index0 = gettokenIndex(route.pathTokens, pair.token0);\r\n                        const token0 = new Token(1, route.pathTokens[index0].address, Number(route.pathTokens[index0].decimal), route.pathTokens[index0].symbol, route.pathTokens[index0].name);\r\n                        const index1 = gettokenIndex(route.pathTokens, pair.token1);\r\n                        const token1 = new Token(1, route.pathTokens[index1].address, Number(route.pathTokens[index1].decimal), route.pathTokens[index1].symbol, route.pathTokens[index1].name);\r\n                        const p = await getPoolInfoByToken(token0, token1, parseInt(pair.fee));\r\n                        listPools.push(p);\r\n                    }\r\n                    const swapRout1 = new Route(listPools, tokenSwap.in, tokenSwap.out);\r\n                    const uncheckedTrade = Trade.createUncheckedTrade({\r\n                        route: swapRout1,\r\n                        inputAmount: CurrencyAmount.fromRawAmount(tokenSwap.in, JSBI.BigInt(input)),\r\n                        outputAmount: CurrencyAmount.fromRawAmount(tokenSwap.out, fromReadableAmount(amountOut, tokenSwap.in.decimals).toString()),\r\n                        tradeType: TradeType.EXACT_OUTPUT,\r\n                    });\r\n                    return [true, uncheckedTrade];\r\n                }\r\n                return [true];\r\n            }\r\n            else {\r\n                return [false];\r\n            }\r\n        }\r\n        catch (e) {\r\n            console.log(\"reCheckRouteout e\", e);\r\n            return [true];\r\n        }\r\n    }\r\n    catch (error) {\r\n        console.log(\"reCheckRouteout all\", error);\r\n        return [true];\r\n    }\r\n    finally {\r\n    }\r\n};\r\n// Trading Functions\r\nexport const getBestRouteExactIn = async function (amountIn, swapRoutes = [], listToken1 = []) {\r\n    try {\r\n        const provider = getProvider();\r\n        if (!provider) {\r\n            throw new Error('No provider');\r\n        }\r\n        const quoteContract = new ethers.Contract(CurrentConfig.QUOTER_CONTRACT_ADDRESS, QuoterV2ABI.abi, provider);\r\n        let listPools = [];\r\n        if (swapRoutes.length == 0) {\r\n            const params = {\r\n                from_token: tokenSwap.in.address,\r\n                to_token: tokenSwap.out.address,\r\n                network: CurrentConfig.network\r\n            };\r\n            swapRoutes = await getSwapRoutesV2(params);\r\n        }\r\n        if (listToken1.length == 0) {\r\n            /*\r\n            const res = await getSwapTokensV1({\r\n              limit: 500,\r\n              page: 1,\r\n              is_test: CurrentConfig.env == Environment.TESTNET ? '1' : '',\r\n              network:  CurrentConfig.chainName || \"nos\",\r\n            });\r\n        \n            listToken1 = res ? camelCaseKeys(res) : [];\r\n           */\r\n        }\r\n        let swapRoutes1 = [];\r\n        for (var route of swapRoutes) {\r\n            if (route?.pathPairs.length > 0 && (Number(route?.pathPairs[0].reserve0) > 0.000001 || Number(route?.pathPairs[0].reserve1) > 0.000001)) {\r\n                swapRoutes1.push(route);\r\n            }\r\n        }\r\n        const promises = swapRoutes1.map(async (route) => {\r\n            const addresses = route?.pathTokens?.map((token) => token.address);\r\n            const fees = route?.pathPairs?.map((pair) => Number(pair.fee));\r\n            try {\r\n                const transaction = await quoteContract\r\n                    .connect(provider)\r\n                    .callStatic\r\n                    .quoteExactInput(encodePath(addresses, fees), ethers.utils.parseEther(amountIn.toString()));\r\n                return Number(transaction.amountOut.toString());\r\n            }\r\n            catch (e) {\r\n                console.log(\"quoteExactIn error route,addresses,fees, encodePath(addresses, fees),ethers.utils.parseEther(amountIn.toString()),e\", route, addresses, fees, encodePath(addresses, fees), ethers.utils.parseEther(amountIn.toString()), e);\r\n            }\r\n            return 0;\r\n        });\r\n        const res = await Promise.all(promises);\r\n        console.log(\"res\", res);\r\n        const result = Math.max(...res);\r\n        if (result == 0) {\r\n            return [-1];\r\n        }\r\n        const indexBestRoute = res.indexOf(result);\r\n        const bestRoute = swapRoutes1[indexBestRoute];\r\n        for (var pair of bestRoute.pathPairs) {\r\n            const index0 = gettokenIndex(bestRoute.pathTokens, pair.token0);\r\n            const token0 = new Token(1, bestRoute.pathTokens[index0].address, Number(bestRoute.pathTokens[index0].decimal), bestRoute.pathTokens[index0].symbol, bestRoute.pathTokens[index0].name);\r\n            const index1 = gettokenIndex(bestRoute.pathTokens, pair.token1);\r\n            const token1 = new Token(1, bestRoute.pathTokens[index1].address, Number(bestRoute.pathTokens[index1].decimal), bestRoute.pathTokens[index1].symbol, bestRoute.pathTokens[index1].name);\r\n            const p = await getPoolInfoByToken(token0, token1, parseInt(pair.fee));\r\n            listPools.push(p);\r\n        }\r\n        const swapRout1 = new Route(listPools, tokenSwap.in, tokenSwap.out);\r\n        const uncheckedTrade = Trade.createUncheckedTrade({\r\n            route: swapRout1,\r\n            inputAmount: CurrencyAmount.fromRawAmount(tokenSwap.in, fromReadableAmount(tokenSwap.amountIn, tokenSwap.in.decimals).toString()),\r\n            outputAmount: CurrencyAmount.fromRawAmount(tokenSwap.out, JSBI.BigInt(result)),\r\n            tradeType: TradeType.EXACT_INPUT,\r\n        });\r\n        return [result, bestRoute, uncheckedTrade, result.toLocaleString('fullwide', { useGrouping: false })];\r\n    }\r\n    catch (error) {\r\n        console.log(\"quoteExactInput Exception all\", error);\r\n    }\r\n    finally {\r\n    }\r\n    return [-1];\r\n};\r\nexport const getBestRouteExactOut = async function (amountOut, swapRoutes = [], listToken1 = []) {\r\n    try {\r\n        const provider = getProvider();\r\n        if (!provider) {\r\n            throw new Error('No provider');\r\n        }\r\n        const quoteContract = new ethers.Contract(CurrentConfig.QUOTER_CONTRACT_ADDRESS, QuoterV2ABI.abi, provider);\r\n        let listPools = [];\r\n        if (swapRoutes.length == 0) {\r\n            const params = {\r\n                from_token: tokenSwap.in.address,\r\n                to_token: tokenSwap.out.address,\r\n                network: CurrentConfig.network\r\n            };\r\n            swapRoutes = await getSwapRoutesV2(params);\r\n        }\r\n        if (listToken1.length == 0) {\r\n            /*\r\n            const res = await getSwapTokensV1({\r\n              limit: 500,\r\n              page: 1,\r\n              is_test: CurrentConfig.env == Environment.TESTNET ? '1' : '',\r\n              network:  CurrentConfig.chainName || \"nos\",\r\n            });\r\n      \n            listToken1 = res ? camelCaseKeys(res) : [];\r\n             */\r\n        }\r\n        let swapRoutes1 = [];\r\n        for (let route of swapRoutes) {\r\n            if (route?.pathPairs.length > 0 && (Number(route?.pathPairs[0].reserve0) > 0.000001 || Number(route?.pathPairs[0].reserve1) > 0.000001)) {\r\n                swapRoutes1.push(route);\r\n            }\r\n        }\r\n        const promises = swapRoutes1.map(async (route) => {\r\n            let addresses = route?.pathTokens?.map((token) => token.address);\r\n            let fees = route?.pathPairs?.map((pair) => Number(pair.fee));\r\n            addresses = addresses.reverse();\r\n            fees = fees.reverse();\r\n            try {\r\n                const transaction = await quoteContract\r\n                    .connect(provider)\r\n                    .callStatic\r\n                    .quoteExactOutput(encodePath(addresses, fees), ethers.utils.parseEther(amountOut.toString()));\r\n                return Number(transaction.amountIn.toString());\r\n            }\r\n            catch (e) {\r\n                console.log(\"quoteExactOutput error route,addresses,fees, encodePath(addresses, fees),ethers.utils.parseEther(amountIn.toString()),e\", route, addresses, fees, encodePath(addresses, fees), ethers.utils.parseEther(amountOut.toString()), e);\r\n            }\r\n            return 0;\r\n        });\r\n        const res = await Promise.all(promises);\r\n        let returnIndex = -1;\r\n        res.forEach(function (value, index, arr) {\r\n            if (value > 0 && returnIndex == -1) {\r\n                returnIndex = index;\r\n            }\r\n            else if (value > 0 && returnIndex >= 0 && value < arr[returnIndex]) {\r\n                returnIndex = index;\r\n            }\r\n        });\r\n        if (returnIndex == -1) {\r\n            return [returnIndex];\r\n        }\r\n        console.log(\"res\", res);\r\n        const result = res[returnIndex];\r\n        const indexBestRoute = returnIndex;\r\n        const bestRoute = swapRoutes1[indexBestRoute];\r\n        for (let pair of bestRoute.pathPairs) {\r\n            const index0 = gettokenIndex(bestRoute.pathTokens, pair.token0);\r\n            const token0 = new Token(1, bestRoute.pathTokens[index0].address, Number(bestRoute.pathTokens[index0].decimal), bestRoute.pathTokens[index0].symbol, bestRoute.pathTokens[index0].name);\r\n            const index1 = gettokenIndex(bestRoute.pathTokens, pair.token1);\r\n            const token1 = new Token(1, bestRoute.pathTokens[index1].address, Number(bestRoute.pathTokens[index1].decimal), bestRoute.pathTokens[index1].symbol, bestRoute.pathTokens[index1].name);\r\n            const p = await getPoolInfoByToken(token0, token1, parseInt(pair.fee));\r\n            listPools.push(p);\r\n        }\r\n        const swapRout1 = new Route(listPools, tokenSwap.in, tokenSwap.out);\r\n        const uncheckedTrade = Trade.createUncheckedTrade({\r\n            route: swapRout1,\r\n            inputAmount: CurrencyAmount.fromRawAmount(tokenSwap.in, JSBI.BigInt(result)),\r\n            outputAmount: CurrencyAmount.fromRawAmount(tokenSwap.out, fromReadableAmount(amountOut, tokenSwap.in.decimals).toString()),\r\n            tradeType: TradeType.EXACT_OUTPUT,\r\n        });\r\n        return [result, bestRoute, uncheckedTrade];\r\n    }\r\n    catch (error) {\r\n        console.log(\"getBestRouteExactOut all\", error);\r\n    }\r\n    finally {\r\n    }\r\n    return [-1];\r\n};\r\nexport const getBestRouteExactInNaka = async function (amountIn, useDefiToken, swapRoutes = []) {\r\n    try {\r\n        const provider = getProvider();\r\n        if (!provider) {\r\n            throw new Error('No provider');\r\n        }\r\n        const quoteContract = new ethers.Contract(CurrentConfig.QUOTER_CONTRACT_ADDRESS, QuoterV2ABINaka.abi, provider);\r\n        let listPools = [];\r\n        if (swapRoutes.length == 0) {\r\n            const params = {\r\n                from_token: tokenSwap.in.address,\r\n                to_token: tokenSwap.out.address,\r\n                network: CurrentConfig.network\r\n            };\r\n            swapRoutes = await getSwapRoutesV2(params);\r\n        }\r\n        let swapRoutes1 = [];\r\n        for (var route of swapRoutes) {\r\n            // console.log(\"route swapRoutes\",route)\r\n            if (route?.pathPairs.length > 0 && (Number(route?.pathPairs[0].reserve0) > 0.000001 || Number(route?.pathPairs[0].reserve1) > 0.000001)) {\r\n                swapRoutes1.push(route);\r\n            }\r\n        }\r\n        const promises = swapRoutes1.map(async (route) => {\r\n            const addresses = route?.pathTokens?.map((token) => token.address);\r\n            const fees = route?.pathPairs?.map((pair) => Number(pair.fee));\r\n            try {\r\n                const transaction = await quoteContract\r\n                    .connect(provider)\r\n                    .callStatic\r\n                    .quoteExactInput(encodePath(addresses, fees), ethers.utils.parseEther(amountIn.toString()), useDefiToken);\r\n                return [Number(transaction.amountOut.toString()), Number(transaction.amountDefi.toString())];\r\n            }\r\n            catch (e) {\r\n                console.log(\"quoteExactIn error route,addresses,fees, encodePath(addresses, fees),ethers.utils.parseEther(amountIn.toString()),e\", route, addresses, fees, encodePath(addresses, fees), ethers.utils.parseEther(amountIn.toString()), e);\r\n            }\r\n            return [0, 0];\r\n        });\r\n        const res = await Promise.all(promises);\r\n        // console.log(\"result res\",res)\r\n        //const result = Math.max(...res[0]);\r\n        let result = 0;\r\n        let indexBestRoute = -1;\r\n        for (let idx = 0; idx < res.length; idx++) {\r\n            if (res[idx][0] > result) {\r\n                indexBestRoute = idx;\r\n                result = res[idx][0];\r\n            }\r\n        }\r\n        if (result == 0) {\r\n            return [-1];\r\n        }\r\n        const bestRoute = swapRoutes1[indexBestRoute];\r\n        for (var pair of bestRoute.pathPairs) {\r\n            const index0 = gettokenIndex(bestRoute.pathTokens, pair.token0);\r\n            const token0 = new Token(1, bestRoute.pathTokens[index0].address, Number(bestRoute.pathTokens[index0].decimal), bestRoute.pathTokens[index0].symbol, bestRoute.pathTokens[index0].name);\r\n            const index1 = gettokenIndex(bestRoute.pathTokens, pair.token1);\r\n            const token1 = new Token(1, bestRoute.pathTokens[index1].address, Number(bestRoute.pathTokens[index1].decimal), bestRoute.pathTokens[index1].symbol, bestRoute.pathTokens[index1].name);\r\n            const p = await getPoolInfoByToken(token0, token1, parseInt(pair.fee));\r\n            listPools.push(p);\r\n        }\r\n        const swapRout1 = new Route(listPools, tokenSwap.in, tokenSwap.out);\r\n        const uncheckedTrade = Trade.createUncheckedTrade({\r\n            route: swapRout1,\r\n            inputAmount: CurrencyAmount.fromRawAmount(tokenSwap.in, fromReadableAmount(tokenSwap.amountIn, tokenSwap.in.decimals).toString()),\r\n            outputAmount: CurrencyAmount.fromRawAmount(tokenSwap.out, JSBI.BigInt(result)),\r\n            tradeType: TradeType.EXACT_INPUT,\r\n        });\r\n        // console.log(\"result,bestRoute,uncheckedTrade,res[indexBestRoute][1] ]\",result,bestRoute,uncheckedTrade,res[indexBestRoute][1])\r\n        return [result, bestRoute, uncheckedTrade, res[indexBestRoute][1]];\r\n    }\r\n    catch (error) {\r\n        console.log(\"quoteExactInput Exception all\", error);\r\n    }\r\n    finally {\r\n    }\r\n    return [-1];\r\n};\r\nexport const getBestRouteExactOutNaka = async function (amountOut, useDefiToken, swapRoutes = []) {\r\n    try {\r\n        const provider = getProvider();\r\n        if (!provider) {\r\n            throw new Error('No provider');\r\n        }\r\n        const quoteContract = new ethers.Contract(CurrentConfig.QUOTER_CONTRACT_ADDRESS, QuoterV2ABINaka.abi, provider);\r\n        let listPools = [];\r\n        if (swapRoutes.length == 0) {\r\n            const params = {\r\n                from_token: tokenSwap.in.address,\r\n                to_token: tokenSwap.out.address,\r\n                network: CurrentConfig.network\r\n            };\r\n            swapRoutes = await getSwapRoutesV2(params);\r\n        }\r\n        let swapRoutes1 = [];\r\n        for (let route of swapRoutes) {\r\n            if (route?.pathPairs.length > 0 && (Number(route?.pathPairs[0].reserve0) > 0.000001 || Number(route?.pathPairs[0].reserve1) > 0.000001)) {\r\n                swapRoutes1.push(route);\r\n            }\r\n        }\r\n        const promises = swapRoutes1.map(async (route) => {\r\n            let addresses = route?.pathTokens?.map((token) => token.address);\r\n            let fees = route?.pathPairs?.map((pair) => Number(pair.fee));\r\n            addresses = addresses.reverse();\r\n            fees = fees.reverse();\r\n            try {\r\n                // console.log(\"addresses,fees,amountOut,useDefiToken\",addresses,fees,amountOut,useDefiToken)\r\n                const transaction = await quoteContract\r\n                    .connect(provider)\r\n                    .callStatic\r\n                    .quoteExactOutput(encodePath(addresses, fees), ethers.utils.parseEther(amountOut.toString()), useDefiToken);\r\n                return [Number(transaction.amountIn.toString()), Number(transaction.amountDefi.toString())];\r\n            }\r\n            catch (e) {\r\n                console.log(\"quoteExactOutput error route,addresses,fees, encodePath(addresses, fees),ethers.utils.parseEther(amountIn.toString()),e\", route, addresses, fees, encodePath(addresses, fees), ethers.utils.parseEther(amountOut.toString()), e);\r\n            }\r\n            return [0, 0];\r\n        });\r\n        const res = await Promise.all(promises);\r\n        let returnIndex = -1;\r\n        res.forEach(function (value, index, arr) {\r\n            if (value[0] > 0 && returnIndex == -1) {\r\n                returnIndex = index;\r\n            }\r\n            else if (value[0] > 0 && returnIndex >= 0 && value[0] < arr[returnIndex][0]) {\r\n                returnIndex = index;\r\n            }\r\n        });\r\n        if (returnIndex == -1) {\r\n            return [returnIndex];\r\n        }\r\n        const result = res[returnIndex];\r\n        const indexBestRoute = returnIndex;\r\n        const bestRoute = swapRoutes1[indexBestRoute];\r\n        for (let pair of bestRoute.pathPairs) {\r\n            const index0 = gettokenIndex(bestRoute.pathTokens, pair.token0);\r\n            const token0 = new Token(1, bestRoute.pathTokens[index0].address, Number(bestRoute.pathTokens[index0].decimal), bestRoute.pathTokens[index0].symbol, bestRoute.pathTokens[index0].name);\r\n            const index1 = gettokenIndex(bestRoute.pathTokens, pair.token1);\r\n            const token1 = new Token(1, bestRoute.pathTokens[index1].address, Number(bestRoute.pathTokens[index1].decimal), bestRoute.pathTokens[index1].symbol, bestRoute.pathTokens[index1].name);\r\n            const p = await getPoolInfoByToken(token0, token1, parseInt(pair.fee));\r\n            listPools.push(p);\r\n        }\r\n        const swapRout1 = new Route(listPools, tokenSwap.in, tokenSwap.out);\r\n        const uncheckedTrade = Trade.createUncheckedTrade({\r\n            route: swapRout1,\r\n            inputAmount: CurrencyAmount.fromRawAmount(tokenSwap.in, JSBI.BigInt(result[0])),\r\n            outputAmount: CurrencyAmount.fromRawAmount(tokenSwap.out, fromReadableAmount(amountOut, tokenSwap.in.decimals).toString()),\r\n            tradeType: TradeType.EXACT_OUTPUT,\r\n        });\r\n        return [result[0], bestRoute, uncheckedTrade, result[1]];\r\n    }\r\n    catch (error) {\r\n        console.log(\"getBestRouteExactOut all\", error);\r\n    }\r\n    finally {\r\n    }\r\n    return [-1];\r\n};\r\nexport async function executeTradeSlippageNaka(trade, slippage, useDefiToken, recipient = null, scanTX = true) {\r\n    let walletAddress = getWalletAddress();\r\n    if (!walletAddress && CurrentWallet.type === WalletType.EXTENSION) {\r\n        walletAddress = await geSignerAddress();\r\n    }\r\n    if (!walletAddress) {\r\n        throw new Error('Cannot execute a trade without a connected wallet');\r\n    }\r\n    recipient = recipient != null && recipient != \"\" ? recipient : walletAddress;\r\n    const options = {\r\n        slippageTolerance: new Percent(slippage, 10000),\r\n        deadline: Math.floor(Date.now() / 1000) + 60 * 20,\r\n        recipient: recipient,\r\n        useDefiToken: useDefiToken,\r\n    };\r\n    const methodParameters = SwapRouterNaka.swapCallParameters([trade], options);\r\n    const tx = {\r\n        data: methodParameters.calldata,\r\n        to: CurrentConfig.SWAP_ROUTER_ADDRESS,\r\n        value: methodParameters.value,\r\n        from: walletAddress,\r\n    };\r\n    const res = await sendTransactionGetReceipt(tx, scanTX);\r\n    return res;\r\n}\r\nexport async function createTrade() {\r\n    const provider = getProvider();\r\n    if (!provider) {\r\n        throw new Error('No provider');\r\n    }\r\n    const quoteContract = new ethers.Contract(CurrentConfig.QUOTER_CONTRACT_ADDRESS, QuoterV2ABI.abi, provider);\r\n    const swapRoutes = await getListRoute(tokenSwap.in.address, tokenSwap.out.address);\r\n    let listPools = [];\r\n    const promises = swapRoutes.map(async (route) => {\r\n        const addresses = route.path_tokens.map((token) => token['address']);\r\n        const fees = route.path_pairs.map((pair) => Number(pair.fee));\r\n        const transaction = await quoteContract\r\n            .connect(provider)\r\n            .callStatic\r\n            .quoteExactInput(encodePath(addresses, fees), ethers.utils.parseEther(tokenSwap.amountIn.toString()));\r\n        return Number(transaction.amountOut.toString());\r\n    });\r\n    const res = await Promise.all(promises);\r\n    const result = Math.max(...res);\r\n    const indexBestRoute = res.indexOf(result);\r\n    const bestRoute = swapRoutes[indexBestRoute];\r\n    for (var pair of bestRoute.path_pairs) {\r\n        const index0 = gettokenIndex(listToken, pair.token0);\r\n        const token0 = new Token(1, listToken[index0].address, listToken[index0].decimal, listToken[index0].symbol, listToken[index0].symbol);\r\n        const index1 = gettokenIndex(listToken, pair.token1);\r\n        const token1 = new Token(1, listToken[index1].address, listToken[index1].decimal, listToken[index1].symbol, listToken[index1].symbol);\r\n        const p = await getPoolInfoByToken(token0, token1, parseInt(pair.fee));\r\n        listPools.push(p);\r\n    }\r\n    const swapRout1 = new Route(listPools, tokenSwap.in, tokenSwap.out);\r\n    const uncheckedTrade = Trade.createUncheckedTrade({\r\n        route: swapRout1,\r\n        inputAmount: CurrencyAmount.fromRawAmount(tokenSwap.in, fromReadableAmount(tokenSwap.amountIn, tokenSwap.in.decimals).toString()),\r\n        outputAmount: CurrencyAmount.fromRawAmount(tokenSwap.out, JSBI.BigInt(result)),\r\n        tradeType: TradeType.EXACT_INPUT,\r\n    });\r\n    return uncheckedTrade;\r\n}\r\nexport async function executeTradeAftercheckSlippage(type, oldAmout, expectAmout, bestRoute, trade, slippage, maxSlippage, recipient = null, scanTX = true) {\r\n    let newEstimate = undefined;\r\n    let newTrade = trade;\r\n    if (type == TradeType.EXACT_OUTPUT) {\r\n        newEstimate = await reCheckRouteOutSlippage(expectAmout, bestRoute, slippage, maxSlippage, oldAmout);\r\n    }\r\n    else {\r\n        newEstimate = await reCheckRouteInSlippage(expectAmout, bestRoute, slippage, maxSlippage, oldAmout);\r\n    }\r\n    if (newEstimate === [true]) {\r\n        return [false];\r\n    }\r\n    else if (newEstimate[0] == true && newEstimate.length == 2) {\r\n        newTrade = newEstimate[1];\r\n    }\r\n    let walletAddress = getWalletAddress();\r\n    if (!walletAddress && CurrentWallet.type === WalletType.EXTENSION) {\r\n        walletAddress = await geSignerAddress();\r\n    }\r\n    if (!walletAddress) {\r\n        throw new Error('Cannot execute a trade without a connected wallet');\r\n    }\r\n    recipient = recipient != null && recipient != \"\" ? recipient : walletAddress;\r\n    const options = {\r\n        slippageTolerance: new Percent(slippage, 10000),\r\n        deadline: Math.floor(Date.now() / 1000) + 60 * 20,\r\n        recipient: recipient,\r\n    };\r\n    const methodParameters = SwapRouter.swapCallParameters([newTrade], options);\r\n    const tx = {\r\n        data: methodParameters.calldata,\r\n        to: CurrentConfig.SWAP_ROUTER_ADDRESS,\r\n        value: methodParameters.value,\r\n        from: walletAddress,\r\n    };\r\n    const res = await sendTransactionGetReceipt(tx, scanTX);\r\n    return [true, res];\r\n}\r\nexport async function executeTradeSlippage(trade, slippage, recipient = null, scanTX = true) {\r\n    let walletAddress = getWalletAddress();\r\n    if (!walletAddress && CurrentWallet.type === WalletType.EXTENSION) {\r\n        walletAddress = await geSignerAddress();\r\n    }\r\n    if (!walletAddress) {\r\n        throw new Error('Cannot execute a trade without a connected wallet');\r\n    }\r\n    recipient = recipient != null && recipient != \"\" ? recipient : walletAddress;\r\n    const options = {\r\n        slippageTolerance: new Percent(slippage, 10000),\r\n        deadline: Math.floor(Date.now() / 1000) + 60 * 20,\r\n        recipient: recipient,\r\n    };\r\n    const methodParameters = SwapRouter.swapCallParameters([trade], options);\r\n    const tx = {\r\n        data: methodParameters.calldata,\r\n        to: CurrentConfig.SWAP_ROUTER_ADDRESS,\r\n        value: methodParameters.value,\r\n        from: walletAddress,\r\n    };\r\n    const res = await sendTransactionGetReceipt(tx, scanTX);\r\n    return res;\r\n}\r\nexport async function executeTrade(trade) {\r\n    const walletAddress = getWalletAddress();\r\n    const provider = getProvider();\r\n    if (!walletAddress || !provider) {\r\n        throw new Error('Cannot execute a trade without a connected wallet');\r\n    }\r\n    /*\r\n    \n    // Give approval to the router to spend the token\r\n      const tokenApproval = await getTokenTransferApproval(tokenSwap.in,Number(trade.inputAmount.toExact()))\r\n    \n    // Fail if transfer approvals do not go through\r\n      if (tokenApproval !== TransactionState.Sent) {\r\n        return TransactionState.Failed\r\n      }\r\n     */\r\n    const options = {\r\n        slippageTolerance: new Percent(50, 10000),\r\n        deadline: Math.floor(Date.now() / 1000) + 60 * 20,\r\n        recipient: walletAddress,\r\n    };\r\n    const methodParameters = SwapRouter.swapCallParameters([trade], options);\r\n    const tx = {\r\n        data: methodParameters.calldata,\r\n        to: CurrentConfig.SWAP_ROUTER_ADDRESS,\r\n        value: methodParameters.value,\r\n        from: walletAddress,\r\n    };\r\n    const res = await sendTransaction(tx);\r\n    return res;\r\n}\r\n/*\r\n// Helper Quoting and Pool Functions\r\n\nasync function getOutputQuote(route: Route<Currency, Currency>) {\r\n  const provider = getProvider()\r\n\n  if (!provider) {\r\n    throw new Error('Provider required to get pool state')\r\n  }\r\n\n  const { calldata } = await SwapQuoter.quoteCallParameters(\r\n      route,\r\n      CurrencyAmount.fromRawAmount(\r\n          tokenSwap.in,\r\n          fromReadableAmount(\r\n              tokenSwap.amountIn,\r\n              tokenSwap.in.decimals\r\n          ).toString()\r\n      ),\r\n      TradeType.EXACT_INPUT,\r\n      {\r\n        useQuoterV2: true,\r\n      }\r\n  )\r\n\n  const quoteCallReturnData = await provider.call({\r\n    to: CurrentConfig.QUOTER_CONTRACT_ADDRESS,\r\n    data: calldata,\r\n  })\r\n\n  return ethers.utils.defaultAbiCoder.decode(['uint256'], quoteCallReturnData)\r\n}\r\n\n */\r\nexport function setTokens(listTk) {\r\n    listToken = [...listTk];\r\n}\r\nexport async function getTokenTransferApprovalSwap(token) {\r\n    const provider = getProvider();\r\n    const walletAddress = getWalletAddress();\r\n    if (!provider || !walletAddress) {\r\n        console.log('No Provider Found');\r\n        return -1;\r\n    }\r\n    return await getCurrencyApproveRouter(provider, walletAddress, token);\r\n}\r\nexport async function tokenTransferApproval(token, amount = TOKEN_AMOUNT_TO_APPROVE_FOR_TRANSFER) {\r\n    const provider = getProvider();\r\n    const address = getWalletAddress();\r\n    if (!provider || !address) {\r\n        console.log('No Provider Found');\r\n        return TransactionState.Failed;\r\n    }\r\n    try {\r\n        const tokenContract = new ethers.Contract(token.address, ERC20_ABI, provider);\r\n        const transaction = await tokenContract.populateTransaction.approve(CurrentConfig.SWAP_ROUTER_ADDRESS, fromReadableAmount(amount, token.decimals).toString());\r\n        return sendTransaction({\r\n            ...transaction,\r\n            from: address,\r\n        });\r\n    }\r\n    catch (e) {\r\n        return TransactionState.Failed;\r\n    }\r\n}\r\nexport const getGasFee = async () => {\r\n    const _rpc = CurrentConfig.rpc;\r\n    if (_rpc) {\r\n        const provider = new ethers.providers.JsonRpcProvider(_rpc);\r\n        const gasPrice = await provider.getGasPrice();\r\n        return Number(gasPrice?.toString());\r\n    }\r\n    return 0;\r\n};\r\nexport const DEFAULT_GAS_PRICE = 1e9;\r\nexport const getDefaultGasPrice = () => {\r\n    return random(35, 45) * DEFAULT_GAS_PRICE;\r\n};\r\n//# sourceMappingURL=trading.js.map","references":["/Users/macbookpro/trustless-computer/trustless-swap-sdk/trustless-swap-sdk/node_modules/ethers/lib/index.d.ts","/Users/macbookpro/trustless-computer/trustless-swap-sdk/trustless-swap-sdk/src/entities/swapRouter.ts","/Users/macbookpro/trustless-computer/trustless-swap-sdk/trustless-swap-sdk/src/entities/swapRouterNaka.ts","/Users/macbookpro/trustless-computer/trustless-swap-sdk/trustless-swap-sdk/src/entities/fractions/percent.ts","/Users/macbookpro/trustless-computer/trustless-swap-sdk/trustless-swap-sdk/src/constants.ts","/Users/macbookpro/trustless-computer/trustless-swap-sdk/trustless-swap-sdk/src/entities/token.ts","/Users/macbookpro/trustless-computer/trustless-swap-sdk/trustless-swap-sdk/src/entities/trade.ts","/Users/macbookpro/trustless-computer/trustless-swap-sdk/trustless-swap-sdk/src/entities/fractions/currencyAmount.ts","/Users/macbookpro/trustless-computer/trustless-swap-sdk/trustless-swap-sdk/src/entities/route.ts","/Users/macbookpro/trustless-computer/trustless-swap-sdk/trustless-swap-sdk/node_modules/jsbi/jsbi.d.ts","/Users/macbookpro/trustless-computer/trustless-swap-sdk/trustless-swap-sdk/src/poolinfo.ts","/Users/macbookpro/trustless-computer/trustless-swap-sdk/trustless-swap-sdk/node_modules/@types/lodash/index.d.ts","/Users/macbookpro/trustless-computer/trustless-swap-sdk/trustless-swap-sdk/node_modules/@types/lodash/camelCase.d.ts","/Users/macbookpro/trustless-computer/trustless-swap-sdk/trustless-swap-sdk/src/config.ts","/Users/macbookpro/trustless-computer/trustless-swap-sdk/trustless-swap-sdk/src/providers.ts","/Users/macbookpro/trustless-computer/trustless-swap-sdk/trustless-swap-sdk/src/wallet.ts","/Users/macbookpro/trustless-computer/trustless-swap-sdk/trustless-swap-sdk/src/utils1.ts","/Users/macbookpro/trustless-computer/trustless-swap-sdk/trustless-swap-sdk/src/QuoterV2.json","/Users/macbookpro/trustless-computer/trustless-swap-sdk/trustless-swap-sdk/src/QuoterV2Naka.json","/Users/macbookpro/trustless-computer/trustless-swap-sdk/trustless-swap-sdk/node_modules/axios/index.d.ts","/Users/macbookpro/trustless-computer/trustless-swap-sdk/trustless-swap-sdk/src/interfaces/token.ts"],"map":"{\"version\":3,\"file\":\"trading.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../src/trading.ts\"],\"names\":[],\"mappings\":\"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\"}"}
